 It is called the Deep-Syntactic Structure or &quot;DSyntS&quot; for short, and is inspired in this form by I. Mel'euk's Meaning-Text Theory (Mel'euk, 1988). For lexemes not in the lexicon it is necessary to specify the word class This illustrates that function words (do) need not be included in the input DSyntS, and that syntactic issues such as subject-verb and noun-determiner agreement are handled automatically. The tree in Figure 2 yields (3): Note that REALPRO does not perform the task of lexical choice: the input to REALPRO must specify all meaning-bearing lexemes, including features for free pronominalization. Furthermore, there is no non-determinism in REALPRO: the input to REALPRO fully determines the output, though the input is a very abstract linguistic representation which is well suited for interfacing with knowledge-based applications. REALPRO is really a realizer shell, which allows for a (run-time) configuration using specially formatted Linguistic Knowledge Bases (LKBs) which state grammar rules, lexical entries, and feature defaults. Normally, the user need not change the two grammar LKBs (the DSynt and SSynt grammars), unless the grammar of the target sublanguage is not a subset of English (or French). For example, in order to generate saw (rather than the default seed) for the past tense of to see, the following entry would be added to the lexicon. For example if in his/her application all sentences must be in past tense, the user can set the default tense to be past rather than present as follows: The English grammar currently covers a wide range of syntactic phenomena: Most of these points are illustrated by the input in Figure 2. Phenomena currently not handled automatically include certain types of &quot;fancy syntax&quot; such as clefts and it-clefts (though these can be generated by specifying the surface structure in the input), as well as long-distance dependencies such as These are books which I think you should buy (where which is an argument of buy). It has an application programming interface (API), available in C++ and Java, which can be used to integrate REALPRO in applications. The following ASCII-based specification corresponds to the DSyntS of sentence (2): In this definition, parentheses () are used to specify the scope of dependency while square brackets [] are used to specify features associated with a lexeme. Note that the number of output words is equal to the number of nodes in the SSyntS (because it is a dependency tree), and furthermore the number of nodes in the SSyntS is greater than or equal to the number of nodes in the DSyntS. (In our case, the number of nodes in the input DSyntS is equal to the number of words in the output string.) The row labeled &quot;Sec&quot; represents average execution time (over several test runs) for the sentence of the given input length, in seconds, on a PC with a 150MHz Pentium processor and 32 Megs of RAM. At each node, each rule in the appropriate grammar (deep- or surface-syntactic) must be checked against the subtree rooted at that node. This tree matching is in the general case exponential in n. However, in fact it is dependent on two variables, the maximal size of grammar rules in the grammar (or n, whichever is greater), and the branching factor (maximum number of daughter nodes for a node) of the input representation. The system is fully operational, runs on PC as well as on UNIX work stations, and is currently used in an application we have developed (Lavoie et al., 1997) as well as in several on-going projects (weather report generation, machine translation, project report generation).