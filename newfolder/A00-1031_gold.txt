TnT uses second order Markov models for part-ofspeech tagging.
To be explicit, we calculate for a given sequence of words w1 of length T. t1 tr are elements of the tagset, the additional tags t_1, to, and t7-,&#177;1 are beginning-of-sequence and end-of-sequence markers.
Using these additional tags, even if they stem from rudimentary processing of punctuation marks, slightly improves tagging results.
If sentence boundaries are not marked in the input, TnT adds these tags if it encounters one of [.!?;] as a token.
As a first step, we use the maximum likelihood probabilities P which are derived from the relative frequencies: for all t1, t2, t3 in the tagset and w3 in the lexicon.
N is the total number of tokens in the training corpus.
Transition and output probabilities are estimated from a tagged corpus.
As a second step, contextual frequencies are smoothed and lexical frequences are completed by handling words that are not in the lexicon (see below).
Trigram probabilities generated from a corpus usually cannot directly be used because of the sparsedata problem.
The smoothing paradigm that delivers the best results in TnT is linear interpolation of unigrams, bigrams, and trigrams.
Therefore, we estimate a trigram probability as follows: P are maximum likelihood estimates of the probabilities, and A1 + A2 &#177; A3 = 1, SO P again represent probability distributions.
We use the context-independent variant of linear interpolation, i.e., the values of the As do not depend on the particular trigram.
Due to sparse-data problems, one cannot estimate a different set of As for each trigram.
Therefore, it is common practice to group trigrams by frequency and estimate tied sets of As.
This calculates the probability of a tag t given the last m letters i of an n letter word: P(t1/7&#8222;,+1,,..ln).
The recursion formula is set A = A2 = A3 = 0 foreach trigram t1,t2,t3 with f (ti,t2,t3) &gt;0 depending on the maximum of the following three values: for i = m ... 0, using the maximum likelihood estimates P from frequencies in the lexicon, weights Oi and the initialization For the Markov model, we need the inverse conditional probabilities P(1,2_1+1, ... /Tilt) which are obtained by Bayesian inversion.
It turned out to be a good choice to set all 0, to the standard deviation of the unconditioned maximum likelihood probabilities of the tags in the training corpus, i.e., we set for all i = 0 ... m &#8212; 1, using a tagset of s tags and the average (11) This usually yields values in the range 0,03 ... 0.10.
We use different estimates for uppercase and lowercase words, i.e., we maintain two different suffix tries depending on the capitalization of the word.
Accepting that unknown words are most probably infrequent, one can argue that using suffixes of infrequent words in the lexicon is a better approximation for unknown words than using suffixes of frequent words.
The tagger currently tags between 30,000 and 60,000 tokens per second (including file I/O) on a Pentium 500 running Linux.
We evaluate the tagger's performance under several aspects.
First of all, we determine the tagging accuracy averaged over ten iterations.
Second, learning curves are presented, that indicate the performance when using training corpora of different sizes, starting with as few as 1,000 tokens and ranging to the size of the entire corpus (minus the test set).
An important characteristic of statistical taggers is that they not only assign tags to words but also probabilities in order to rank different assignments.
The tests are performed on partitions of the corpora that use 90% as training set and 10% as test set, so that the test data is guaranteed to be unseen during training.
We distinguish the overall accuracy, taking into account all tokens in the test corpus, and separate accuracies for known and unknown tokens.
The latter are interesting, since usually unknown tokens are much more difficult to process than known tokens, for which a list of valid tags can be found in the lexicon.
The German NEGRA corpus consists of 20,000 sentences (355,000 tokens) of newspaper texts (Frankfurter Rundschau) that are annotated with parts-ofspeech and predicate-argument structures (Skut et al., 1997).
Training length is the number of tokens used for training.
Average percentages of unknown tokens are shown in the bottom line of each diagram.
So, the distance of the probabilities of a best tag tbest and an alternative tag tau is expressed by p(tbest)/P(talt)7 which is some value greater or equal to 1 since the best tag assignment has the highest probability.
The table shows the percentage of unknown tokens, separate accuracies and standard deviations for known and unknown tokens, as well as the overall accuracy. percentage known unknown overall unknowns acc. acc. acc. reliable assignments are much higher than for unreliable assignments.
Training length is the number of tokens used for training.
Average part-of-speech tagging accuracy is between 96% and 97%, depending on language and tagset, which is at least on a par with state-of-the-art results found in the literature, possibly better.
For the Penn Treebank, (Ratnaparkhi, 1996) reports an accuracy of 96.6% using the Maximum Entropy approach, our much simpler and therefore faster HMM approach delivers 96.7%.
For the German newspaper data, results are 8.7% better when the word was seen before and therefore is in the lexicon, than when it was not seen before (97.7% vs. 89.0%).
Accuracy for known tokens is high even with very small amounts of training data.
As few as 1000 tokens are sufficient to achieve 95%-96% accuracy for them.
For a subset that is determined during processing by the tagger we achieve accuracy rates of over 99%.
