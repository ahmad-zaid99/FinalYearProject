@&#MAIN-TITLE@&#Calibration of traffic flow models using a memetic algorithm

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The proposed methodology minimizes the time required by the analyst to setup a calibration model and get the desired results.


                        
                        
                           
                           Calibration of simulation-based traffic flow models using a Memetic Algorithm (MA).


                        
                        
                           
                           The proposed Memetic Algorithm (MA) is a combination of a genetic algorithm and a simulated annealing approach.


                        
                        
                           
                           Considering that the state-of-the-art uses simultaneous perturbation stochastic.


                        
                        
                           
                           Approximation algorithms, they are compared against and the proposed MA. The results illustrated the first highlight here.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Calibration

CORSIM models

Traffic flow

Memetic algorithms

SPSA algorithms

@&#ABSTRACT@&#


                  A Memetic Algorithm (MA) for the calibration of microscopic traffic flow simulation models is proposed in this study. The proposed MA includes a combination of genetic and simulated annealing algorithms. The genetic algorithm performs the exploration of the search space and identifies a zone where a possible global solution could be located. After this zone has been found, the simulated annealing algorithm refines the search and locates an optimal set of parameters within that zone. The design and implementation of this methodology seeks to enable the generalized calibration of microscopic traffic flow models. Two different Corridor Simulation (CORSIM) vehicular traffic systems were calibrated for this study. All parameters after the calibration were within reasonable boundaries. The calibration methodology was developed independently of the characteristics of the traffic flow models. Hence, it is easily used for the calibration of any other model. The proposed methodology has the capability to calibrate all model parameters, considering multiple performance measures and time periods simultaneously. A comparison between the proposed MA and the Simultaneous Perturbation Stochastic Approximation (SPSA) algorithm was provided; results were similar between the two. However, the effort required to fine-tune the MA was considerably smaller when compared to the SPSA. The running time of the MA-based calibration was larger when it was compared to the SPSA running time. The MA still required some knowledge of the model in order to set adequate optimization parameters. The perturbation of the parameters during the mutation process must have been large enough to create a measurable change in the objective function, but not too large to avoid noisy measurements.
               

@&#INTRODUCTION@&#

The calibration of traffic flow simulation models continues to be an open area of research. Various frameworks have been proposed in literature to address the associated optimization problem (Coello et al., 2012), but not general enough to provide adequate results for the large number of available simulation models and required traffic scenarios. Fig. 1
                      illustrates the general conceptual calibration process, where model inputs are adjusted between realistic boundaries until simulation results are reasonably close to field measurements (Eckhardt et al., 2005). That is, the optimization problem searches for the values required by the parameters of the simulation model to minimize the difference between simulation outputs and the corresponding field measurements.

The solution space for the optimization is defined by the range of model parameters. A broad number of algorithms have been proposed to solve the optimization problem for a particular traffic flow system and/or simulation model (Hollander and Liu, 2008). One such algorithm proposed was the evolutionary approach, which uses genetic algorithms (Omrani and Kattan, 2013; Cunha et al., 2009). Genetic algorithms have been used for the calibration of micro-simulation models for the distribution of commercial vehicles (Schultz and Rilett, 2005). Other researchers have claimed that metaheuristics could provide superior results (Merz and Freisleben, 1999).

The sequential simplex algorithm was used to calibrate parameters for such as car-following, acceleration/deceleration, and lane-changing behavior (Kim and Rilett, 2003); however, only a subset of parameters was considered. The required computational time was considerably high and the solution could be a local optima. Stochastic approximation methodologies were used for the simultaneous calibration of traffic flow model parameters (Park et al., 2009; Park and Kamarajugadda, 2007; Chien, 1982). The SPSA (Spall, 1998) has been widely used for the calibration of various traffic flow models. When compared to Genetic algorithms and Iterative Adjustment algorithms, the SPSA has shown similar accuracy to the other algorithms, but with less computational time (Ma et al., 2012). This algorithm has been used to calibrate driver behavior and vehicle performance parameters simultaneously, with the use of such traffic measurements as vehicle counts (Balakrishna et al., 2007).

Although these methodologies could provide adequate results, a complex process to fine-tune algorithmic parameters was required for each model (Yuan et al., 2013; Paz et al., 2012). The research community has produced a large number of approaches for the calibration of simulation-based traffic flow models, a single automated methodology capable of calibrating various simulation models and traffic scenarios, which is not yet available in the literature. The primary challenge was the lack of a generalized optimizer algorithm for calibration of traffic flow models. This has motivated the development of MA, which combined global and local research mechanisms. That is, MA combined an extensive search of the best zones on the search space (exploration) and a more detailed search was performed on the zones with superior possible solutions (exploitation). The equilibrium between exploration and exploitation improved the results (Neri et al., 2012). Hence, MA was excellent for problems involving large search space.

Depending on the mechanisms chosen for a global and local search, a MA could be implemented and used easily, with little need for fine-tuning of the model parameters. For practical purposes a MA could provide improved results, more than other well established approaches such as Genetic Algorithms, Tabu Search, and Simulated Annealing (Garg, 2009).

In this study, a MA was proposed to search for the values of the parameters used by the traffic flow simulation model, to minimize the difference between simulation and the corresponding field measurements. Previous studies have either considered a subset of model parameters, a single performance measure, or fine-tuning was required for the parameters used by the optimization algorithm. The proposed methodology implements a MA to determine an adequate set of all model parameters. To the best of knowledge, the authors of this study have noticed that MAs have not been used for the calibration of traffic flow models. The proposed algorithm seeks to minimize user intervention during the calibration process. The parameters used by the proposed MA were relatively simple to fine-tune and were independent of the characteristics of the traffic flow simulation model (Weyland and Hagen, 2008; Pellerin et al., 2004). During the experiments, various simulation models and scenarios were calibrated with a MA, using the same values for its parameters. Optimization algorithms in the existing literature involve an extensive sensitivity analysis of the algorithm parameters. In addition, most methodologies require pre-calibrated model parameters and/or demand patterns to achieve adequate results (Wang et al., 2012; White and Chaubey, 2005).

@&#METHODOLOGY@&#

The calibration of the simulation model parameters, θ, is formulated using a mathematical programing approach. The analysis period was divided into a number T of discrete time periods. The objective function, Normalized Root Mean Square (NRMS), was provided by Eq. (1). The NRMS is the sum over all calibration time periods of the weighted average of the sum over all links N of the root square of the square of the normalized differences between actual and simulated performance measurements. The normalization enabled the consideration of multiple performance measures simultaneously. The calibration problem using vehicle counts and speeds as performance measures is formulated as follows:
                           
                              (1)
                              
                                 Minimice
                                 
                                 NRMS
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       
                                          
                                             N
                                          
                                       
                                    
                                 
                                 ∗
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          t
                                          =
                                          1
                                       
                                       
                                          T
                                       
                                    
                                 
                                 
                                    
                                       
                                          W
                                          ∗
                                          
                                             
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      N
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     V
                                                                  
                                                                  
                                                                     i
                                                                     ,
                                                                     t
                                                                  
                                                               
                                                               -
                                                               
                                                                  V
                                                                  ~
                                                               
                                                               
                                                                  
                                                                     (
                                                                     θ
                                                                     )
                                                                  
                                                                  
                                                                     i
                                                                     ,
                                                                     t
                                                                  
                                                               
                                                            
                                                            
                                                               
                                                                  V
                                                                  
                                                                     i
                                                                     ,
                                                                     t
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                          +
                                          (
                                          1
                                          -
                                          W
                                          )
                                          ∗
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   N
                                                
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     S
                                                                  
                                                                  
                                                                     i
                                                                     ,
                                                                     t
                                                                  
                                                               
                                                               -
                                                               
                                                                  S
                                                                  ~
                                                               
                                                               
                                                                  
                                                                     (
                                                                     θ
                                                                     )
                                                                  
                                                                  
                                                                     i
                                                                     ,
                                                                     t
                                                                  
                                                               
                                                            
                                                         
                                                         
                                                            
                                                               
                                                                  
                                                                     S
                                                                  
                                                                  
                                                                     i
                                                                     ,
                                                                     t
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        Lower bound⩽
                        θ
                        ⩽Upper bound

where:
                           
                              
                                 Vi,t
                                 
                                 =actual link counts for link i and time t,


                                 
                                    
                                       
                                          
                                             V
                                          
                                          
                                             ∼
                                          
                                       
                                       
                                          
                                             (
                                             θ
                                             )
                                          
                                          
                                             i
                                             ,
                                             t
                                          
                                       
                                    
                                 
                                 =simulated link counts for link i and time t,


                                 Si,t
                                 
                                 =actual speeds for link i and time t.


                                 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             ∼
                                          
                                       
                                       
                                          
                                             (
                                             θ
                                             )
                                          
                                          
                                             i
                                             ,
                                             t
                                          
                                       
                                    
                                 
                                 =simulated speeds for link i and time t,


                                 N
                                 =total number of links in the model,


                                 T
                                 =total number of time periods t, and


                                 W
                                 =weight used to assign more or less value to counts and speeds.

The guidelines provided by the Federal Highway Administration (FHWA) for CORSIM models were used in this study. The difference between actual and simulated link counts should be less than 5% for all links; the GEH statistic (Holm et al., 2007) should be less than 5 for at least 85% of the links. The GEH statistic was calculated as follows:
                           
                              (2)
                              
                                 GEH
                                 =
                                 
                                    
                                       
                                          
                                             2
                                             
                                                
                                                   (
                                                   
                                                      
                                                         V
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         V
                                                      
                                                      
                                                         ∼
                                                      
                                                   
                                                   
                                                      
                                                         (
                                                         θ
                                                         )
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                
                                                
                                                   2
                                                
                                             
                                          
                                          
                                             
                                                
                                                   V
                                                
                                                
                                                   i
                                                
                                             
                                             +
                                             
                                                
                                                   V
                                                
                                                
                                                   ∼
                                                
                                             
                                             
                                                
                                                   (
                                                   θ
                                                   )
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     


                        
                           
                              
                                 Vi
                                 
                                 =actual link counts for link i, and


                                 
                                    
                                       
                                          
                                             V
                                          
                                          
                                             ∼
                                          
                                       
                                       
                                          
                                             (
                                             θ
                                             )
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                                 =simulated link counts for link i.

Concepts from evolutionary optimizations, such as population and individuals were used in the formulation of the equation. An individual θ represents a vector of parameters containing a solution for the optimization problem. Each individual had a measure of effectiveness, functional adaptation. The algorithm sought to create a population through the generation and conservation of appropriate individuals (exploration). The best individuals were used to generate new populations through the iterative steps of the algorithm. Additionally, after the best individuals were selected, the exploitation process refined the search in order to obtain improved solutions (Neri et al., 2012).

The proposed MA integrates a genetic (Knodler et al., 2005) and simulated annealing (Bertsimas and Tsitsiklis, 1993) algorithm. The genetic algorithm was used for exploration; the simulated annealing algorithm was used for exploitation. After the stopping criteria were met, the best individual was stored and the population reset. The generation of new populations helped the algorithm to avoid local optima.

The MA was implemented using the following steps:
                           
                              Step 0: (Initial Population):
                                    
                                       Generate an initial population with 128 individuals. This population was randomly generated using constraints to avoid unrealistic values. The maximum number of individuals allowed by the available resources was used to increase the probability of finding a global solution. Sensitivity analysis with various networks and population size provided similar results.

Step 1: (Parents selection):
                                    
                                       Parent selection was performed using “roulette wheel selection,” conserving and paring the best 60% of individuals.

Step 2: (Crossover):
                                    
                                       A crossover process was used to combine parents to generate new individuals (children).

Step 3: (Mutation):
                                    
                                       Small perturbations (±1%) were applied to approximately 30% (mutation percentage) of the parameters of each child in order to explore nearby solutions.

Step 4: (Population management strategy):
                                    
                                       If the new child was better when compared to older individuals, the new child would replace the worst individuals.

Step 5: (Exploitation – Simulated Annealing (SA)):
                                    
                                       Step A: Create a neighbor around the best mutation. A sub-set (30%) of the parameters was randomly modified by adding +1% or −1% with a probability of 50% each.

Step B: If the neighbor was better than the current best result, the neighbor would replace the best result and the algorithm would move to Step C. If the neighbor was not an improvement, the temperature and the evaluation of the objective function would be used to calculate the probability (Pro) of selecting or not the neighbor as the starting point for the next iteration of Simulated Annealing. Eq. (3) provides the probability of selecting the neighbor.
                                             
                                                (3)
                                                
                                                   Pro
                                                   =
                                                   
                                                      
                                                         e
                                                      
                                                      
                                                         
                                                            
                                                               NRMS
                                                               _
                                                               neighbor
                                                               -
                                                               NRMS
                                                               _
                                                               best
                                                            
                                                            
                                                               Temperature
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          where Temperature=Temperature – Cooling Rate.

Step C: The stopping criterion has been provided below. If the stopping criteria has been met, please move to Step 6 of the GA. Otherwise, go to Step A.

Step 6: If the stopping criterion has been met, next, store the best individual and go to Step 0; otherwise, go to Step 1.

The initial population, selection, crossover, mutation, and replace percentages were assigned following recommendations in literature (Weyland and Hagen, 2008; Pellerin et al., 2004; Neri et al., 2012).

Eq. (3) was used as stopping criteria. When this inequality was satisfied or a pre-specified maximum number of iterations were reached, the stopping criteria would be met.
                           
                              (4)
                              
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             -
                                             n
                                             +
                                             1
                                          
                                          
                                             k
                                          
                                       
                                       
                                          
                                             
                                                
                                                   (
                                                   
                                                      
                                                         NRMS
                                                      
                                                      
                                                         AV
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         NRMS
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                   )
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                    
                                       n
                                    
                                 
                                 <
                                 ρ
                              
                           
                        where


                        
                           
                              
                                 NRMSAV
                                 .=average NRMS of the last n iterations,


                                 NRMSk
                                 
                                 =
                                 NRMS at k iteration,


                                 k
                                 =iteration counter,


                                 n
                                 =pre-specified integer=30, and


                                 ρ
                                 =pre-specified convergence condition=0.0015.

At least two population resets were required before Eq. (4) could be used and the stopping criteria evaluated. The experiments conducted as part of this research required no more than three population resets.

@&#EXPERIMENTS AND RESULTS@&#

The proposed methodology was tested using CORSIM models, which integrates FRESIM (Freeway simulation) and NETSIM (Arterial simulation) to represent the complete traffic environment (McTrans Center, 2014). The Traffic Analysis Toolbox Volume IV: Guidelines for Applying CORSIM Micro-simulation Modeling Software (Holm et al., 2007) described a manual procedure for the calibration of CORSIM micro-simulation models. However, these guidelines did not suggest a particular methodology to perform the calibration in an efficient and effective manner. Issues associated with convergence and stability of the solutions during the calibration was not discussed in the text. Nonetheless, alternative studies have proposed and developed practical procedures to accelerate the calibration process, which could be time consuming (Hourdakis et al., 2003).

CORSIM involves parameters for driver behavior and vehicle performance (McTrans Center, 2014). These parameters could be global, affecting the entire network, or local, affecting individual links. In addition, the parameters are defined for arterial, freeways, or both simultaneously. Table 1
                         shows the different parameters that can be used for the calibration of CORSIM models with the use of NETSIM and FRESIM (Paz et al., 2012). Several studies have conducted sensitivity analysis for the calibration of CORSIM models (Schultz and Rilett, 2004). The calibration parameters have different effects for specific networks and conditions. The interaction between those parameters is very complex and varies from model to model. As a starting point, the proposed methodology uses a randomly generated set of CORSIM values for the parameters listed in Table 1. These values were generated within realistic bounds; also a random generation of those values decreased the human effort during the calibration setup. During calibration, the value of the selected parameters was adjusted while constraining boundaries.

Two experiments were used to test the proposed methodology. The first experiment used a model for a portion of the Pyramid Highway in Reno, NV. The second experiment used a hypothetical network provided by McTrans. A software tool was developed to implement the proposed calibration methodology. The tool uses a basic layered architecture were each layer handles a group of related functions. The entire software was developed in Java and it includes more than 5086 lines of code. Java was chosen due to its capability to handle complex data structures and implementing complex mathematical functions. The specifications of the equipment used to perform the calibrations are mentioned below.

Operative System: Windows Server, Standard Edition, 2007, Service Pack 2 64Bit.
                              
                                 System: Intel Xeon CPU E7450 2.4GHz (4processors).

Ram memory: 32GB.

The parameters used in the experiments are as follows.

The parametrization and balance of the exploration and exploitation algorithms were conducted according to Neri et al. (2012), “Handbook of Memetic Algorithms” (Ch. 5).


                              
                                 
                                    Initial population=128.

Selection Percentage=60.

Crossover Percentage=50/50.

Mutation Percentage=30.

Change Percentage=1%.


                              
                                 
                                    Initial Temperature=0.045.

Final Temperature=0.

Cooling Rate=0.000135.

In the first experiment, a CORSIM model of the Pyramid Highway in Reno, NV was calibrated. The calibration was performed using vehicle counts and speeds as field measurements. This model included a total of 126 arterial links; which data was available for 45 of these links. Fig. 2
                           (a) shows a Google map screenshot and the (b) CORSIM model of the Pyramid highway.


                           Fig. 3
                            shows the improvement of the objective function at each iteration of the calibration process. The initial value of the objective function was 0.42. After 223 improvement steps, the NRMS decreased to 0.12. This change is equivalent to a decrement in the NRMS of 71%.


                           Fig. 4
                            represents vehicle counts before and after calibration. The 45° line represents the state where model counts and field measurements perfectly match for each link. The initial values were far from the 45° line, especially for higher counts. After the calibration, the counts were improved for all the links and the model represents field counts with more accuracy.

Similarly to Figs. 4 and 5
                            shows the speed values before and after calibration for the 45 links with data available. The speed vales were improved specially for the lower values in Fig. 5(a). The proposed MA was able to modify the more biased values at higher rates than values closer to the 45° line. This capability is important for the calibration of networks with zones under congested conditions.


                           Fig. 6
                            illustrates the GEH statistic for the model before and after the calibration process. The dotted line represents the initial condition of the model for the 45 links. The initial GEH value was less than 5 for approximately 11% of the links. The solid line represents the model condition after the calibration. The GEH was improved considerably, it shrunk more than 5 for 93% of the links.


                           Table 2
                            provides the summary of the calibration results. The NRMS and the GEH statistic were improved. In addition, the total link counts were closer to the actual values after the calibration. The calibration criteria were met for this model.

A network provided by McTrans was calibrated, which default parameters for the model were taken as the calibrated condition. The outputs from this default model were assigned as the field data for the experiment. All the calibration parameters were randomly modified. This modified model was used as a starting point for the calibration. This model included a total of 20 arterial links; vehicle counts and speed were simultaneously used to perform the calibration. Fig. 7
                            shows the model used in this experiment.


                           Fig. 8
                            shows the improvement of the objective function at each iteration of the calibration process for the second experiment. The initial value of the objective function was 0.36. After 94 improvement steps, the NRMS decreased to 0.03. This change is equivalent to a 93% decrement in the NRMS.

Vehicle counts before and after calibration are shown in Fig. 9
                           . The initial condition of the model was close to meeting the calibration criteria, therefore the proposed methodology improved the results for all the links in the network.

For the second experiment, the speed values were considerably improved compared to the results from the first experiment. Fig. 10
                            shows the speeds for the before and after calibration conditions of the model. This improvement was due to the accuracy of the model used.


                           Fig. 11
                            illustrates the GEH statistic for the model before and after the calibration process. The dotted line represents the initial condition of the model for the 20 links. The initial GEH value was less than 5 for 30% of the links. The solid line represents the model condition after the calibration. The GEH was improved considerably, it was lower than 5 for 100% of the links.


                           Table 3
                            illustrates the summary of the calibration results for the second experiment. The NRMS and the GEH statistic were improved. In addition, the total link counts were closer to the actual values after the calibration. The calibration criteria were met for this model.

In order to illustrate the advantages of the proposed MA, a comparison with the SPSA algorithm has been provided in this paper, and more specifically, the performance of the two algorithms for the calibration of microsimulation traffic flow models has been compared. The running time, efforts during both algorithms fine-tune processes, and overall results were compared. A clear pattern to fine-tune the optimization parameters was not found for the SPSA. Hence, empirical methods were used to find a set of proper parameters. The selection of parameters for the MA was considerably simple. Knowledge from previous studies was used to select proper parameters. In addition, it was likely that the parameters found for the MA could be used for any other CORSIM model. It was determined without the use of any information about the simulation and the same parameters worked well for the two tested models. The results in terms of GEH and NRMS were slightly better for the SPSA algorithm.

Running time was larger for the MA, but the effort required to fine-tune the MA was considerably small compared to the SPSA algorithm. Considering that analyst time is very valuable, the MA appears to be superior for this particular application because of the fine-tuning process, which was short when compared to the fine-tuning for the SPSA. It seemed that the MA performed well for large scale networks due to the normalized formulation of the methodology. Further research is required to provide more conclusive statements for all types of networks. However, most networks used in practice are of comparable in size to the ones used in this paper. Table 4
                      provides a summary of the approximate time and results for both algorithms. The period required to fine-tune the MA was the time spent to apply the corresponding guidelines. The time required to fine-tune the SPSA was the time spent seeking reasonable calibration results. However, there was not a clear pattern identified for this fine-tuning.

@&#CONCLUSION@&#

This study has proposed a Memetic Algorithm (MA) for the calibration of microscopic traffic flow simulation models. The proposed MA included a combination of genetic and simulated annealing algorithms. The genetic algorithm performs the exploration of the search space and identifies a zone were a possible global solution could be located. After this zone has been found, the simulated annealing algorithm would refine the search and locate an optimal set of parameters within that zone, known as exploitation. The design and implementation of this methodology would seek to enable the generalized calibration of microscopic traffic flow models. Two different CORSIM vehicular traffic systems were calibrated, and all parameters after the calibration were within reasonable boundaries. The first model represented a portion of the Pyramid highway in Reno, Nevada. Vehicle counts and speeds were available for 45 of the 216 links in the model. The second network was an example provided by McTrans. The calibration methodology had been developed independently of the characteristics of the traffic flow models. Hence, it could be easily used for the calibration of any other model. The proposed methodology has the capability to calibrate all model parameters, along with multiple performance measures and time periods simultaneously.

A comparison between the proposed MA and the SPSA algorithm has been provided in this paper. The results were similar; however, the effort required to fine-tune the MA was smaller when compared to the SPSA. The running time of the MA-based calibration was larger when compared to the SPSA. The time required by the analyst to fine-tune model parameters was minimal for the MA. Considering that analyst time is very expensive, the MA appeared to be superior for this particular application. Due to the fine-tuning process, which was required by most optimization algorithms, it was performed manually through a sensitivity analysis.

The MA still requires some knowledge of the model in order to set adequate optimization parameters, yet, guidelines are available for its parametrization. The perturbation of the parameters during the mutation process must be large enough to create a measurable change in the objective function, but not too large to avoid noisy measurements. This perturbation affects the convergence of the algorithm. In any case, the corresponding fine-tuning process is simpler than those required by other algorithms.

@&#REFERENCES@&#

