@&#MAIN-TITLE@&#Developing multiagent systems for design activity analysis

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A theory for design activity reasoning is proposed.


                        
                        
                           
                           The multiagent system ADEA is modeled and implemented for the theory analysis.


                        
                        
                           
                           Design space is modeled as a network of design parameter agents.


                        
                        
                           
                           Emergence is the result of a non-programmed behavior of role agents.


                        
                        
                           
                           Design parameter agents help to overcome the cognitive limitation of role agents.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Design activity theory

Socio-technical processes

Smart agent technologies

Multiagent systems

@&#ABSTRACT@&#


                  Engineering design is a complex socio-technical activity characterized by co-evolution of problem and solution. However, the actual design theories are not well-suited to represent and model the complexity of design activity, the co-evolution and its dynamics. Therefore, there is a need to develop design activity reasoning theories and tools, which can theorize and simulate the model of co-evolution and its dynamics. Multiagent systems have the capacity to play an important role in developing and analyzing models and theories of interactivity in socio-technical societies, particularly in design. This paper first addresses a theory for design activity reasoning. Then, it will present a multiagent system, called ADEA (Agents-based DEsign activity Analysis), in order to model, simulate and analyze this theory. The agents of the ADEA platform formalize the necessary design roles, characterizing the design activity as well as the relationship between design parameters in the design space. ADEA’s platform shows that cognitive limitation of role agents has been overcome, considering their relationship with the design space modeled as a network of design parameter agents.
               

@&#INTRODUCTION@&#

Engineering design is a complex socio-technical activity. The importance of understanding design activity justifies the efforts of the scientific community to develop design theories such as Design Science  [1], Reflection-in-Action  [2,3], Situated Function–Behavior–Structure  [4], General Design Theory  [5,6], Axiomatic Design  [7], Axiomatic Theory  [8], Theory of Inventive Problem Solving  [9–11], Infused Design  [12,13], and C–K Design Theory  [14].

Some aspects of design activity such as situativity  [4], the role of the context  [15], the role of capturing of data resulting from design activities and supporting the creation of these data  [16], the constructivist framework  [17], visual reasoning  [18], creative conceptual thinking  [19], designing as a representation transformation process  [20], the cognitive synchronization  [21] and the socio-technical aspects  [22,23] such as “specific role” and “action plan”  [24] have been studied. The role of the ‘insight’ through identification of the emerging relationships between requirements and the design solutions is also explored for controlling and acting on the design process  [25,26]. Generic set of design activities has been also classified into design definition activities, design evaluation activities and design management activities   [27].

Based on observations of in-practice design activity, the concept of co-evolution was introduced  [28]. The Function–Behavior–Structure  [4] is an example of a co-evolution model. Co-evolution is relevant to describe the core of design activity. In particular, the design activity can be presented as “bridging”  [29]: designing is seen as building and connecting elements of different points of views on the product. The nature of design problems, their beginning and end, the evolution of the reasoning and the evolution of all points of view (co-evolution) show that design is a non-programmable activity.

Even though these concepts are relevant, the actual design theories are not well-suited to represent and model the complexity of design activity, the co-evolution and its dynamics. Therefore, there is a need to develop design activity reasoning theories and tools which can theorize and simulate the model of co-evolution and its dynamics. Multiagent systems have the capacity to play an important role in developing and analyzing models and theories of interactivity in socio-technical societies, particularly in design  [30–32].

The purpose of this paper is to propose a theory for design activity reasoning and to validate some of its properties through its modeling, simulation and analysis implemented in a multiagent system called ADEA (Agents-based DEsign Activity Analysis).

The remainder of the paper is organized as follows: In Section  2, a review of research work in design theories and multiagent systems in design is proposed. In Section  3, the axioms of the proposed theory are given. In Section  4, the properties of the theory for design activity reasoning, as well as their mapping to the properties of multiagent systems are shown, and the architecture of ADEA is presented. Section  5 describes an application of ADEA. Section  6 discusses the results of this research. In the last section, the conclusion shows some perspectives and interest in the proposed approach.

In this section, we provide an overview of design theories, as well as multiagent systems used in engineering design.

Different design theories are proposed as analytical tools for understanding, explaining, and making predictions about design.

Herbert Simon approaches a design problem through programming heuristics, problem-solving theory and multicriteria decision-making  [1]. These models fully capture the dynamic mapping between solutions and criteria, but not the generation of new designs.

The Situated Function–Behavior–Structure conceptual framework proposed by Gero and Kannengiesser  [4] takes inspiration from situated cognition. It provides an explicit model of the interactions between the external world, defined as expected, and the internal world, defined as interpreted. Situated FBS provides meaningful insights into the relationship between the design move (called processes) proposed in FBS as being transformations between various states of the solution (function, expected behavior, structure, etc.) and the cognitive moves (interpreted behavior, expected behavior, etc.). An interesting insight into the relationship between the concepts of function, behavior, principle, state, and structure is given in the model proposed by Zhang et al.  [33].

Schön introduced the metacognition (Reflection-in-Action) for description of design activity  [2,3]. Schön describes the design activity using the concept of framing, making moves, and evaluating moves.

General Design Theory (GDT) was proposed by Yoshikawa  [34]. The goal of GDT is to explain the human design ability using set theory-based mathematical modeling. According to GDT, a conceptual combination of abstract characteristics is the necessary condition for innovative designing. Yoshikawa considers designing as the formation of concepts of non-existing entities as the result of performing logical operations on knowledge about existing things. Designing through the logical operations on the conceptual sets is the cognitive foundation of GDT. GDT also provides a prescription for the development of CAD systems  [5,6,35].

Axiomatic Theory has been used also for approaching design decisions based on formal logic  [8]. A new approach for formalizing product requirements described by unrestricted natural language has been derived from this theory  [36].

Axiomatic Design, proposed by Suh  [7], is defined as abstractions of observed design process. Suh perceived the design process as a mapping between four domains: customer domain, functional domain, physical domain, and process domain. Suh proposed two axioms to explain the design process: The Independence Axiom and The Information Axiom. Several theorems have been derived from those axioms, and the axioms and resulting theorems provide solutions to real-world design problems. Axiomatic design explains how an optimal artifact should be designed: the design should be uncoupled and with minimum information.

The theory of inventive problem solving (TRIZ) was proposed by Altshuller  [9–11]. The goal of TRIZ is to develop a new theory for creativity, one that is both effective and controllable. An important hypothesis of TRIZ is that a good solution invariably solves a contradiction in time and in space. TRIZ hypothesized that objective laws must exist that can suggest efficient methods for resolving contradictions. Altshuller discovered several laws through studying the methods of resolving the contradictions embedded in prior inventions. These laws help to systematize the creative process.

Infused design is a new theory proposed by Shai and Reich [12,13]. Infused design brings up the design problem representation to a mathematical meta-level, which is common to all engineering disciplines. The reasoning about the problem is then done using mathematical terminology, and tools that are the same for all engineers, disregarding their background. Infused design is based on a multidisciplinary combinatorial approach. Infused design supports the exchange of knowledge between project participants.

C–K Design theory was first introduced by Hatchuel and Weil  [14]. C–K theory considers design as the generation of new objects. The assumption of C–K design theory is that design can be modeled as the interplay between two interdependent spaces with different structures and logics: the space of concepts (C) and the space of knowledge (K).

Multiagent systems have been proposed in many engineering fields: collaborative intelligent manufacturing  [30,31,37], customer service management  [38], distributed production  [39], distributed control  [40,41], supply chain management  [42], product design  [32,43,44], and industrial applications  [45,46]. A detailed discussion on the issues and challenges in developing multiagent design systems was also proposed by Lander  [47].

In a more general way, agents can have their own level of knowledge. They can share knowledge and can communicate their knowledge  [48–50]. Multiagent systems are well-adapted to simulate the behavior of organizations  [51]. They offer a major interest for the management of phenomena such as self-organization and emergence  [52]. Multiagent systems are also well-adapted to respond to the heterogeneity of organizations  [53]. Agents are reactive to their environment, they interact between them, they permanently adjust their behavior and they co-evolve with their environment and other agents  [49].

There are four aspects that generally concern research for development of collaborative product design systems: concurrent intelligent design  [54,55], product modeling, consistency maintenance, and system architecture  [56,57]. Multiagent systems have mostly been used for supporting cooperation among designers or for allowing better simulations  [58,59]. Multiagent systems have also been used to develop human centered CAD systems  [60]. Context-aware agents are also proposed in cooperative design to bridge pervasive computing with agents through context-awareness [61,62]. Key projects in this area are: PACT, which demonstrated the use of agents in integrating concurrent engineering systems  [63]; DIDE, which proposed the use of agents in an engineering design environment in which CAD/CAM tools and knowledge-based systems were integrated  [64]; SHARE  including First-Link  [65], Next-Link  [66], and Process-Link  [67] which proposed an agent-based approach to help multidisciplinary design engineers in tracking and coordinating their design decisions. Many other projects were developed in this area as well, including RAPPID  [68], and Facilitator  [69].

Two other approaches also seem relevant to the issues presented here: those of Gero and Brazier. Gero et al. have developed a framework for reasoning about and explaining the nature and process of design: the Function–Behavior–Structure framework (FBS)  [4]. In this framework, the concept of the “curious design agent” is proposed. It uses a computational process called novelty detection to search the situated design space  [69–71]. This process provides advantages to exploring unfamiliar design spaces (creative design), but it is not applicable for complex product design problems that need routine design tasks and knowledge of experience  [56]. Brazier  [72] developed a generic architecture for a design agent where strategic reasoning and dynamic management of requirements are explicitly modeled. However, this generic design model is not adapted to real complex product design problems  [56].

@&#DISCUSSION@&#

The term “design theory” is generally understood to refer to a proposed explanation of design. A design theory is expected to follow principles of logic.

The designs theories are described in such a way that any scientist in the design disciplines is in a position to (a) understand these design theories and (b) either to provide empirical support or to empirically contradict them.

Evidence of design theories (GDT, Axiomatic design) is drawn from a mathematical world that started with axioms and was further developed and enriched by theorems proved earlier. Many design case studies provide empirical support to these design theories (C–K, TRIZ).

However, there are not theories for design activity reasoning. The concept of activity is inherent to the agent paradigm. Multiagent systems have been developed for supporting collaborative design as well as for the simulation of the design process. They can play an important role in analyzing a design reasoning theory, as well. This paper addresses this issue.

Design is a highly cognitive activity. It involves the definition of objectives and the definition of evaluation built during activity. Design activity requires the application of logic-based reasoning for building a set of coherent and justified proposals on an artifact. An artifact is a product, system, or organization. Design activity also requires the recognition and consideration of the consequences of the choices of descriptor parameters of an artifact. Design activity is described by actions. Design activity requires the definition of a reference frame for evaluation of the artifact. In order to describe design activity, a theory must be explicit about the objectives, conditions for action, knowledge, action rules, and possibilities each agent or set of agent should have. In this section, we will give a revised formulation of a theory first presented by Choulier  [73] with two axioms. Axiom 1 deals with the logic of propositions in design activity. Axiom 2 deals with the completeness of the set of roles.


                        Axiom 1 gives the objectives of design activity. It refers to the description of artifacts. The artifact is described by means and effects. The axiom is first discussed, then described and commented on.
                           Axiom 1
                           Designers act in order to build an application from a set of propositions on means to set of propositions on effects. This application should moreover be both surjective and satisfying.

A means is a real disposition that an artifact has. It qualifies what an artifact is. Means are described by design parameters (DP) including their declaration and their definition. Definition gives a value to a declared design parameter. For physical artifacts, design parameters can be 
                           
                              –
                              The list of components—the bill of materials.

The organization of these components; i.e. its physical architecture, the links between components and their positions.

For each component, its shapes, dimensions and material.

An effect qualifies what the artifact does or should do, when it acts or interacts with its environment. Due to the existence of different design situations, and especially of different ways to begin design, two classes of effects must be distinguished: real effects of an artifact, and target effects for an artifact not yet fully designed. Effects are also described by parameters, called resulting parameters (RP) here; they are either target resulting parameters (TRP) or real resulting parameters (RRP). Their descriptions must include their declaration and definitions (their values) and the solicitations under which the artifact shows the effect.

For physical artifacts, resulting parameters consider the behavior of the artifact under a given solicitation. A function is considered to be an abstract formulation of a behavior; that can be good or harmful, desired or not desired. This definition also includes behaviors or functions that result from choices made by designers on the structure of the artifact and fundamentally linked to it. These kinds of behaviors or functions are sometimes called unexpected discoveries, but we prefer to consider them as contingent effects. Contingency highlights two characteristics. The first is the fact that these effects are linked to choices previously considered and/or acted on the structure of the artifact. The second is that these effects are not necessary for the artifact: referring to Aristotle, contingency is the opposite of necessity. Such contingent effects are also defined or designed during design activity and must be considered in a design theory.

Relations between means and real effects are described by the logic of propositions. This was the initial formulation of Axiom 1 by Choulier  [73]. For each design parameter and each real resulting parameter, elementary propositions can be built. The classical form is:


                        The artifact has the design parameter 
                        
                           
                              〈
                              D
                              P
                              ,
                              d
                              〉
                           
                        , or


                        Under the solicitation/action 
                        
                           
                              〈
                              S
                              ,
                              s
                              〉
                           
                         
                        exerted from exterior environment of artifact, the artifact shows the real resulting parameter 
                        
                           
                              〈
                              
                                 RRP
                              
                              ,
                              r
                              〉
                           
                        ,

where: 
                           
                              〈
                              D
                              P
                              ,
                              d
                              〉
                           
                         represents the declared design parameter DP and its value 
                           d
                        ; 
                           
                              〈
                              S
                              ,
                              s
                              〉
                           
                         represents the declared solicitation/action 
                           S
                         and its value 
                           s
                        , and 
                           
                              〈
                              
                                 RRP
                              
                              ,
                              r
                              〉
                           
                         represents the declared real resulting parameter RRP and its value 
                           r
                        .

The real resulting parameter is therefore the response of the artifact to the solicitations/actions imposed by the flow of energy, material and information. From a pragmatic point of view, propositions on target resulting parameters do not have to be built since a logical status (true/false) cannot be given to such propositions, and logical operations cannot be used on them.

Rules can take the standard form of “IF 
                        
                           P
                         
                        THEN 
                        
                           Q
                        ” where 
                           P
                         represents a proposition on means and 
                           Q
                         represents a proposition on effect. 
                           P
                         is currently a compound proposition built from elementary propositions on design parameters using classical logical operators. 
                           Q
                         is a single proposition built from resulting parameters. The application from means to effects involves considering design rules as a full component of design activity. Most of these rules are pre-existing for designers and are an important part of their initial knowledge. For a design theory we must consider their introduction/activation by designers into the design situation as well as their possible invention (induction).

Operations from means to effects involve deduction, whereas operations from effects to possible means involve abduction. Abduction here has a wide meaning: any form of reasoning that leads designers to imagine means from a situation where effects are set. However, deduction and abduction do not consider the same resulting parameters. Deduction binds design parameters to real resulting parameters, whereas abduction binds target resulting parameters to design parameters.

The missing link between target resulting parameters and real resulting parameters involves some form of evaluation in order to qualify the satisfaction of designers on their proposition. Nevertheless, evaluation and satisfaction are complex notions that are subject to discussion. The adjective “satisfying” in the formulation of Axiom 1 refers to work done by Simon  [1] but will not be fully considered using this meaning here. It will be discussed in the next section. What is important is that some form of evaluation is necessarily present in current design situations as soon as target and real resulting parameters fit each other. Fig. 1
                         gives a view of elementary operations.

Finally, another property to be considered is surjectivity. In mathematics, a function 
                           f
                         from a set 
                           X
                         to a set 
                           Y
                         is surjective if every element 
                           y
                         in 
                           Y
                         has at least one corresponding element 
                           x
                         in 
                           X
                         so that 
                           f
                           
                              (
                              x
                              )
                           
                           =
                           y
                        . Transposed to design, this property implies that no target resulting parameter can be kept without defining the means making it correspond to the real resulting parameter. When target resulting parameters are set, means necessarily have to be imagined (abduction). Then, real resulting parameters can be deduced, with some corresponding to the initial targets, some being contingent, and then evaluations are to be done. When a contingent effect emerges, the designer also must state whether a new corresponding target resulting parameter must (or must not) be considered in the set of target resulting parameters. As a consequence, the design activity can be defined by a set of elementary operations: abductions, deductions and evaluation, corresponding to a local adjustment of the relations between design parameters describing means and resulting parameters describing effects. A dynamic and not necessarily complete network, representing these relations, emerges.

From Axiom 1, several design situations can be qualified. The first situation defines a satisfactory solution. A solution is a set of propositions on both means and effects on the one hand and rules on the other. This application is complete and surjective. A satisfactory solution is a solution for which the set of real resulting parameters is considered satisfactory. In this situation, design activity can stop—unless something is changed from the external.

The opposite of a satisfactory solution is a problem. A problem is therefore defined as any description of an artifact that can be in the following situations: 
                           
                              –
                              Not satisfactory.

Not evaluated: evaluation still needs to be done and/or some real resulting parameters, contingent, are defined without their corresponding target resulting parameters.

Where design rules have not been applied—therefore real resulting parameters are not fully defined. Design rules are not still considered.

Where target resulting parameters are set with no design parameters (this is the common situation where an objective is given but means have not yet been imagined).

There are roles that are expected: (a) to declare (name, eventually delete) and define (give value to) the parameters, (b) to state the rules, and (c) to determine satisfaction.

For each role, we must precisely define its objectives, the information it has to access to, and the situation where its action is required.

For each role, the type of action expected from it, the information to which it must have access and the situation where its action is required must be specified. An actor taking charge of a given role has to build its own action rules from its specific knowledge. Table 1
                         gives an overall view of what each role does.

The role of the Proposer is to propose the means. The Proposer is expected to define design parameters. It should be given free access to target design parameters and real design parameters, as well as satisfaction. Its action is expected as soon as satisfaction is not guaranteed. An actor taking this role makes abduction.

The role of the Legislator is to establish the relationship between means and effects. As soon as a target parameter is defined, it is expected to declare design parameters related to it (considering a design rule). Similarly, as soon as a design parameter is declared, the Legislator should relate it to real resulting parameters (still existing, or new). The Legislator is also expected to define real resulting parameters from defined design parameters. The Legislator must have access to declared design, target and resulting parameters, as well as to defined design parameters. The role of the Legislator requires the knowledge of design rules and the ability to apply them. An actor taking this role makes deductions.

The role of the Prescriber is to set target resulting parameters. The Prescriber is expected to declare and define target resulting parameters. The Prescriber must be informed of both target and real resulting parameters. The Prescriber’s action is typically required in the case of contingent parameters, when real resulting parameters do not match target resulting parameters.

The action expected from the Evaluator is to qualify the satisfaction. The Evaluator must act when couples of target resulting parameters and real resulting parameters are declared and defined. In order to take this role, an actor should be able to build its own evaluation reference frame and to apply it.

Then, the declarative form of the second axiom is as follows: 
                           Axiom 2
                           The roles of Proposer, Legislator, Prescriber, and Evaluator are necessary to initiate and lead a design activity, and to close it when a satisfactory solution is obtained.

In order to build compliance with the proposed theory, which considers the necessary roles without overlapping, we should build artificial systems. The paradigm of multiagent systems helps to build a relationship correspondence between a role and an agent such that an agent strictly plays a role. Indeed, multiagent systems have been proposed as a new approach for distributed artificial intelligence  [74]. The notion of activity is inherent to the agent paradigm. Agents act, interact and share knowledge. The modeling of a multiagent system is necessarily based on assumptions concerning the activity: a model and/or a theory. Agents can be defined and designed around the concept of a role  [75].

The main characteristics of agents (autonomy, distribution, adaptability, flexibility, cooperation and communication)  [48] allow, on the one hand, for the ability to efficiently manage heterogeneity and distribution (of agents, knowledge and events in the design space), and on the other hand, for the facilitation of exchanges of information and sharing of resources between agents (communication and cooperation). The idea of using an agent paradigm to simulate interactive systems, either distributed or cooperative is very attractive. Indeed, early on, researchers found the means to efficiently design some cooperative information systems in the set of characteristics of agents  [76]. Other researchers, like Jennings  [49], justified the adequacy of the approach agent for distributed system modeling and design (adequacy hypothesis).

From the two defined axioms, some properties of the design activity theoretical model can be shown. These properties are strongly related to certain properties of multiagent systems. An agent is a computer system situated in an environment, able to perceive that environment and to respond to changes that occur in it; it has a set of objectives and takes actions in order to accomplish these objectives  [48,49,75]. Three kinds of properties are dealt with: properties of individual agents, properties of the set of agents, and properties related to the activity agents simulate.
                           Property 1
                           Design Activity is Characterized by Autonomous Actors


                           
                              An agent is an active entity, and autonomy is the most important property of an agent. Autonomous agent can make decisions based on its individual states and goals; its activity is reactive and proactive.
                           


                        
                           Property 2
                           Design Activity is Characterized by Distributed Roles


                           
                              Agents are heterogeneous and distributed into a multiagent system. Several classes of agents can use different set of action rules defining roles. Therefore, a given agent can play a role in an activity that can be distinct from the roles played by other agents.
                           


                        
                           Property 3
                           Design Activity is Characterized by Emergence of Design Parameters, Rules, Real Resulting Parameters and Artifact Parameters


                           
                              Agents according to their roles can react to the declaration, definition or changing of either a parameter or a design rule. Thus, implementation of all roles, which results from the reaction of all agents to the design events, ensures emergence of different design parameters. An agent should have the ability to take the initiative in order to pursue its individual goals. Proactivity is, therefore, another property of an agent. Actions of agents must contribute to changes in the artifact definition.
                           


                        
                           Property 4
                           Design Activity is Seen as Co-evolution of the Problem and Solution


                           
                              A multiagent system is loosely coupled network of autonomous and heterogeneous problem solvers that works together to define and solve problems that are beyond the individual capabilities or knowledge of each agent (problem solver). The set of effects can be changed by the cooperative actions of agents. In addition, the fact that agents react to the introduction into the design space of an element of the problem or solution ensures the co-evolution of problem and solution.
                           


                        
                           Property 5
                           Design Activity has a Beginning and an End


                           
                              Actions of agents are performed through a continuous running process. This concerns the temporal continuity and the running properties.
                           


                        
                           Property 6
                           Design Activity is Characterized by Both Knowledge Computing and Reactivity


                           
                              Reactivity is an important property of agents. An agent is situated in an environment and its reaction depends on its environment and its knowledge. With reactivity capacities and knowledge an agent is able to perceive its environment and to respond to changes that occur in it. Knowledge computing enables both designers and agents to understand, combine, and reason with any form of knowledge. Agents can gain new and update knowledge from knowledge computing results.
                           

Agents need to have behaviors adapted to their tasks. This has been interpreted as a multi-level model for agent modeling  [77]. In the case of agents 
                           
                              
                                 α
                              
                              
                                 i
                              
                           
                         in simulation platform ADEA the most efficient level is the third one (Fig. 2
                        ). It corresponds to the 4-tuples (1): 
                           
                              (1)
                              
                                 
                                    
                                       α
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    〈
                                    
                                       
                                          Φ
                                       
                                       
                                          O
                                          
                                             (
                                             
                                                
                                                   α
                                                
                                                
                                                   i
                                                
                                             
                                             )
                                          
                                       
                                    
                                    ,
                                    
                                       
                                          Φ
                                       
                                       
                                          Δ
                                          
                                             (
                                             
                                                
                                                   α
                                                
                                                
                                                   i
                                                
                                             
                                             )
                                          
                                       
                                    
                                    ,
                                    
                                       
                                          Φ
                                       
                                       
                                          Π
                                          
                                             (
                                             
                                                
                                                   α
                                                
                                                
                                                   i
                                                
                                             
                                             )
                                          
                                       
                                    
                                    ,
                                    
                                       
                                          κ
                                       
                                       
                                          
                                             
                                                α
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                    〉
                                 
                              
                           
                         where 
                           
                              
                                 Φ
                              
                              
                                 O
                                 
                                    (
                                    
                                       
                                          α
                                       
                                       
                                          i
                                       
                                    
                                    )
                                 
                              
                           
                         is the function of observations 
                           O
                         of agent 
                           
                              
                                 α
                              
                              
                                 i
                              
                           
                        ; 
                           
                              
                                 Φ
                              
                              
                                 Δ
                                 
                                    (
                                    
                                       
                                          α
                                       
                                       
                                          i
                                       
                                    
                                    )
                                 
                              
                           
                         is the function of decisions 
                           Δ
                         of agent 
                           
                              
                                 α
                              
                              
                                 i
                              
                           
                        ; 
                           
                              
                                 Φ
                              
                              
                                 Π
                                 
                                    (
                                    
                                       
                                          α
                                       
                                       
                                          i
                                       
                                    
                                    )
                                 
                              
                           
                         is the function of actions 
                           Π
                         of agent 
                           
                              
                                 α
                              
                              
                                 i
                              
                           
                        ; 
                           
                              
                                 κ
                              
                              
                                 
                                    (
                                    
                                       
                                          α
                                       
                                       
                                          i
                                       
                                    
                                    )
                                 
                              
                           
                         is the finite set of knowledge of agent 
                           
                              
                                 α
                              
                              
                                 i
                              
                           
                        .

The knowledge 
                           
                              
                                 κ
                              
                              
                                 
                                    (
                                    
                                       
                                          α
                                       
                                       
                                          i
                                       
                                    
                                    )
                                 
                              
                           
                         distinguishes the two types of implemented agents in ADEA: (1) the knowledge consists of a set of reaction rules for the agents that are exclusively reactive (first type of implemented agent: parameter agents of ADEA) and (2) the knowledge contains all of the set of reaction rules, and additionally, the domain knowledge for the reactive–cognitive agent (second type of implemented agent: role agents).

In order to act, cooperate, exchange information and ask for services, the agents of ADEA express their intentions in the design space according to a language that is derived from the speech acts theory  [78]. In the current version of our ADEA platform, the agents perform four speech acts: declare, define, refuse, and accept. These four communication acts are sufficient to enable agents of ADEA to perceive the intention associated with the propositional content of a message. A communication act (
                           
                              
                                 Π
                              
                              
                                 
                                    
                                       K
                                    
                                    
                                       
                                          
                                             α
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        ) is then defined by the 4-tuples (2): 
                           
                              (2)
                              
                                 
                                    
                                       Π
                                    
                                    
                                       
                                          
                                             K
                                          
                                          
                                             
                                                
                                                   α
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                 
                                 =
                                 
                                    〈
                                    β
                                    ,
                                    
                                       
                                          α
                                       
                                       
                                          e
                                       
                                    
                                    ,
                                    τ
                                    ,
                                    η
                                    〉
                                 
                              
                           
                         where 
                           β
                         is a speech act denoted by a performative verb (one of the four design act verbs presented in Table 2
                        ), 
                           
                              
                                 α
                              
                              
                                 e
                              
                           
                         is the source agent of communication, 
                           τ
                         is the type of message and 
                           η
                         is the message itself, which can be an assertion, a question, a response, etc.

Each agent plays a preset role, delimited by its competences and defined in Axiom 2: 
                           
                              〈
                              
                                 Legislator
                              
                              〉
                           
                        , 
                           
                              〈
                              
                                 Prescriber
                              
                              〉
                           
                        , 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                        , or 
                           
                              〈
                              
                                 Evaluator
                              
                              〉
                           
                        . Coordination of agents and their self-organization are carried out by the sending of messages to the design environment. The decision rules of an agent (
                           
                              
                                 P
                              
                              
                                 
                                    
                                       α
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        ), gathered in its knowledge base, are described by the following 3-tuples (3): 
                           
                              (3)
                              
                                 
                                    
                                       P
                                    
                                    
                                       
                                          
                                             α
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                                 =
                                 
                                    〈
                                    
                                       
                                          E
                                       
                                       
                                          
                                             
                                                α
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                    ,
                                    
                                       
                                          X
                                       
                                       
                                          
                                             
                                                α
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                    ,
                                    
                                       
                                          Π
                                       
                                       
                                          
                                             
                                                α
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                    〉
                                 
                              
                           
                         where 
                           
                              
                                 E
                              
                              
                                 
                                    
                                       α
                                    
                                    
                                       i
                                    
                                 
                              
                           
                         is the set of events that agent 
                           
                              
                                 α
                              
                              
                                 i
                              
                           
                         can observe, 
                           
                              
                                 X
                              
                              
                                 
                                    
                                       α
                                    
                                    
                                       i
                                    
                                 
                              
                           
                         is the set of conditions associated with the internal states of agent 
                           
                              
                                 α
                              
                              
                                 i
                              
                           
                        , and 
                           
                              
                                 Π
                              
                              
                                 α
                                 i
                              
                           
                         is the set of actions that agent 
                           
                              
                                 α
                              
                              
                                 i
                              
                           
                         can perform.

At an agent level, the proposed architecture consists of the following: 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                         agent to propose design parameters; 
                           
                              〈
                              
                                 Legislator
                              
                              〉
                           
                         agent to define or modify rules; 
                           
                              〈
                              
                                 Prescriber
                              
                              〉
                           
                         agent to define target resulting parameters and 
                           
                              〈
                              
                                 Evaluator
                              
                              〉
                           
                         agent to build the evaluation reference frame and to apply it for satisfaction evaluation (Fig. 3
                        (a)).

ADEA satisfies the properties of the theoretical model mapped to the multiagent system. 
                           
                              (Property 1)
                              Agents of ADEA are autonomous and heterogeneous. Each agent plays a specific role. It has its own objectives. Its behavior is available in two attitudes: (1) the reaction to changes in its environment (observation event), (2) the implementation of its decisions (actions or action plan).

The four roles of the model are played by four agents. Depending on the evolution of shared elements in the design space, each agent triggers its own rules (design activity).

Creation or modification in the design space can be observed by each agent of ADEA—they may react according to their rules. Then, design parameters, rules and real resulting parameters emerge and are structured in an agent-based parameters network (Fig. 3(b)). Note however that in current version of ADEA the agents are very weakly proactive. We just focused on this aspect essential to facilitate emergence.

The co-evolution of problem and solution is provided in the model by the division of roles. With agentification of the model, an agent with following characteristics plays each role: autonomy, observation, reactivity, proactivity, and specific knowledge.

The design activity lasts as long as an agent has to trigger its own rules. First an agent is the initiator of the activity (in the model, agent 
                                    
                                       〈
                                       
                                          Prescriber
                                       
                                       〉
                                    
                                 ). Then a series of interactions follows. It will end when each agent has triggered its rules. Therefore, the activity of design converges towards a solution.

Each agent, depending on its role, has its own knowledge and own rules. To play its role, it achieves its objectives, and reacts to changes in the design space.

In this section, we present a design case study to analyze the design activity with the help of ADEA. It focuses on the design of a gas cartridge. It usually contains a mixture of butane (80%) and propane (20%) (Table 3
                     ).  It is used for cooking or lighting in outdoor activities.

Gas cartridges should be designed and manufactured in such a way as to withstand all conditions to which they will be subjected during their use and transport. In the design of gas cartridges, all relevant factors are to be taken into account, including: internal pressure, ambient and operational temperatures, including during transport or dynamic loads.

The design parameters–shape, dimensions and material (material characteristics: yield strength, tensile strength, time-dependent strength, modulus of elasticity, fracture resistance, etc.)–should ensure the safety of the of gas cartridge during its life. The design parameters of the gas cartridge should also be subjected to many manufacturing requirements, transports and usage. A cost model could consider material, stamping (or other modes of fabrication), sealing by folding (or other method) and coating. The materials of which the gas cartridge is made, and all materials that might come into contact with the contents shall not be liable to attack by the contents or form harmful or dangerous compounds therewith. The gas cartridge should also consider thermally-related problems such as the evaporation of the gas needs heat (latent heat of transformation) crossing the thickness of the cartridge by conduction. Table 4
                          shows some design rules used for a gas cartridge design.

Agentification of the problem is actually (1) the agentification of defined roles of design: one software agent for each of the four roles (
                           
                              〈
                              
                                 Prescriber
                              
                              〉
                           
                           ,
                           
                              〈
                              
                                 Legislator
                              
                              〉
                           
                           ,
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                        , 
                           
                              〈
                              
                                 Evaluator
                              
                              〉
                           
                        ), and (2) the agentification of all the design parameters (
                           
                              〈
                              S
                              〉
                           
                           ,
                           
                              〈
                              R
                              〉
                           
                           ,
                           
                              〈
                              
                                 TRP
                              
                              〉
                           
                        , 
                           
                              〈
                              
                                 RRP
                              
                              〉
                           
                           ,
                             and  
                           
                              〈
                              
                                 DP
                              
                              〉
                           
                        , see Table 1). Agentification means to define the behavior and knowledge of each agent: the initial data of the problem, the decision rules (Event–Condition–Action rules 
                        
                           
                              
                                 P
                              
                              
                                 
                                    
                                       α
                                    
                                    
                                       i
                                    
                                 
                              
                           
                           =
                           
                              〈
                              
                                 
                                    E
                                 
                                 
                                    
                                       
                                          α
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              ,
                              
                                 
                                    X
                                 
                                 
                                    
                                       
                                          α
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              ,
                              
                                 
                                    Π
                                 
                                 
                                    
                                       
                                          α
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              〉
                           
                        , for instance see Tables 5–8
                        
                        
                        
                        ) and the data related to its activity in the design. Each agent has to update the history of its activity. The sequence diagram presented in Fig. 4
                         and the view of the ADEA platform presented in Fig. 5
                         show an example of interactions between agents. Each role agent observes the design space and acts according to its own knowledge and design rules.

Behavior of a role agent in the ADEA platform is consistent with the diagram of Fig. 2 (
                           
                              [
                              
                                 Observe
                              
                              →
                              
                                 Decide
                              
                              →
                              
                                 Act
                              
                              ]
                           
                        ): 
                           
                              –
                              Observe. A role agent observes the evolution of data included in the design space shared (creation, modification or deletion of a node of the network of parameters). For instance, at the beginning of the scenario in Fig. 4, 
                                    
                                       〈
                                       
                                          Legislator
                                       
                                       〉
                                    
                                  agent observes that 
                                    
                                       〈
                                       
                                          Prescriber
                                       
                                       〉
                                    
                                  agent informs other role agents that they must consider a gas, in introducing the element “gas” in the design space (Fig. 6
                                 (a)). This corresponds to the design act “declare(
                                    
                                       gaz
                                    
                                    ,
                                    
                                       〈
                                       〉
                                    
                                 )”.

Decide. If an event happened in the design space, each role agent observes it. Then the agent updates its data (if relevant), and, in deciding its action, it consults its base of decision rules, and possibly starts a rule (it is involved in the event occurring). For instance, at the beginning of the scenario in Fig. 4, 
                                    
                                       〈
                                       
                                          Legislator
                                       
                                       〉
                                    
                                  agent determines if a rule in its rule base regards the declaration of a gas. In this case it finds one that requires it to declare a pressure for the gas (see Eq. (1) in Table 4).

Act. If a role agent triggers a rule, this leads it to modify data and/or act on the design space. If it acts (and therefore it is affected by the observed event), it then keeps track of its action in its history of activity. For instance, at the beginning of the scenario in Fig. 4, 
                                    
                                       〈
                                       
                                          Legislator
                                       
                                       〉
                                    
                                  agent triggers the previous rule (Eq. (1)) that causes it to declare a pressure to the gas (Fig. 6(a)). This corresponds to the communicative act “declare(
                                    
                                       
                                          P
                                       
                                       
                                          
                                             gas
                                          
                                       
                                    
                                    ,
                                    
                                       〈
                                       〉
                                    
                                 )”. Then it updates its data area with new data about this pressure. Finally, it stores its actions in its history (TabDesign in Fig. 5).

The 
                           
                              〈
                              
                                 Prescriber
                              
                              〉
                           
                         agent has initiated the gas cartridge design. Then, the 
                           
                              〈
                              
                                 Legislator
                              
                              〉
                           
                         agent declares parameters, but the 
                           
                              〈
                              
                                 Evaluator
                              
                              〉
                           
                         agent could not act until a resulting parameter was defined (Fig. 6(b) and (c)). Similarly, the conditions for actions from the 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                         agent have to be met. A shift between a series of declarations of parameters and their definitions can be observed. In order to design, both declaration and definition are necessary. During the first part of this simulation, information concerning the existence of design parameters is available. Here, the 
                           
                              〈
                              
                                 Legislator
                              
                              〉
                           
                         agent was able to explicitly declare these design parameters. The 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                         agent can define them when the condition for its action will be met. This condition in this case is the definition of the target parameter by the 
                           
                              〈
                              
                                 Prescriber
                              
                              〉
                           
                         agent (Fig. 6(c)). The interactions between the 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                         agent and the 
                           
                              〈
                              
                                 Evaluator
                              
                              〉
                           
                         agent show the emergence of some forms of cooperation (Fig. 6(d) and Fig. 7
                        ).

The number of declared and defined parameters at the beginning of the simulation is shown in Fig. 8
                        . In this sequence, agents 
                           
                              〈
                              
                                 Prescriber
                              
                              〉
                           
                        , 
                           
                              〈
                              
                                 Legislator
                              
                              〉
                           
                        , 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                         and 
                           
                              〈
                              
                                 Evaluator
                              
                              〉
                           
                         are interacting. The number design acts presented in Fig. 8(a) and (b), and the evolution of design parameters in design space presented in Fig. 8(c) and (d) indicate the interaction of roles through the design space. It shows that the 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                         has no easy way to improve the values of design parameters, as well as the controllability and the quality of design (see 
                           t
                           2
                         in Fig. 8(a)).

After some non-successful propositions, the 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                         agent uses 
                           sensitive heuristics
                         for understanding the influence of three design parameters: thickness, radius and yield strength on the lifespan. This implies a high level of design quality since the interaction effects between three design parameters can be identified by the 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                         agent (Table 9
                        ). The 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                         agent can also identify the design parameters that cause significant influence in the lifespan. As depicted in Table 9, the 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                         agent can define the values of 
                           
                              Thickness
                           
                           =
                           0.85
                           
                           
                              (
                              
                                 mm
                              
                              )
                           
                        ; 
                           
                              Radius
                           
                           =
                           94
                           
                           
                              (
                              
                                 mm
                              
                              )
                           
                         and Yield 
                        
                           
                              Strength
                           
                           =
                           499
                           
                           
                              (
                              
                                 MPa
                              
                              )
                           
                         that cause the value 
                           
                              Lifespan
                           
                           =
                           10.91
                           
                           
                              year
                           
                         in the output.

Though the 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                         agent can locally resolve the coupling with proper selection of these design parameters, it rapidly reached its limit of information processing. Indeed, in each instant, the only design parameters that the 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                         agent took into account were those that were immediately available to it. The values for these immediately-available design parameters, which can give satisfaction to a target resulting parameter locally, often produce the non-satisfaction of already-satisfied target resulting parameters. The 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                         agent has a limited capacity for simultaneous satisfaction of many target resulting parameters. This cognitive limitation could be overcome by activating the design parameters as agents. Through interactions of design parameter agents, their optimal values emerge. As depicted in Table 9, the initial value of Lifespan was 10.91 years resulting from the initial values of the design parameters (Table 10
                        ) proposed by the 
                           
                              〈
                              
                                 Proposer
                              
                              〉
                           
                         agent. Through interactions of design parameter agents, there emerged new values that satisfy the target design parameter (Tables 11 and  12)
                        .

This case study was also tested in an experiment design. In this experiment, each actor was mandated to play a single role. The development of the design experience showed that it was difficult to maintain this strict relationship. As depicted in Fig. 9
                        , each actor would tend naturally to play more than one role during the design process. From this we can conclude that the roles of Prescriber, Legislator, Proposer and Evaluator are distributed among different actors. The design experiment confirms the limited capacity of the Proposer for considering many target resulting parameters.

@&#DISCUSSION@&#

Some design theories have been developed to describe design. These theories are mostly focused on artifacts. Design activity reasoning is poorly supported by these theories. The proposed theory relies on two axioms. The theory specifies the design logic (Axiom 1) and actions of each role (Axiom 2). Four essential roles have been identified: (1) a Proposer, who defines the artifact’s characteristics; (2) a Legislator, who declares and defines design rules; (3) a Prescriber, who declares and defines target resulting parameters and (4) an Evaluator, who defines satisfaction and guarantees the conformity of the design relatively to the target resulting parameters.

ADEA agentifies the proposed theory. This agent-based platform shows how distributed autonomous agents interact to create design parameters, target resulting parameters and real resulting parameters. The co-evolution of the problem and solution, as well as the co-evolution of the behavior of the role agent are shown by ADEA. The simulation reveals that the immediately available design parameters have a great impact on the behavior of the agents. It shows also that the 
                        
                           〈
                           
                              Proposer
                           
                           〉
                        
                      agent has a limited capacity for satisfaction of simultaneous target resulting parameters. This cognitive limitation has been overcome by modeling the design space as a multiagent one. Activating the design parameters as agents allows for the convergence towards satisfaction of these simultaneous target design parameters. The simulation with ADEA shows that both knowledge computing and reactivity characterize design activity. The role and the influence of design space, as a network of design parameter agents on the dynamics of interaction, is a relevant issue.

The interaction between the different role agents questions the notion of emergence. Emergence is also the appearance of a non-programmed behavior. When several role agents contribute to a given activity, each of them should not be able to predict the consequences of its actions. In a restrictive acceptation, this could mean that the next role agent is not predictable in its actions. The simulations showed this characteristic.

The correspondence relationship, in which an agent plays only a role, is difficult to be maintained in practice. The observation of real design activity also shows the necessity of defined roles: Proposer, Legislator, Prescriber, and Evaluator, but not their sufficiency. The actors have multiple roles. They carry out design actions (declaration/definition) on the same parameters (Fig. 9), which can lead to inevitable conflict resolution, negotiation and consensus-seeking  [79].

@&#CONCLUSION@&#

The focus of this paper is the analysis of a theory for design activity reasoning. In order to perform this analysis, a multiagent system called ADEA (Agents-based DEsign activity Analysis) is modeled and implemented. The agents’ behavior is modeled based on the proposed design activity theory.

First, the ADEA platform helps to show some properties of design activity as co-evolution of the problem and solution, emergence of design parameters, target and real resulting parameters, temporal continuity of design activity, knowledge computing and reactivity. Each role agent is both cognitive and reactive.

Second, ADEA’s platform showed that the roles of Proposer, Legislator, Prescriber, and Evaluator are necessary to initiate and lead a design activity. However, the sufficient condition was not always satisfied. The main problem was that agents have a limited capacity for satisfaction of simultaneous target resulting parameters. It also revealed that changes in design space cannot be fully mastered by roles agents.

Third, defining the design space as a network of design parameter agents helps to overcome the cognitive limitation of role agents and to therefore satisfy the sufficient condition. Design parameter agents allowed the convergence towards the satisfied solution that can satisfy simultaneous target design parameters.

In the future, the simulation will have to further explore some dimensions of interaction and emergence. What an agent role thinks that other agent roles may think and do could be as useful as knowing their actual behavior for analyzing some aspects of their interactions.

@&#REFERENCES@&#

