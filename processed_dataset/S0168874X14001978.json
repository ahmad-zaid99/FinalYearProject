{"id": "S0168874X14001978", "article": "MAIN-TITLE A meshfree interface-finite element method for modelling isothermal solutal melting and solidification in binary systems   HIGHLIGHTS          A meshfree interface-finite element method (MI-FEM) for phase transformation.      Implementation of radial basis functions for constructing interpolants at interface-embedded elements.      Meshfree distance-regularized level sets with no re-initialization.      Coupling of the MI-FEM with meshfree automata for predicting microstructural evolution.      Analysis of bench mark problems yielded very good accuracy and excellent volume conservation.          KEYPHRASES   Level set method  Radial basis functions  Meshfree methods  Finite elements  Solidification  Melting   Solutal phase transformation is an isothermal diffusion-controlled process such that under certain process parameters melting of the solid or, conversely, solidification of the liquid will occur. Maintaining equilibrium at the liquid\u2013solid interface governs the direction and rate of its evolution. Proper understanding of the interfacial kinetics is essential since it occurs in a number of relevant industrial processes such as powder metallurgy which is an important technique for surface refurbishment and fabrication of complex components. Careful selection of bonding parameters is essential in order to avoid inferior mechanical and thermal properties of the finished product. Incomplete melting in wide-gap brazing results in porous joints with inferior mechanical properties [1]. Incomplete melting of additive powder particles during transient liquid phase bonding of single crystals results in stray grain formation which introduces grain boundaries into the single crystal along with their inherent weaknesses making the material more susceptible to grain boundary corrosion and sliding [2\u20135]. Careful selection of process parameters such as temperature, time and solute concentration is very important in optimizing the process and the final microstructure of the product. Therefore, it is not surprising that numerical modelling of the effect of process parameters on the interfacial kinetics during phase transformation is very essential.  Numerical modelling of phase transformation of metals and alloys remains one of the most challenging problems in materials science. This is due to the requirement of simultaneously solving a highly non-linear and coupled free boundary problem in addition to predicting the future location of the liquid\u2013solid interface which is itself an unknown. The complex topological evolution of the interface and handling of interfacial dynamics such as merging and splitting makes numerical analysis quite challenging.  In numerical modelling of solidification and phase transformation, the interface separating two distinct phases can be assumed either diffuse (with a finite thickness) or a sharp interface (infinitesimally thin). The diffuse interface assumption is taken in phase field (PF) methods often attributed to Cahn and Hilliard [6,7]and Allen and Cahn [8]. In such methods, a phase parameter is introduced which is 1 in phase A and 0 in phase B while it varies sharply but smoothly across an interfacial region with a finite thickness. The PF method has gained considerable popularity in materials science and modelling of phase transformation due to its ability to directly incorporate the thermodynamics of phase transition into the formulation. It also eliminates the need to assign boundary conditions directly at the interface. Additionally, computation of interface normals and curvature is also avoided.  Traditional finite element modelling of phase transformation based on the sharp-interface assumption involves interface tracking techniques [9\u201316] where the interfaces are explicitly tracked by imposing marker points directly at the interface while an adaptive meshing technique is used such that the mesh is continuously updated to conform to the evolving liquid and solid topology. The main advantage of this Lagrangian approach is that imposing the Dirichlet boundary conditions (DBC) at the interface, as is often typical in sharp-interface solidification and melting numerical models, is easy since there will always be interfacial nodes that directly represent the interface. However, the main challenge with this approach is that the interfaces are represented explicitly requiring the continuous update and re-generation of the mesh which becomes very time consuming especially in 3D analysis. Explicit handling of interfacial dynamics such as merging or splitting becomes a significant challenge where interfacial nodes must be added or deleted as required to ensure an accurate solution.  Rather than explicitly tracking the sharp-interface, it can be captured using a fixed mesh while allowing it to evolve independently of the underlying mesh. Methods based on this Eulerian approach is the volume-of-fluid method developed by Hirt and Nichols [17] which is very popular in modelling computational fluid dynamics problems such as multi-phase flows. In the VOF method, a step function, f, is used to define the interface such that it is 0 in one phase and 1 in the other while the sharp-interface lies somewhere at 0 < f < 1 . Advantages of the VOF method include easy handling of interfacial dynamics and their excellent volume and mass conservation properties [18]. However, an extra step is often required to reconstruct the interface from the VOF solution using popular methods such as the piecewise linear interface calculation (PLIC) [19]. The overall accuracy of the method depends largely on the performance of its interface reconstruction schemes.  Another approach is to implicitly define the interface by a higher dimension, smooth, and continuous function, \u03a6 , such as a signed distance function (SDF), where the interface is the zero level set of that function. The SDF is then evolved by solving a Hamilton\u2013Jacobi level set equation [20]:  (1)    \u2202 \u03a6   \u2202 t   +   V   \u2192   .   \u2207   \u2192   \u03a6 +   V   n   ext   \u2016    \u2207   \u2192   \u03a6  \u2016 = 0   where \u03a6 is the level set function (LSF) value,   V   \u2192   is the convective velocity in the domain, and V  ext   n is the normal velocity of the interface extended sufficiently around the interfacial area. This approach has a number of very attractive features such as easy calculation of the local normal vector to the interface, curvature, and easy handling of interface dynamics such as splitting and merging.  It is important to note that since the interfacial evolution is now independent of the underlying mesh, a finite element formulation used to calculate the field variables must account for the inter-element discontinuities where the interface may arbitrarily intersect the elements. An additional complication due to the implicit representation of discontinuities is that there are no nodes that immediately lie on the interface. As a result, it is not straightforward to impose the essential boundary conditions governing interfacial equilibrium as in the conventional finite element method (FEM).  The relatively recent generalized/extended finite element methods (GFEM/XFEM) based on the Partition of Unity method (PUM) developed by Melenk and Babuska [21] are excellent techniques for handling both weak and strong discontinuities that may arbitrarily intersect the finite elements. The (GFEM/XFEM) are practically identical methods [22] where the GFEM was adopted by the Texas school [21,23,24] and the XFEM was adopted by the Northwestern school [22,25,26]. In the GFEM/XFEM, discontinuities are allowed to intersect the element eliminating the requirement of aligning the edges of elements with the discontinuity as is typically done in conventional FEMs. A hybrid finite element-meshless approach is used where the conventional FEM is used for elements away from the discontinuity while local enrichment at nodes of elements intersected by the interface is done within the framework of the PUM [21] such that a field variable can be approximated by  (2)  U ( x ) =   \u2211   i = 1     n   std       N   i   ( x )   U   i   +   \u2211   j = 1     n   enr       \u03c8   j   ( x )   a   j     where   N   i   ( x ) in Eq. (2) are the standard finite element shape functions for node i, U  i are the nodal degrees of freedom,   \u03c8   j   ( x ) are the enrichment functions and a  j are the nodal enrichment degrees of freedom. n  std and n  enr are the number of nodal standard degrees of freedom and nodal enriched degrees of freedom, respectively.The GFEM/XFEM is tremendously successful especially in the area of solid mechanics and modelling of crack propagation and fracture where it entertains a high degree of maturity. This is mainly due to the flexibility of the PUM for inclusion of pre-determined analytical solutions as enrichment functions which significantly facilitates handling of singularities that arise at crack tips during crack propagation analysis. Adding the well-known asymptotic singular near-tip solutions near crack fronts and dislocation cores as enrichments can significantly reduce the h-refinement required to handle such features.  The GFEM/XFEM generally involves the use of some type of enrichment functions such as Heaviside or ridge functions where the added enrichment functions correspond to added degrees of freedoms at the nodes of the original element as shown in Fig. 1 . Two complications become immediately apparent. The first is that for certain types of enrichment functions, such as ridge functions, the enrichment effect may not vanish for elements adjacent to the intersected element [22]. This means that shape functions at the adjacent elements will no longer satisfy the partition of unity property since only some of the nodes of the element are enriched while others are not. Such elements are termed \u201cblending\u201d elements which have been shown to slow convergence if left untreated [27,28]. Specialized methods are often needed to avoid the parasitic behaviour associated with blending elements and a lot of research has been done to overcome problems associated with them [22]. The second apparent problem is that there are no degrees of freedoms that are directly associated with the interface. The interpolation functions resulting from the PUM procedure do not in general satisfy the Kronecker-delta property. As a result, imposing the DBC at the interface requires special methods such as Lagrange multipliers, penalty methods, shifting, augmented Lagrangians, among other techniques [29\u201331].  Within the context of solidification and phase transformation, the LSM is often used in the XFEM where it has been applied in [32\u201337]. Conventional Galerkin methods will immediately fail in obtaining a stable solution of the LSF and a stabilization technique such as the Galerkin least squares formulation is required which introduces a stabilization diffusion term [35]. This term is dependent on a stabilization parameter that scales the impact of stabilization. It is often unclear how to determine this parameter and is generally approximated by trial and error. Unfortunately, even if a stable solution of the LSF is obtained, it does not guarantee that the LSF remains a SDF. As a result the LSF can become too flat or too steep and the solution immediately deteriorates. Therefore, a very critical step for successful solution of the LSF is re-initialization [38] which often requires the solution of  (3)    \u2202 \u03a6   \u2202 \u03c4   = sign ( \u03a6 ) ( 1 \u2212 \u2016    \u2207   \u2192   \u03a6  \u2016 )   where \u03c4 are virtual time steps not related to the actual computation time. The sign ( \u03a6 ) is calculated by using  (4)  sign ( \u03a6 ) =   \u03a6       \u03a6   2   +   \u2016    \u2207   \u2192   \u03a6  \u2016   2     h   2         where h is the element size. This iterative procedure is necessary for some virtual time steps to force back the LSF to be a SDF which, ideally, should keep the interface precisely fixed. However, this is never the case since the interface will always move even if the frequency of re-initialization was reduced to be done only every few time steps.  In phase transformation, this issue is of significant concern since the parasitic interfacial movement is non-physical and unrelated to the physics of the problem. As a result the classical LSM is non-conservative. The re-initialization procedure also tends to excessively smooth out the interface which may prevent the formation of essential features such as the growth of secondary dendrite arms whose formation is dependent on the small perturbations that typically exist on primary dendrite arms. This has been investigated by Zabaras et al. [35] where it was reported that frequency and the number of iterations during re-initialization had a significant effect on the final interfacial morphology of the dendrite.  To overcome the volume loss issue in level sets, Enright et al. [39] proposed a semi-Lagrangian particle LSM where random weightless particles are imposed at a narrow band on each side of the interface. Negative particles are located on the negative side of the interface while positive particles on the other. The particles are advected along with solving the LSF. As the interface evolves, some negative particles will creep into the positive side of the interface or vice versa. The particles are used to correct the predicted LSF. While the particle LSM effectively solves the mass/volume conservation issues with the classical level set method, it is computationally intensive since the re-initialization and velocity extension steps are still required along with advecting, deleting and addition of the virtual particles. Also, there must be sufficiently large number of particles near the interface to ensure that correction of the LSF is done accurately. Recently, Leung and Zhao [40] proposed a grid based particle method for moving interface problems which is shown to be computationally less expensive than Eulerian LSM techniques and can handle arbitrary topological changes such as particle splitting and merging and has been shown to work well in 3D.  In the context of image segmentation, another class of solutions for solving the LSF without re-initialization involves variational formulation such that an energy term is added to the LSF which penalizes the approximation of the LSF if it deviates from a distance function [41]. Another approach proposed by Gomes et al. [42] forces the LSF into a SDF by solving three coupled partial differential equations (PDEs).  In the field of computational geometry, construction of 3D CAD geometries from scanned shapes and objects is often done using radial basis functions (RBFs) for constructing implicit geometries by globally (or locally) interpolating surfaces based on only the distribution of scattered data points approximating the surface of the scanned object. Further parametrization or mesh generation is then used to generate the CAD model. Shape optimization can be done by interpolating LSFs using RBFs as was done by Wang et al. [43] where the Hamilton\u2013Jacobi PDE was transformed into a system of ordinary differential equation (ODE). Xie et al. [44] reported that this approach preserves the LSF to remain as a SDF which deemed the re-initialization procedure unnecessary.  Despite the robustness of phase transformation models based on the sharp-interface assumption using the XFEM/GFEM, they are not as popular as models based on PF methods which can directly incorporate the thermodynamics of phase transition into the formulation. However, it should be noted that recent works, such as that by Zhao et al. [45], developed a sharp-interface model based on energy functional minimization for modelling solid\u2013solid phase transformation using the XFEM and LSM. Additionally, despite the popularity of PF methods, they have a number of shortcomings. Wheeler et al. [46] and Wang et al. [47] have shown that the interface thickness must be smaller than the capillary length for the solution to converge to the sharp-interface limit. As a result, one limiting factor of the PF methods is that the mesh size at the diffuse region must be significantly smaller than the size of the diffuse interface thickness. This factor coupled with the requirement of solving high-order non-linear set of PF equations causes the PF methods to be computationally demanding even when adaptive techniques are used. While the computational aspects of PF methods can be relatively mitigated by the use of parallel processing and more powerful processors, it still has the limitation that the PF solution converges to the true sharp-interface solution only when the diffuse interface thickness is very thin. Another difficulty is their dependence on a large number of unknown parameters that are generally difficult to determine experimentally and, as a result, are often assumed in simulations.  Therefore, further development of share-interface based models is needed so as to provide a viable alternative to PF methods. The approach of approximating the solid phases immersed in liquid as dynamic implicit geometries exhibits very attractive advantages as discussed earlier. Our goal in this work is to further develop this approach for tackling phase transformation problems. We propose a meshfree interface-finite element method (MI-FEM) for modelling isothermal phase change in binary systems as a more convenient approach than the traditional GFEM/XFEM and LSM while preserving their attractive features in handling dynamic implicit geometries. For a fixed finite element mesh (structured or un-structured), a SDF is used to implicitly define the liquid\u2013solid interface. Interface nodes are added directly at the intersection points between the underlying mesh and the zero iso-contour of the LSF. At the interface-embedded elements, interpolation functions are constructed using meshfree RBF such that both the partition of unity and Kronecker delta properties are satisfied allowing for precise imposition of DBCs on each side of the interface. It will be shown that using these meshfree interfacial nodes coupled with RBFs will facilitate calculation of the interfacial curvature, normal, interfacial velocity and will play a major role in meshfree solution of the distance-regularized level set (DRLS) function such that re-initialization is no longer necessary and exhibiting excellent volume conservation. Using the obtained solution of the DRLS function, the MI-FEM is coupled with a new meshfree automata (MA) method for efficiently determining the evolving microstructure. Mathematical formulation and implementation will be presented and discussed.  Consider a domain \u03a9 that consists of a solid phase   \u03a9   S   and a liquid phase   \u03a9   L   such that \u03a9 =   \u03a9   S   \u222a   \u03a9   L   and   \u03a9   S   \u2229   \u03a9   L   = 0 . To describe the solid\u2013liquid interface \u0393 ( t ) at time t, we introduce a field function \u03a6 such that the interface is the zero level set of \u03a6 :  (5)  \u0393 ( t ) = {  x \u2208 \u03a9 : \u03a6 ( x , t ) = 0  }   where t is the time and the field function \u03a6 is taken as a SDF such that the distance of point x = ( x , y , z ) to the interface at time t can be represented as  (6)  d ( x , t ) = \u00b1 min \u2016  x \u2212   x   \u0393    \u2016   where   x   \u0393   lies on \u0393 ( t ) . The LSF can then be defined as the SDF from the interface:  (7)  \u03a6 ( x , t ) = \u2016  x \u2212   x   \u0393    \u2016 = {     d ( x , t )   \u2200 x \u2208   \u03a9   L       0   \u2200 x \u2208 \u0393     \u2212 d ( x , t )   \u2200 x \u2208   \u03a9   S            The diffusion of the solute can be described by using Fick\u05f3s second law of diffusion:  (8)    \u2202   C   p     \u2202 t   =   \u2207   \u2192   \u00b7 (   D   p     \u2207   \u2192     C   p   )   where C  p is the composition of the liquid and solid phases, D  p is the inter-diffusion coefficient, t is the time and subscript p=S for solid and p=L for liquid. Diffusivity in solid is computed using the Arrhenius equation:  (9)    D   S   =   D   o     e   ( \u2212 Q / RT )     where D  o is the diffusion frequency factor, Q is the activation energy for diffusion, R=8.31451J/K/mol is the universal gas constant and T is the bonding temperature. Due to the diffusion of the solute, the liquid\u2013solid interface must migrate to ensure mass balance. Migration of the interface can be expressed using the following equation:  (10)  (   C   L   0   \u2212   C   S   0   )   V   n   = \u2212   D   L     \u2202   C   L     \u2202   n   \u2192     +   D   S     \u2202   C   S     \u2202   n   \u2192       where V  n is the normal velocity of the interface, C  L  0 is the liquidus concentration, C  S  0 is the solidus concentration at the bonding temperature and ( \u2202 / \u2202   n   \u2192   ) is the directional normal to the interface. The conditions at the interface \u0393 ( t ) include two DBCs for each side of the interface such that C ( \u0393 , t ) =   C   S   0   for x \u2208   \u03a9   S   and C ( \u0393 , t ) =   C   L   0   for x \u2208   \u03a9   L   .  To solve Eq. (10) we must compute the equilibrium solute concentrations C  L  0 and C  S  0 at the curved interface. For isothermal phase change this is expressed as [48\u201350]   (11)    C   p   0   =   C   p   f   {  1 +   \u03ba   E   s     V   at     (   C   L   f   \u2212   C   S   f   ) RT    }   where subscript p=L for liquid and p=S for solid. C  p   f is the equilibrium solute concentration for a flat interface often determined from the equilibrium phase diagram, E  s is the interfacial energy, V  at is the atomic volume, R is the universal gas constant, T is the isothermal bonding temperature, and \u03ba is the interfacial curvature.  The normal vector to the interface can be calculated from the LSF such that  (12)    n   \u2192   =     \u2207   \u2192   \u03a6   \u2016    \u2207   \u2192   \u03a6  \u2016        The local curvature at the interface can also be calculated from the LSF such that  (13)  \u03ba =   \u2207   \u2192   \u00b7     \u2207   \u2192   \u03a6   \u2016    \u2207   \u2192   \u03a6  \u2016        In the absence of convection, propagation of the liquid\u2013solid interfaces is implicitly handled by evolving the LSF through time using  (14)    \u2202 \u03a6   \u2202 t   +   V   n   ext   \u2016    \u2207   \u2192   \u03a6  \u2016 = 0   where the speed function V  n   ext is the extended velocity of the interface within the level set solution domain such that  (15)    V   n   ext   =   V   n    at  \u03a6 = 0      Consider an interface implicitly defined as the zero iso-contour of a SDF, \u03a6 , arbitrarily intersecting unstructured finite elements. If the sign of \u03a6 is different at any two nodes of an elements edge, then the interface must intersect that edge. It is trivial to obtain the intersection points between the interface and the element edge as shown in Fig. 2 by  (16)    x   n   =   \u03a6 (   x   2   )   x   1   \u2212 \u03a6 (   x   1   )   x   2     \u03a6 (   x   2   ) \u2212 \u03a6 (   x   1   )     where   x   1   and   x   2   are the nodal coordinates of the element edge nodes.  These intersection points between the zero iso-contour of the LSF and the underlying mesh are treated as additional degrees of freedoms where they are appended to the global matrices and serve 5 purposes:  1. Interpolation function construction at the intersected element using meshfree techniques which satisfy both the partition of unity and the Kronecker-delta properties.  Imposition of the DBC at the interface. Since these points already lie at the zero level set at any time during the evolution of the interface, DBC can be applied exactly and easily as in the conventional FEM.  Computation of the local normal and interfacial curvature.  Computation of the local interfacial velocity.  Computation of the extended interfacial velocity.  Consider a sampling point   x   p   at one side of an element intersected by the interface as shown in Fig. 3 . Traditionally, popular methods such as the GFEM/XFEM use the meshfree POU method proposed by Melenk and Babushka [21] for enriching the interpolation functions of the intersected element using the classical XFEM/GFEM equation (2).  Technically however, any meshfree technique which satisfies the partition of unity property can be applied for constructing the interpolation functions at intersected elements. The main requirement is that all support nodes must either belong to the same phase as that of the sampling point or the interface. There also must be sufficient support nodes to construct the interpolants. In the XFEM/GFEM, this is accomplished by the POU method which has the very attractive ability to incorporate pre-determined analytical solutions as part of the enrichment. This significantly facilitates handling of singularities such as those encountered during crack-tip analysis. The meshfree POU method used for computing the approximation functions \u03a8 (   x   j   ) does not immediately satisfy the Kronecker-delta condition which complicates the manner of imposing DBC directly at the interface.  For the purpose of the present work, we choose radial point interpolation using RBF for constructing the interpolation functions for elements intersected by the interface which inherently exhibit the Kronecker delta property in addition to the partition of unity requirement [51\u201353]. Higher order interpolation at the interface can be easily done by incorporating nodes of adjacent elements of the intersected element as support nodes for generating the interpolation functions. As will be seen later, the RBFs will also play a major role in solving the LSF.  An alternative approach for constructing interpolants at the embedded element for the sampling point   x   p   shown in Fig. 3 where two interface nodes   x   4   and   x   5   are added is to construct radial point interpolants using RBF where the solute concentration C (   x   p   ) at point   x   p   can be approximated as  (17)  C (   x   p   ) = H ( \u03a6 (   x   1   ) , \u03a6 (   x   p   ) )   N   1   (   x   p   ) C (   x   1   ) + H ( \u03a6 (   x   2   ) , \u03a6 (   x   p   ) )   N   2   (   x   p   ) C (   x   2   ) + H ( \u03a6 (   x   3   ) , \u03a6 (   x   p   ) )   N   3   (   x   p   ) C (   x   3   ) +   N   4   (   x   p   ) C (   x   4   ) +   N   5   (   x   p   ) C (   x   5   )   where for element node i, H ( \u03a6 (   x   i   ) , \u03a6 (   x   p   ) ) is a Heaviside function dependent on the SDF value \u03a6 (   x   i   ) at that node such that  (18)  H ( \u03a6 (   x   i   ) , \u03a6 (   x   p   ) ) = {     1   if  sign ( \u03a6 (   x   i   ) ) = sign ( \u03a6 (   x   p   ) )     0   if  sign ( \u03a6 (   x   i   ) ) \u2260 sign ( \u03a6 (   x   p   ) )            \u03a6 (   x   p   ) is the SDF value at the sampling point   x   p   . Since the LSF is a continuous function, \u03a6 (   x   p   ) can be easily calculated from  (19)  \u03a6 (   x   p   ) =   \u2211   i = 1   n     N   i   (   x   p   ) \u03a6 (   x   i   )   where   N   i   (   x   p   ) is the standard Lagrange shape functions at the embedded element where n is the total element nodes. C (   x   p   ) can then be re-expressed in a general form as  (20)  C (   x   p   ) =   \u2211   i = 1   n   H ( \u03a6 (   x   i   ) , \u03a6 (   x   p   ) )   N   i   (   x   p   ) C (   x   i   ) +   \u2211   e = 1   m     N   e   (   x   p   ) C (   x   e   )      It is clear that this equation is directly analogous to the classical XFEM/GFEM equation (2) where n is the total number of support nodes at the vicinity of the embedded element, usually nodes of immediately adjacent elements as shown by the green nodes in Fig. 3, and m is the total number of interfacial nodes in the element. The Heaviside function acts as a \u201cswitch\u201d which turns on and off the contribution of the surrounding nodes depending on their location with respect to the sampling point. In other words, only support nodes that belong to the same phase or the interface are used for interpolation. For elements that are un-embedded by the interface, the original Lagrange shape functions of the element are used for interpolation.  If we let N  Lagrange be the interpolation functions constructed using the convectional Lagrange interpolation procedure while N  RBF are the interpolants constructed using RBF, and we impose the requirement that  (21)    \u2211   i = 1   n   H ( \u03a6 (   x   i   ) , \u03a6 (   x   p   ) )   N   i   (   x   p   ) +   \u2211   e = 1   m     N   e   (   x   p   ) = 1   then for an embedded element:  (22)  C (   x   p   ) =   \u2211   i = 1   n   H ( \u03a6 (   x   i   ) , \u03a6 (   x   p   ) )   N   i     (   x   p   )   RBF   C (   x   i   ) +   \u2211   e = 1   m     N   e     (   x   p   )   RBF   C (   x   e   )   while for a non-embedded element, where all the nodes belong to the same phase, implying that H ( \u03a6 (   x   i   ) , \u03a6 (   x   p   ) ) = 1 and total interface nodes m=0. Therefore C (   x   p   ) simply reduces to  (23)  C (   x   p   ) =   \u2211   i = 1   n     N   i     (   x   p   )   Lagrange   C (   x   i   )      A weighted-residual formulation can then be used to derive the weak-form of Eq. (8) such that  (24)    \u222b     \u03a9   embedded     W (    \u2202 C   \u2202 t   \u2212   \u2207   \u2192   \u00b7 ( D   \u2207   \u2192   C )  ) d   \u03a9   embedded    +   \u222b     \u03a9   non - embedded     W (    \u2202 C   \u2202 t   \u2212   \u2207   \u2192   \u00b7 ( D   \u2207   \u2192   C )  ) d   \u03a9   non - embedded   = 0   where W is a weight function, taken here as simply the constructed interpolation functions, \u03a9  embedded is the set of liquid\u2013solid interface-embedded elements, and \u03a9  non-embedded is the set of elements not intersected by the liquid\u2013solid interface. This yields a system of equations that can be expressed in matrix form as  (25)  [ M ]   { C }   \u0307   + [ K ] { C } = { F }   where   { C }   \u0307   is the partial derivative of { C } with respect to time, [ M ] and [ K ] are the global mass and stiffness matrices, respectively, each of size ( n + m ) ( n + m ) , and { F } is the global force matrix with size of n + m where the set of interface nodes {    x   m    } are appended to the set of original mesh nodes {    x   n    } such that  (26)  [ K ] =   [ K ]   non - embedded   +   [ K ]   embedded        (27)  [ M ] =   [ M ]   non - embedded   +   [ M ]   embedded        (28)  { F } =   { F }   non - embedded   +   { F }   embedded     Obviously   [ K ]   embedded   ,   [ M ]   embedded   and   { F }   embedded   occupy zeros everywhere except at the interface nodes and their supports. Similarly,   [ K ]   non - embedded   ,   [ M ]   non - embedded   and   { F }   non - embedded   occupy zeros everywhere at the indices corresponding to the interface nodes.  The presented hybrid meshfree-finite element approach has a number of advantages in comparison to purely meshfree methods. Generally, pure meshfree methods are often time consuming due to:  1. Lack of nodal connectivity information.  The construction of interpolation functions.  In the proposed work, the first problem is non-existent since the nodal connectivity is already defined from the finite element mesh and can be utilized to generate the set of support nodes. The impact of the second problem is significantly reduced since meshfree construction of interpolants is only done at the interface-embedded elements. Additional computational savings are obtained since no special methods are needed to impose the DBC at the interfaces. To construct the meshfree interpolants, N  RBF , at the interface-embedded elements, RBFs are employed as discussed next.  Combining radial and polynomial basis functions has been used in the meshfree point interpolation method to overcome singularity issues in meshfree methods based solely on polynomial basis [53]. Since it is an inherently meshfree method, the support nodes inside the domain can be arbitrarily distributed and are not limited to the element nodes only. In addition, the resulting interpolants satisfy both the POU and the Kronecker-delta properties allowing for straightforward imposition of the boundary conditions.  To construct the RBF, the Euclidean distance r between a sampling point   x   p   and a node   x   i   is computed such that  (29)  r = \u2016    x   p   \u2212   x   i    \u2016   Common functions include inverse multiquadrics, Gaussian exponential, Thin-plate spline and Logarithmic RBF [42\u201344]. In the present work, the following Gaussian exponential is used:  (30)    R   i   (   x   p   ) = exp (  \u2212 \u03b3   (      r   i       d   c      )   2    )   where d  c is the size of the support domain, \u03b3 is a shape parameter that is often problem dependent. Notice that an attractive property of this function is that regardless of the order of differentiation, it is continuously differentiable. The effect of \u03b3 on the shape of the Gaussian exponential weight functions is shown in Fig. 4 . As can be seen, a smaller shape parameter yields a wider, or flatter, weight function which will therefore alter the constructed RBF interpolant. It has been reported in the literature that the optimum shape parameter for Gaussian exponential basis yielding best accuracy is in the range of \u03b3 = 0.003\u20130.03 [54].  For our sampling point   x   p   discussed in the previous section, the solute concentration can also be approximated by RBF such that [42\u201344]   (31)  C (   x   p   ) =   \u2211   i = 1   s     R   i   (   x   p   )   a   i   +   \u2211   j = 1   q     P   j   (   x   p   )   b   j   = [ R (   x   p   )  P (   x   p   ) ] [     a     b     ]   where   R   i   (   x   p   ) is a RBF evaluated at the sampling point   x   p   = ( x , y , z ) ,   P   j   (   x   p   ) is a monomial evaluated at   x   p   . s is the total number of support nodes, q is the number of polynomial basis functions. a  i and b  j are unknowns to be determined. For a given point   x   p   with a given s support nodes where s = m + n :  (32)    [ R (   x   p   ) ]   T   = [    R   1   (   x   p   ) ,   R   2   (   x   p   ) ,   R   3   (   x   p   ) , \u2026 ,   R   s   (   x   p   )  ]      (33)  [ a ] =   [    a   1   ,   a   2   ,   a   3   , \u2026 ,   a   s    ]   T     and for a given q polynomial basis function:  (34)    [  P (   x   p   )  ]   T   = [    P   1   ,   P   2   ,   P   3   , \u2026 ,   P   q    ]   for a second order polynomial basis function:  (35)    [  P (   x   p   )  ]   T   = [  1 ,   x   p   ,   y   p   ,   z   p   ,   x   p   2   ,   y   p   2   ,   z   p   2   ,   x   p     y   p   ,   x   p     z   p   ,   y   p     z   p    ]      (36)  [ b ] =   [    b   1   ,   b   2   ,   b   3   , \u2026 ,   b   q    ]   T     To satisfy Eq. (31) at all support nodes, we express it in matrix form:  (37)  [    C   Q    ] = [   R   Q      P   Q   ] [     a     b     ]   where  (38)  [    C   Q    ] =   [  C (   x   1   ) , C (   x   2   ) , C (   x   3   ) , \u2026 , C (   x   s   )  ]   T     and [   R   Q   ] is an s\u00d7s matrix:  (39)  [   R   Q   ] = [       R   1   (   x   1   )     R   2   (   x   1   )     R   3   (   x   1   )   \u2026     R   s   (   x   1   )       R   1   (   x   2   )     R   2   (   x   2   )     R   3   (   x   2   )   \u2026     R   s   (   x   2   )       R   1   (   x   3   )     R   2   (   x   3   )     R   3   (   x   3   )   \u2026     R   s   (   x   3   )     .   .   .   \u2026   .     .   .   .   \u2026   .     .   .   .   \u2026   .       R   1   (   x   s   )     R   2   (   x   s   )     R   3   (   x   s   )   \u2026     R   s   (   x   s   )     ]   and [   P   Q   ] is an s \u00d7 q matrix:  (40)  [   P   Q   ] = [       P   1   (   x   1   )     P   2   (   x   1   )     P   3   (   x   1   )   \u2026     P   q   (   x   1   )       P   1   (   x   2   )     P   2   (   x   2   )     P   3   (   x   2   )   \u2026     P   q   (   x   2   )       P   1   (   x   3   )     P   2   (   x   3   )     P   3   (   x   3   )   \u2026     P   q   (   x   3   )     .   .   .   \u2026   .     .   .   .   \u2026   .     .   .   .   \u2026   .       P   1   (   x   s   )     P   2   (   x   s   )     P   3   (   x   s   )   \u2026     P   q   (   x   s   )     ]   clearly there are s + q unknowns and only s equations. Therefore, we require to impose the constraint:  (41)  [   P   Q   ] [ a ] = 0   which yields  (42)  [    C   Q    ] = [       R   Q       P   Q         P   Q     0     ] [     a     b     ] = [ G ] [     a     b     ]   To determine the unknowns [ a ] and [ b ] we can re-express this equation to be  (43)  [     a     b     ] =   [ G ]   \u2212 1   [   C   Q   ]   which can then be substituted back into Eq. (31) to yield  (44)  C (   x   p   ) = [  R (   x   p   )  P (   x   p   )  ]   [ G ]   \u2212 1   [   C   Q   ] = [   N   RBF   ] [   C   Q   ]   where [   N   RBF   ] are the set of interpolation functions [   N   RBF   ] = [    N   1   ,   N   2   ,   N   3   , \u2026 ,   N   s    ] computed by  (45)  [   N   RBF   ] = [  R (   x   p   )  P (   x   p   )  ]   [ G ]   \u2212 1     First and second order derivatives of the constructed RBF interpolants can be computed by  (46)  [    \u2202   N   RBF     \u2202 u    ] = [    \u2202 R (   x   p   )   \u2202 u      \u2202 P (   x   p   )   \u2202 u    ]   [ G ]   \u2212 1     where \u2202 / \u2202 u is a partial derivative with respect to u = {  x , y , z , xx , yy , zz , xy , xz , yz  } .  Properties of the constructed shape functions have already been discussed in detail in the literature [51\u201353] which include the satisfaction of the partition of unity property:  (47)    \u2211   i = 1   s     N   i     (   x   p   )   RBF   = 1   In addition to the Kronecker delta property:  (48)    N   i     (   x   p   )   RBF   = {     1   for  i = p     0   for  i \u2260 p       and the reproducing property:  (49)    \u2211   i = 1   s   (   N   i     (   x   p   )   RBF   ) x = x      In the previous section we presented the MI-FEM for computing the future solute concentration distribution in the solid and liquid phases by implicit representation of the liquid\u2013solid interface. As the solute diffuses from the liquid to solid, the interface must migrate to ensure local equilibrium. Computing the interfacial velocity V  n requires solving  (50)    V   n   =   1   (   C   L   0   \u2212   C   S   0   )   (  \u2212   D   L     \u2202   C   L     \u2202   n   \u2192     +   D   S     \u2202   C   S     \u2202   n   \u2192      )      One very attractive feature of the presented MI-FEM is that meshfree nodes directly corresponding to the interface is readily available and are automatically generated as the LSF evolves. Knowing that the normal vector is defined by   \u2207   \u2192   \u03a6 / \u2016    \u2207   \u2192   \u03a6  \u2016 and using the RBF interpolants already computed, we can construct liquid and solid points normal to the interface node as shown in Fig. 5 such that  (51)    x   liquid   =   x   interface   + \u03b4     \u2207   \u2192   \u03a6   \u2016    \u2207   \u2192   \u03a6  \u2016        (52)    x   solid   =   x   interface   \u2212 \u03b4     \u2207   \u2192   \u03a6   \u2016    \u2207   \u2192   \u03a6  \u2016     where \u03b4 is a normal distance to the interface node taken in this work to be 0.3 h where h is the embedded-element length. The concentration at   x   liquid   and   x   solid   can be computed such that  (53)  C (   x   liquid   ) =   \u2211   i = 1     n   liq       N   i   (   x   liquid   ) C (   x   i   )      (54)  C (   x   solid   ) =   \u2211   i = 1     n   sol       N   i   (   x   solid   ) C (   x   i   )   where n  liq and n  sol are the total support nodes in the liquid and solid phases respectively and N  i is the interpolation function corresponding to the support node i. The normal interface velocity can then be computed by  (55)    V   n   =   1   (   C   L   0   \u2212   C   S   0   )   (  \u2212   D   L     C (   x   liquid   ) \u2212   C   L   0     \u03b4   +   D   S     C (   x   solid   ) \u2212   C   S   0     \u03b4    )      This is in agreement with the approach used by Zabaras et al. [35] for computing the interface velocity profile for dendritic growth simulations. While this approach is simple enough for directly computing the gradients on each side of the interface based on the SDF distribution, accumulation of numerical truncation errors may possibly yield a noisy interface velocity profile which may lead to an also noisy interface location. One approach for resolving this issue is to use a non-local smoothing procedure such as that developed by Ji and Dolbow [29] for computing the gradients on each side of the interface. It was shown that the non-local smoothing procedure yielded more accurate results than the direct approach for computing the gradients. For simplification, we will only consider the direct method for computing the interface velocity.  Computing the interface curvature requires the solution of  (56)  \u03ba =   \u2207   \u2192   \u00b7     \u2207   \u2192   \u03a6   \u2016    \u2207   \u2192   \u03a6  \u2016     which is computed by solving  (57)  \u03ba = (   \u03a6   x   2     \u03a6   yy   \u2212 2   \u03a6   x     \u03a6   y     \u03a6   xy   +   \u03a6   y   2     \u03a6   xx   +   \u03a6   x   2     \u03a6   zz   \u2212 2   \u03a6   x     \u03a6   z     \u03a6   xz   +   \u03a6   2     \u03a6   xx   +   \u03a6   y   2     \u03a6   zz   \u2212 2   \u03a6   y     \u03a6   z     \u03a6   yz   +   \u03a6   z   2     \u03a6   yy   ) /   \u2016  \u2207 \u03a6  \u2016   3     where subscripts u = {  x , y , z , xx , xy , xz , \u2026  } are the respective partial derivative \u2202 / \u2202 u . Clearly, solving for curvature using conventional finite elements is troublesome due to the high order derivatives required. However, the presented meshfree interface approach allows us to compute higher order derivatives at the interface nodes with the condition that sufficient support nodes are available. In the present work, we found that using nodes of the embedded element and nodes of immediately adjacent elements are sufficient in computing the second order interpolants. If additional accuracy is required, one can add nodes of immediately neighbouring elements to the adjacent elements. The partial derivative of the LSF value at an interface node can then be approximated as  (58)    \u03a6   u   =   \u2211   i = 1   s     N   u     \u03a6   i     where N  u are the partial derivatives of the interpolation functions with respect to u and s is the set of support nodes.  As mentioned earlier, solution of the LSF using standard Galerkin finite element methods will often yield unstable solutions. In the context of finite differences commonly used for solving the LSF, up-winding and stabilization schemes such as the weighted essentially non-oscillating (WENO) scheme are often used for solution of the LSF [38]. However, finite difference solutions are often constrained to structured grids. An analogous stabilization scheme used in solving the LSF in the context of finite elements is the Galerkin-least squares FEM [35]. Unfortunately, even the use of stabilization schemes does not prevent the deterioration of the LSF from a SDF. This is because the solution of the Hamilton\u2013Jacobi equation shown in Eq. (1) does not itself guarantee a SDF solution. As a result, frequent re-initialization of the LSF is necessary to force the LSF back into a SDF. As mentioned earlier, this re-initialization method results in parasitic interfacial movement that is un-physical and unrelated to the physics of the problem which violates mass and volume conservation laws.  In Section 2.3 we showed how to construct the interpolants N  RBF . We note that these interpolants are dependent on the location of the nodes. Each RBF is radially symmetric around its centre. If we take this centre to be an element node x, then similar to our approach in Section 2.3, one can then express the level set value at x at time t as  (59)  \u03a6 ( x , t ) =   \u2211   i = 1   s   R (   x   i   )   a   i   +   \u2211   j = 1   q     P   j   (   x   p   )   b   j   = [  R (   x   p   )  P (   x   p   )  ] [     a     b     ]   let   \u03b1 ( t ) = [     a     b     ]   and let   \u03a8 ( x ) = [  R (   x   p   )  P (   x   p   )  ]   we also note that the set of RBF, [  R (   x   p   )  ] , and the set of polynomial functions, [  P (   x   p   )  ] , are dependent on space only while the coefficients [ a ] and [ b ] are dependent on time evolution. One can then compute the space\u2013time dependent LSF \u03a6 ( x , t ) as  (60)  \u03a6 ( x , t ) = \u03a8 ( x ) \u03b1 ( t )   the LSF, in the absence of convection, can then be expressed as  (61)    \u2202 \u03a6 ( x , t )   \u2202 t   +   V   n   ext   \u2016    \u2207   \u2192   \u03a6 ( x , t )  \u2016 = \u03a8 ( x )   d \u03b1 ( t )   dt   +   V   n   ext   \u2016    \u2207   \u2192   \u03a8 ( x ) \u03b1 ( t )  \u2016 = 0      It is clear that the original LSF in its PDE form is now transformed into an ODE. This is precisely the equation obtained by Wang et al. [43], Xie et al. [44], and Gelas et al. [55]. However for the purpose of our analysis we would like to re-express this equation in terms of the interpolants similar to those generated in Section 2.3 where we found that for a set of support nodes the interpolants can be expressed as  (62)  [    N   RBF    ] = [  R (   x   p   )  P (   x   p   )  ]   [ G ]   \u2212 1   = \u03a8 ( x )   [ G ]   \u2212 1        (63)  \u03b1 ( t ) = [     a     b     ] =   [ G ]   \u2212 1   [   \u03a6   Q   ]      Using Euler\u05f3s forward differencing for the time derivative, we can re-express Eq. (61) as  (64)  \u03a8 ( x ) \u03b1 ( t + 1 ) = \u03a8 ( x ) \u03b1 ( t ) \u2212 \u0394   tV   n   ext   \u2016    \u2207   \u2192   \u03a8 ( x ) \u03b1 ( t )  \u2016   therefore  (65)  \u03a8 ( x )   [ G ]   \u2212 1     [   \u03a6   Q   ]   t + 1   = \u03a8 ( x )   [ G ]   \u2212 1     [   \u03a6   Q   ]   t   \u2212 \u0394   tV   n   ext   \u2016    \u2207   \u2192   \u03a8 ( x )   [ G ]   \u2212 1     [   \u03a6   Q   ]   t    \u2016   which can be re-expressed as  (66)    [   N   RBF   ]   T     [   \u03a6   Q   ]   t + 1   = [   N   RBF   ]   [   \u03a6   Q   ]   t   \u2212 \u0394   tV   n   ext   \u2016    [   \u2207   \u2192     N   RBF   ]   T     [   \u03a6   Q   ]   t    \u2016   since     [   N   RBF   ]   T     [   \u03a6   Q   ]   t + 1   \u2243 \u03a6 ( x , t + 1 )   and     [   N   RBF   ]   T     [   \u03a6   Q   ]   t   \u2243 \u03a6 ( x , t )   then Eq. (64) can be re-expressed as  (67)  \u03a6 ( x , t + 1 ) = \u03a6 ( x , t ) \u2212 \u0394   tV   n   ext   \u2016    [   \u2207   \u2192     N   RBF   ]   T     [   \u03a6   Q   ]   t    \u2016   in order to maintain \u03a6 ( x , t ) as a SDF, the following conditions must be satisfied:  (68)    \u2202 \u03a6   \u2202 t   =   V   n   ext        (69)  \u2016    \u2207   \u2192   \u03a6  \u2016 = 1      (70)    \u2207   \u2192     V   n   ext   .   \u2207   \u2192   \u03a6 = 0      (71)    V   n   ext     |   ( \u03a6 = 0 )   =   V   n        Li et al. [38] proposed a variational approach where a penalization diffusion term is added to the LSF which forces it to be a SDF such that  (72)    \u2202 \u03a6 ( x , t )   \u2202 t   = \u2212   V   n   ext   \u2016    \u2207   \u2192   \u03a6 ( x , t )  \u2016 +   \u2207   \u2192   \u00b7 ( D ( \u03a6 )   \u2207   \u2192   \u03a6 ( x , t ) )   where D ( \u03a6 ) is a diffusion term expressed as  (73)  D ( \u03a6 ) = 1 \u2212   1   \u2016    \u2207   \u2192   \u03a6  \u2016     if \u2016    \u2207   \u2192   \u03a6  \u2016 > 1 then the diffusion rate D ( \u03a6 ) is positive and the diffusion is forward which decreases \u2016    \u2207   \u2192   \u03a6  \u2016 . Conversely, if \u2016    \u2207   \u2192   \u03a6  \u2016 < 1 then the diffusion rate D ( \u03a6 ) is negative and the diffusion is backward which increases \u2016    \u2207   \u2192   \u03a6  \u2016 . The diffusion term forces \u2016    \u2207   \u2192   \u03a6  \u2016 to 1 to maintain the signed distance property. However, notice that as \u2016    \u2207   \u2192   \u03a6  \u2016 approaches zero, the diffusion term tends to minus infinity which may result in instability at that region. To avoid this, we use a double-well function proposed by Li et al. [38] such that  (74)  p (  \u2016    \u2207   \u2192   \u03a6  \u2016  ) = {        1     ( 2 \u03c0 )   2      ( 1 \u2212 cos ( 2 \u03c0 \u2016    \u2207   \u2192   \u03a6  \u2016 ) )   if  \u2016    \u2207   \u2192   \u03a6  \u2016 \u2264 1        1   2      (  \u2016    \u2207   \u2192   \u03a6  \u2016 \u2212 1  )   2     if  \u2016    \u2207   \u2192   \u03a6  \u2016 \u2265 1          This potential function has two minimum points at \u2016  \u2207 \u03a6  \u2016 = 0 and \u2016  \u2207 \u03a6  \u2016 = 1 . Taking the first derivative of the potential function with respect to \u2016  \u2207 \u03a6  \u2016 yields  (75)  p (  \u2016    \u2207   \u2192   \u03a6  \u2016  ) \u2032 = {        1   2 \u03c0    sin ( 2 \u03c0 \u2016    \u2207   \u2192   \u03a6  \u2016 )   if  \u2016    \u2207   \u2192   \u03a6  \u2016 \u2264 1     \u2016    \u2207   \u2192   \u03a6  \u2016 \u2212 1   if  \u2016    \u2207   \u2192   \u03a6  \u2016 \u2265 1          The diffusion term D ( \u03a6 ) can then be expressed as  (76)  D ( \u03a6 ) =   p (  \u2016    \u2207   \u2192   \u03a6  \u2016  ) \u2032   \u2016    \u2207   \u2192   \u03a6  \u2016   =   p (  \u2016    [   \u2207   \u2192     N   RBF   ]   T     [   \u03a6   Q   ]   t    \u2016  ) \u2032   \u2016    [   \u2207   \u2192     N   RBF   ]   T     [   \u03a6   Q   ]   t    \u2016        The final form of the DRLS function solved using meshfree RBF becomes  (77)    \u03a6   t + 1   =   \u03a6   t   \u2212 \u0394   tV   n   ext   \u2016    [   \u2207   \u2192     N   RBF   ]   T     [   \u03a6   Q   ]   t    \u2016 +   \u2207   \u2192   \u00b7 (  D ( \u03a6 )   \u2207   \u2192   \u03a6  )   in the presence of convection this equation becomes  (78)    \u03a6   t + 1   =   \u03a6   t   \u2212 \u0394   tV   n   ext   \u2016    [   \u2207   \u2192     N   RBF   ]   T     [   \u03a6   Q   ]   t    \u2016 \u2212 \u0394 t     V   \u2192     .   (    [   \u2207   \u2192     N   RBF   ]   T     [   \u03a6   Q   ]   t    ) +   \u2207   \u2192   \u00b7 (  D ( \u03a6 )   \u2207   \u2192   \u03a6  )      Clearly this equation is non-linear where the diffusion term, D ( \u03a6 ) , is dependent on the LSF value \u03a6 . As a result, an iterative solution is required. Our investigations have shown that a converged solution is obtained using a direct iterative method after only a few iterations with a convergence tolerance of about 1E\u221210.  To solve the DRLS function, we still need to determine a velocity function V  n   ext such that Eq. (71) is satisfied. Traditionally, the fast marching procedure is often used for re-initializing the LSF and extending the interfacial velocity. The basic idea is to sweep the front ahead in an upwind fashion by considering a set of points in a narrow band around the existing front and to march this narrow band forwards, locking the values of existing points and bringing new ones into the narrow band. In each iteration, the band node with the smallest value of \u03a6 is to be re-initialized.  The presented MI-FEM makes the process of determining the extended velocity V  n   ext quite simple with no need for fast marching algorithms or book-keeping the set of nodes to be re-initialized. Due to the following properties of the proposed approach:  1. The LSF is forced as a SDF at the vicinity of the interface.  At any time during the evolution of the interface, there is always a set of meshfree nodes that immediately correspond to the interface.  The constructed interpolants at the meshfree interface nodes satisfy the Kronecker-delta property at the interface-embedded elements such that the interfacial velocity in Eq. (71) can be imposed precisely as DBC.  We emphasize that there is no need to solve the DRLS in (77) or the Laplacian equation (79) in all of the domain. Similar to the conventional LSM, only the data at a narrow-band around the interface is needed for computation. In the present work, only nodes within a narrow band of about 6h thick (3h ahead of the interface and 3h behind the interface) were used for computation. This reduces the computational time especially if the size of the interface is significantly smaller than the total size of the computational domain.  So far, our proposed MI-FEM has been presented to predict the liquid\u2013solid interface propagation where the liquid phase is identified as \u03a6 > 0 and the solid phase is identified as \u03a6 < 0 . Consider a case of solidification where simultaneous growth of multiple solid phases each with \u03a6 < 0 occurs. Obviously the crystallographic orientation of the solid phases are rarely ever the same. As a result, during growth of the solid, grain formation occurs where grain boundaries will exist between two grains of different crystallographic orientation. The presented MI-FEM so far can only predict the evolution and location of solid regions but not their crystallographic orientation. One way to enable prediction of the crystal structure using the proposed method is to use a multi-level set approach where multiple level sets are introduced such that each LSF corresponds to some crystallographic orientation defined by a spin index integer S > 0 . However, this approach is rather computationally intensive. In this work we used a single LSF where all the solid phases, regardless of their crystallographic orientation, have a SDF value of \u03a6 < 0 . The MI-FEM is coupled with a meshfree automata (MA) method to predict the crystal structure based on the distribution of the LSF.  A cellular automaton is a dynamical system, in which space, time, and the states of the system are discrete. It was first developed by John Von Neumann in 1963 after a suggestion by Ulam [56] to study universal copiers and destructors. It was later analysed by Wolfram [57] in the 1980s. Cellular automata (CA) methods provide a framework to simultaneously study changes in the entire computational domain. This makes the method very useful in studying microstructural evolution and complex systems. It can also provide fast implementation on parallel computers due to the inherent parallelism of the CA structure. CA methods applied in materials science generally involve discretizing the microstructure into cells where each cell can have a finite number of states such as concentration, temperature, or phase order parameter. The basic idea of CA for phase change studies is to mimic interface propagation by capturing transition from nearby liquid cells to the solid body according to certain criteria, or a \u201crule\u201d, which governs the future state of a cell based on its current state and the states of its neighbouring cells, which can be a Neumann-type or Moore-type, in a square cell lattice. A review of CA modelling of microstructural evolution can be found in [58\u201360].  Coupling of CA and the FEM has been done previously for modelling phase transformation and predicting the microstructure of castings and can be attributed to the excellent works by Gandin and Rappaz [61] and Gandin et al. [62]. In their approach, a secondary \u201cmicro\u201d CA grid is imposed on a \u201cmacro\u201d finite element mesh and a coupling procedure is done where thermal distribution is computed at the finite element mesh, the data is then interpolated onto the CA grid where the CA transformation rule is then applied to evolve the solid fraction of the cell and determine the evolving microstructure. One of the issues of this approach is that there is no link between the CA grid and the finite element mesh. In other words, to interpolate data between the FE mesh and the CA grid, one must first determine which finite element occupies a CA grid cell. Since this information is not readily available, a searching algorithm is required. Clearly, this process would be very time consuming for complex more realistic 3D CAD models of actual components. Another down side to imposing CA grids on finite element meshes is that the structured nature of the CA grids leads to grid anisotropy issues which are well reported in the literature where a review can be found in [63]. It is found that grid orientation may have a significant effect on the CA evolution. Methods to mitigate this issue include random sampling, rotating grids, among others. Another limitation of this approach is that the FE model completely ignores the inter-element discontinuities across the interface which may arbitrarily intersect the finite elements. In other words, the stiffness matrix for an element is simply weighted by the corresponding local solid volume fraction regardless of the orientation of how the interface intersects the element. This is mainly due to the solution of a volumetric enthalpy equation which can only predict the presence of a \u201cmushy zone\u201d at which the interface resides. Additionally, since phase transformation is computed at the automata cell, curvature of the interface must be some how calculated. However, since only the solid fraction is tracked, not the interface itself, curvature can only be roughly approximated using a counting-cell method such as that proposed by Nastac [64].  In the present work, no secondary CA grids imposed on the FE mesh are needed. A meshfree automata (MA) approach where \u201cmicro\u201d meshfree automata points are embedded inside the finite elements of a \u201cmacro\u201d mesh. The transformation of an automaton\u05f3s state is governed by a rule dependent on the DSLS solution determined in the previous section, and on the state of immediately neighbouring automata points.  To clarify, during pre-processing, random MA points are generated inside all elements. All MA points are initially set to a default state of \u201cdead\u201d. It is important to note that these MA points are generated only once during pre-processing and are fixed in space throughout the simulations. Only their binary states change during evolution. The SDF values of the MA points are interpolated from that of the FE mesh nodes such that if a point has \u03a6 > 0 it is assigned a phase parameter of 0 (liquid phase) and it is 1 if \u03a6 < 0 (solid phase). Automata points with a phase parameter of 1 are assigned a spin index representing the crystallographic orientation taken as a random integer > 0 for a solid phase and 0 for a liquid phase.  During a simulation, only automata points within an embedded element and its immediately adjacent elements are set to a state of \u201calive\u201d. Once the future solution of the DRLS has been computed, as shown in Fig. 6 , a liquid MA point (shown as green points) at an initial time t=0 with spin index S=0 and \u03a6 > 0 will have LSF values \u03a6 < 0 at the next time step. To determine the new spin index S of the MA point, we determine its closest MA point with S > 0 and \u03a6 < 0 obtained by computing the Euclidean distance between the transformed MA point and its nearest neighbour MA points which are simply taken as the embedded MA points inside the embedded element and its immediately adjacent elements. The spin index of the transformed point then inherits that of the closest solid MA point. This is summarized in Algorithm 1. Algorithm\u00a01 MA rule to determine the spin index S of a solidified MA point.       for e=1 to TotalEmbeddedElements do      for i=1 to element ( e ) . TotalMAPoints  do      if    S   i   = 0  and    \u03a6   i   < 0  then        Spin = S (  min (  \u2016    x   i   \u2212   {  x  }   neighbours    \u2016  )  )        if  Spin > 0  then          S   i   future   = Spin        else          S   i   future   =   S   i          end if      end if      end for     end for         Our MA approach has a number of attractive advantages:  1. No secondary CA grids overlayed on the FE mesh are required to transfer the data between each. We have prior knowledge which element occupies an MA point.  Due to the lack of structure of MA points, grid anisotropy problems often encountered in CA due to structured grids are absent.  Due to the localized implementation of MA inside the interface-embedded elements, searching for the nearest MA points is limited to only the MA points within the interface-embedded element and its adjacent elements only resulting in a more efficient implementation.  However, two obvious questions to successfully implement the MA rule arise:  1. How to efficiently generate random MA points inside elements and not require any searching algorithms to determine which element occupies an MA point.  How to efficiently interpolate the LSF values from the FE mesh nodes to approximate the LSF values at the embedded MA points.  Instead of generating random points arbitrarily in a region inside the domain, we loop over the elements requiring the generation of MA points where, for a 2D case, MA points bounded inside a triangular element can be generated using Algorithm 2. For 3D cases, MA points bounded inside a tetrahedral element can be generated by using Algorithm 3. Algorithm\u00a02 Generating random MA points inside a 2D 3-node triangular element.       for i=1 to TotalMAPoints do         r   1   = random ( 0 , 1 )          r   2   = random ( 0 , 1 )        a =     r   1            b = 1 \u2212     r   2              p   x   = ( 1 \u2212 a )   x   1   +   abx   2   +   ar   2     x   3            p   y   = ( 1 \u2212 a )   y   1   +   aby   2   +   ar   2     y   3            p   z   = ( 1 \u2212 a )   z   1   +   abz   2   +   ar   2     z   3        end for         Generating random MA points inside a 3D 4-node tetrahedral element.       for i=1 to TotalMAPoints do       s = random ( 0 , 1 )        t = random ( 0 , 1 )        u = random ( 0 , 1 )       if  s + t > 1  then       s = 1.0 \u2212 s        t = 1.0 \u2212 t       end if      if  t + u > 1  then      tmp=u       u = 1 \u2212 s \u2212 t        t = 1 \u2212 tmp       end if      if  s + t + u > 1  then      tmp=u       u = s + t + u \u2212 1        s = 1 \u2212 t \u2212 tmp       end if       a = 1 \u2212 s \u2212 t \u2212 u          p   x   =   x   1   a +   x   2   s +   x   3   t +   x   4   u          p   y   =   y   1   a +   y   2   s +   y   3   t +   y   4   u          p   z   =   z   1   a +   z   2   s +   z   3   t +   z   4   u      end for         Clearly, the MA rule, as shown in Algorithm 1, is dependent on the LSF value at the MA point. This can be obtained by interpolating the LSF values of the vertices of the bounding element. We use Shepard\u05f3s interpolation such that  (80)  \u03a6 ( p ) =     \u2211   i   n     w   i   \u03a6 (   x   i   )     \u2211   i   n     w   i       where w  i is  (81)    w   i   =   1     \u2016  p \u2212   x   i    \u2016   \u03b3       and p is the location of MA point,   x   i   is node i of the bounding element, n is the total number of element nodes, and \u03b3 = 1 . Note that any meshfree interpolation method, such as RBF, can be used to approximate the LSF at the MA point. However we use Shepard\u05f3s method mainly due to its simplicity and due to the fact that no derivatives of interpolants are required.  The presented MI-FEM provides an alternative approach for handling dynamic implicit geometries during phase transformation analysis. In this work, we will only consider the case of solutal melting and solidification where a strong discontinuity with a sharp drop in solute concentration occurs at the interface and DBCs must be satisfied precisely on each side of the interface.  For simplification, analysis of solutal phase transformation is done under the following assumptions:  1. Diffusivity of the solute is assumed constant in both the solid and the liquid.  Diffusivity of the solute is isotropic.  Melt convection is not present.  To solve the problem, for a given fixed unstructured or structured mesh where a SDF which implicitly defines the liquid\u2013solid interface has been generated the following computational algorithm is implemented:  1. Compute the set of intersection points between the zero level set and the underlying mesh and append to list of nodes.  Using the distribution of the LSF, compute the global matrices at non-embedded elements using the conventional FEM.  Using the distribution of the LSF, update the global matrices at embedded elements by constructing RBF interpolants using nodes of the embedded elements and nodes of adjacent elements as support nodes.  Solve the system of equations to obtain the future solute distribution in both the solid and liquid.  Using the interface nodes generated in step 1 and the distribution of the LSF, compute interface curvature and velocity.  Extend the interface velocity to sufficient neighbouring nodes.  Evolve the DRLS using RBF interpolation.  Using the final converged solution of the LSF, evolve the MA points at interface-embedded elements to determine the microstructure.  The procedure is then repeated for the next time step. It is clear from the algorithm that the implicit LSF governs the handling of inter-element discontinuities and interfacial evolution.   RESULTS AND DISCUSSION   As mentioned earlier, problems involving arbitrary discontinuities where DBC must be applied at the interfaces often arise in thermal analysis and phase transformation problems. Therefore, in this section we present solutions to benchmark problems involving strong discontinuities where the exact solution is already known. In each case, the exact solution is compared with that obtained using MI-FEM (case A) and the conventional FEM (case B) where interpolants are constructed using Lagrange shape functions. In each case the L 2 norm and the H 1 semi-norm are calculated which are expressed as  (82)    L   2   =     \u222b   \u03a9   \u2016  u \u2212   u   h    \u2016 d \u03a9     \u222b   \u03a9   \u2016  u  \u2016 d \u03a9        (83)    H   1   =     \u222b   \u03a9   \u2016    \u2207   \u2192   u \u2212   \u2207   \u2192     u   h    \u2016 d \u03a9     \u222b   \u03a9   \u2016    \u2207   \u2192   u  \u2016 d \u03a9     where u is the exact solution and u  h is the approximated solution.  Consider a domain with dimensions of 1\u00d71\u00d70.1 consisting of two types of materials, namely material A and material B each has different diffusivities. We would like to find the solution for the following diffusion\u2013generation equation:  (84)  \u2212 K   \u2202   T   2       \u2202   2   y   = 10   where  (85)  K =   K   A   = 2  \u2200 x \u2208 {  x , 0 \u2264 y \u2264 0.5 , z  }      (86)  K =   K   A   = 0.5  \u2200 x \u2208 {  x , 0.5 \u2264 y \u2264 1 , z  }      The boundary conditions are as follows:  (87)  T ( x , y , z ) = 1  \u2200 x \u2208 {  x , y = 0 , z  }      (88)  T ( x , y , z ) = 0.5  \u2200 x \u2208 {  x , y = 0.5 , z  }      (89)  T ( x , y , z ) = 0  \u2200 x \u2208 {  x , y = 1 , z  }   where the second boundary condition at y=0.5 is the A\u2013B interface implicitly represented by the SDF. The exact solution is  (90)  T ( x , y , z ) = \u2212 2.5   y   2   + 0.25 y + 1  \u2200 x \u2208 {  x , 0 < y \u2264 0.5 , z  }      (91)  T ( x , y , z ) = \u2212 10   y   2   + 14 y \u2212 4  \u2200 x \u2208 {  x , 0.5 \u2264 y \u2264 1 , z  }      Using the proposed MI-FEM, at elements embedded by the zero iso-contour of the LSF interface, Gaussian exponential RBF (GE-RBF) was used to construct the interpolation functions. From Eq. (29) it is clear that GE-RBF requires a shape parameter \u03b3. The approximated temperature distribution is solved using the MI-FEM and the L 2 norm is calculated while varying the values of \u03b3 used to calculate the RBF. A plot of L 2 norm is shown in Fig. 7 which indicates that for GE-RBF with \u03b3 = 0.01 yielded the smallest error. This is consistent with the conclusions by Wang and Liu [54] who reported that optimal shape parameter for GE-RBF yielding best accuracy is in the range 0.03\u20130.003.  With this knowledge, we carried out the rest of the simulations in this work for the MI-FEM with a constant shape parameter of \u03b3 = 0.01. Calculations were carried with a decreasing average element size, and a profile of the distribution of T along the Y-axis (Fig. 8 ) shows gradual convergence to the exact solution with decreasing element size and clearly shows that regardless of the average element size, the DBC at y=0.5 was satisfied precisely at T=0.5. This is due to the fact that regardless of underlying mesh, the interface nodes generated by the LSF will always coincide with the interface and as a result, they can be easily used to impose the boundary conditions.  The solution obtained using MI-FEM with GE-RBF was compared with that obtained using the conventional FEM while the average element size is reduced. As shown in Fig. 9 the proposed solution using MI-FEM yielded a smaller error than the conventional FEM especially for relatively larger element sizes (coarser meshes), and the difference between the accuracy of the methods decreased with mesh refinement. This shows that the proposed method can meet and exceed the accuracy obtained by the conventional FEM. To explain this, consider an interface intersecting the elements as shown in Fig. 10 . We plot the surface contour of the computed interpolants for a sampling point x in an embedded element as shown in Fig. 11 . GE-RBF\u05f3s were used where the parameter \u03b3 is varied from 3 to 0.01. As mentioned earlier, for Gaussian exponentials, a smaller shape parameter yields flatter basis functions and as can be seen, the constructed RBF interpolants approach the Lagrange shape functions used in the conventional FEM as \u03b3 decreases. This is consistent with the works by Driscoll and Fornberg [65], Fornberg et al. [66], Larsson and Fornberg [67], and Schaback [68] who studied this behaviour of the multiquadric and Gaussian exponential interpolants.  However, it is well known that the quality of interpolants constructed using Lagrange shape functions are very sensitive to the shape quality of the element. In the classical FEM, as the interface propagates, re-meshing becomes very critical to ensure an accurate solution. Failure to re-mesh to accommodate the location of the interface can result in severely deformed elements, resulting in singular or ill-conditioned matrices which does not guarantee a converged solution. To demonstrate this, consider a simple two dimensional plate with a centre hole and with an initial field variable distribution U=0. An implicitly defined interface arbitrarily intersecting the elements is imposed as shown in Fig. 12 a with a DBC of U=10. Solution to the simple transient diffusion equation was calculated using the proposed MI-FEM as shown in Fig. 12b where it can be seen that the interface BC was satisfied precisely. When the conventional FEM was used, it completely failed in providing a converged solution due to ill-conditioned matrices caused by the severely distorted elements at the interface as shown in Fig. 13 . Our method did not suffer from this since meshfree interpolation is done by utilizing a point cloud at the interface-embedded elements which includes original nodes of the embedded element and nodes of immediately adjacent elements. In the present work, for an evolving interface, if the distance between the interface node and any of the vertices of the intersected element is less than or equal to 1E\u221210, then that node is excluded from the set of support nodes during construction of interpolants at the interface-embedded element. We found that this ensures an accurate solution and maintains a good quality of the constructed interpolants even if the interface gets too close to the vertices of the embedded element.  This shows that the proposed hybrid meshfree-finite element provides great flexibility in not only imposing the DBC easily and precisely at the interface but also provides greater flexibility in selecting the support nodes used for constructing interpolants and in significantly reducing the requirement for re-meshing as the interface propagates across the elements.  These advantages, however, come at the cost of computational time which is higher in comparison with the conventional FEM. This is because the Lagrange shape functions employed in the conventional FEM can be pre-determined and, as a result, are cheaply constructed. In the MI-FEM, we use these Lagrange shape functions only at un-embedded elements away from the interface, however for interface-embedded elements, the interpolants are re-constructed using meshfree RBFs which are often more computationally demanding. However it is important to point out that since the meshfree interpolants are only constructed locally, it is still significantly cheaper than purely meshfree methods. Our investigations of the computational time of the MI-FEM and the meshfree radial point interpolation method (RPIM), which uses RBFs for constructing interpolants everywhere in the domain, showed 62.8% savings in processing time as shown in Fig. 14 . We conclude that the proposed technique provides a sensible middle-road approach between robustness in handling propagating interfaces and computational efficiency.  To investigate a different type of strong discontinuity that is very common in solutal phase transformation, we consider again the same equation (84) with   K   A   = 2 and   K   B   = 0.5 . However, here there is a sudden step in the profile of the field variable across the interface where there is two different DBCs that must be satisfied at each side of the interface. The boundary conditions in the system are defined as follows:  (92)  T ( x , y , z ) = 5  \u2200 x \u2208 {  x , y = 0 , z  }      (93)  T ( x , y , z ) = 3  \u2200 x \u2208 {  x , y = 0.5   |   \u03a6 \u2212   , z  }      (94)  T ( x , y , z ) = 2  \u2200 x \u2208 {  x , y = 0.5   |   \u03a6 +   , z  }      (95)  T ( x , y , z ) = 0  \u2200 x \u2208 {  x , y = 1 , z  }   where the symbols   |   \u03a6 \u2212   and   |   \u03a6 +   represent boundary conditions at the side of the interface where \u03a6 < 0 and \u03a6 > 0 respectively.  The exact solution is  (96)  T ( x , y , z ) = \u2212 2.5   y   2   \u2212 2.75 y + 5  \u2200 x \u2208 {  x , 0 < y \u2264 0.5 , z  }      (97)  T ( x , y , z ) = \u2212 10   y   2   + 11 y \u2212 1  \u2200 x \u2208 {  x , 0.5 < y \u2264 1 , z  }      For a decreasing average element size, h, a profile of the distribution of T along the Y-axis (Fig. 15 ) shows excellent agreement with the exact solution and clearly shows that regardless of the average element size, the DBC at y=0.5 was satisfied precisely on each side of the interface.  It is important to note that in the MI-FEM, imposing the interface DBC on each side of the interface can be done using a single interface node. This reduces the number of interface nodes generated and as a result also reduces the size of global matrices. To demonstrate this, consider a simple 5\u00d75 matrix corresponding to 4 total nodes and 1 interface node. Nodes 1 and 2 are at the domain region with \u03a6 > 0 , nodes 3 and 4 are at the region with \u03a6 < 0 , while node 5 lies at \u03a6 = 0 . The stiffness global matrix and the force matrix are expressed in generic terms as  (98)  K = [       K   11       K   12       K   13       K   14       K   15         K   21       K   22       K   23       K   24       K   25         K   31       K   32       K   33       K   34       K   35         K   41       K   42       K   43       K   44       K   45         K   51       K   52       K   53       K   54       K   55       ]      (99)  F =   [    F   1      F   2      F   3      F   4      F   5    ]   T        To impose a DBC at node 5 such that it is B 1 for the positive side of the interface ( \u03a6 > 0 ) and B 2 for the negative side of the interface ( \u03a6 < 0 ), the following function is introduced:  (100)  B = H ( \u03a6 (   x   i   ) , \u03a6 (   B   1   ) )   B   1   + H ( \u03a6 (   x   i   ) , \u03a6 (   B   2   ) )   B   2     where H ( \u03a6 (   x   i   ) ) is a Heaviside function introduced such that   H ( \u03a6 (   x   i   ) , \u03a6 ( B ) ) = {     1   if  sign ( \u03a6 (   x   i   ) ) = sign ( \u03a6 ( B ) )     0   if  sign ( \u03a6 (   x   i   ) ) \u2260 sign ( \u03a6 ( B ) )       and the following algorithm is applied: Algorithm\u00a04 Imposing different DBC on each side of an interface node.       for (i=1 to TotalNds) do       B = H ( \u03a6 (   x   i   ) , \u03a6 (   B   1   ) )   B   1   + H ( \u03a6 (   x   i   ) , \u03a6 (   B   2   ) )   B   2          F ( i ) = F ( i ) \u2212 K ( InterfaceNdNumber , i ) \u204e B      end for         To solve the system of equations, columns and rows corresponding to the interface node can be deleted since the corresponding field variable is already known. The final matrices become  (101)  K = [       K   11       K   12       K   13       K   14         K   21       K   22       K   23       K   24         K   31       K   32       K   33       K   34         K   41       K   42       K   43       K   44       ]      (102)  F = [       F   1   \u2212   K   15   \u204e   B   1         F   2   \u2212   K   25   \u204e   B   1         F   3   \u2212   K   35   \u204e   B   2         F   4   \u2212   K   45   \u204e   B   2       ]   which is exactly the same matrices that would be generated if two overlapping interface nodes, each corresponding to a DBC on an interface side, were generated. However, our approach is simpler and more efficient in handling larger systems.  In this section we investigate the LSF solutions obtained using the MI-FEM where the interface velocity is chosen such that it mimics growth of side branches. The interfacial velocity can be expressed as  (103)    V   n   = 0.1 cos (  a (    tan   \u2212 1   (    y   x    )  )  )      This interfacial velocity profile results in a four-fold branch growth if a=4 and six-fold branch growth if a=6. For an initial SDF of  (104)  \u03a6 ( x , y ) =   x   2   +   y   2   \u2212   ( 0.25 )   2     The MI-FEM is used where the interfacial velocity expressed by Eq. (103) is used as DBC at the interface nodes, the solution of the Laplace equation (79) is then computed to obtain the extended velocity V  n   ext . We then solved the DRLS equation (77) (case A) where no re-initialization was done, and compared the solution to that obtained using the conventional LS equation (1) (case B) with re-initialization done every 10 time steps, for a total of 5 virtual re-initialization steps. For the conventional LS solution, a first order essentially non-oscillating (ENO) finite differencing scheme was used. A comparison between the final interfacial topology obtained after 200 time steps for both the 4 branch and 6 branch growth using the MI-FEM and the conventional LSM is shown in Fig. 16 where excellent agreement is observed. However, note that the conventional LS solution resulted in a slightly flatter interface at the branch tips. We attribute this to the frequency of re-initialization which has already been discussed in the literature [31,41] reporting that re-initialization tends to un-physically move the interface and over re-initialization tends to over-smooth the interface.  To investigate this further, consider a purely convective case where a velocity field is imposed in the x and y directions, respectively:  (105)    V   x   = 10 ( 1 \u2212 cos ( c \u03c0 x ) )   ( 1 \u2212 x )   2   ( c \u03c0 sin ( c \u03c0 y )   ( 1 \u2212 y )   2   \u2212 ( 1 \u2212 cos ( c \u03c0 y ) ) 2 ( 1 \u2212 y ) )      (106)    V   y   = \u2212 10 ( 1 \u2212 cos ( c \u03c0 y ) )   ( 1 \u2212 y )   2   ( c \u03c0 sin ( c \u03c0 x )   ( 1 \u2212 x )   2   \u2212 ( 1 \u2212 cos ( c \u03c0 x ) ) 2 ( 1 \u2212 x ) )   with c=0.45. We initialize an implicitly defined circle such that  (107)  \u03a6 ( x , y ) =   ( x \u2212 0.5 )   2   +   ( y \u2212 0.25 )   2   \u2212   ( 0.125 )   2     which is advected in the domain by the pre-determined velocity fields in Eqs. (105) and (106). We used a fixed structured 70\u00d770 grid then solved the DRLS equation (78), with   V   n   ext   = 0 , using the MI-FEM where RBF interpolants are constructed at the interface-embedded elements. We compared the solution to that obtained using the conventional LS equation (1) solved as before by first order ENO differencing scheme with re-initialization done every 10 times for a total of 5 virtual re-initialization steps. Evolution of the interface for the first 300 time steps is shown in Fig. 17 where we again notice that the conventional LSM tends to overly smooth out sharply curved regions of the evolving interface. This is very apparent after the 200 and 300 time steps where we notice excessive smoothing of the trailing edge of the interface. It is clearly difficult to determine the optimum re-initialization frequency which ensures a LS solution that is a SDF while eliminating the un-physical movement and over smoothing of the interface.  The proposed MI-FEM did not suffer from this shortcoming since the whole process of re-initialization is completely eliminated. For the purposes of quantifying conservation of volume, we convert the SDF for the circle in Eq. (107) to a smooth step function using  (108)  \u039b ( x , y ) = 1 \u2212 0.5 (  1 +   tanh ( \u03a6 ( x , y )   \u03b1    )   where \u03b1 is a parameter that smooths the transition between 0 (outside of circle) and 1 (inside of circle) taken here as \u03b1 = 0.01 . The interface is now the 0.5 level set of \u039b ( x , y ) . If we take the total volume fraction at t=0 as the true exact volume to be conserved and since this is a purely convective problem where no volume/mass is created or lost, then total volume must be conserved regardless of the severity of interface deformation. From this, we can express an error estimate for volume conservation as  (109)  \u03f5 =   |  (    \u2211   i = 1   n     \u039b   i   ( t = 0 )  ) \u2212 (    \u2211   i = 1   n     \u039b   i   ( t )  )  |     \u2211   i = 1   n     \u039b   i   ( t = 0 )     where n is the total number of nodes. The accumulated volume loss obtained by both methods is shown in Fig. 18 where we see that the MI-FEM results in a significantly more conservative solution than the conventional FDM. The most notable accumulated volume loss obtained using the MI-FEM was only observed after 400 time steps. Although, it is important to note that this was not due to the formulation of MI-FEM but rather to the fact that at this time, the trailing edge of the interface became so thin to be captured by the larger finite element such that some volume loss was rather inevitable. One obvious way to mitigate this issue is to adaptively refine the mesh at the interfacial region.  The MI-FEM can be directly applied to 3D geometry as shown in Fig. 19 for a relatively more complex initial geometry with an internal cavity. For a growth condition with a normal velocity of 0.1, a stable growing implicit dynamic geometry can be easily obtained. For a dissolving condition with a normal velocity of \u22120.1, a stable dissolution of the geometry where breakup and splitting of the interfaces can be easily handled (Fig. 20 ).  Traditionally in the LSM, curvature is computed by solving Eq. (57) using a central finite difference method (FDM) [38] where the curvature, \u03ba, is computed at every grid point, or at least at enough grid points around the interface. Obviously, the obtained curvature solution does not correspond directly to the zero level set (the interface). To determine the curvature at the interface itself, an additional step is needed where one would generate a point at the interface and then linearly interpolate between the computed curvature at the nearest grid points.  In the MI-FEM, this is not necessary since we can utilize the already-generated meshfree interface nodes for directly computing the curvature at the interface itself and not at the embedded element nodes. The already computed meshfree interpolants and their derivatives at the interface nodes used for solving the DRLS equation can also be used for computing the curvature using Eq. (57).  To demonstrate the accuracy of our approach we consider again a simple circle with radius R=0.25 implicitly defined by  (110)  \u03a6 ( x , y ) =   x   2   +   y   2   \u2212   ( 0.25 )   2     in a computational domain {  \u2212 1 \u2264 x \u2264 1 , \u2212 1 \u2264 y \u2264 1  } . The exact solution of the curvature everywhere on the circle is simply 1 / R = 4 . We use a 2D structured grid and use the computed RBF interpolants at the meshfree interface nodes for computing the curvature and we compare it with that obtained using the conventional FDM. The error of the computed solution is approximated as  (111)  \u03f5 =     \u2211   i = 1   n   \u2016    \u03ba   i   approx   \u2212   \u03ba   i   exact    \u2016     \u2211   i = 1   n   \u2016    \u03ba   i   exact    \u2016     where n is the total interface nodes.  As can be seen in Fig. 21 , our meshfree approach resulted in a significant reduction in error of the approximated curvature than that obtained using conventional central finite differences. This is not surprising, since the set of support nodes used for constructing the RBF interpolants consists of nodes of the embedded element and nodes of immediately adjacent elements. Resulting in a larger number of support nodes than the typical 4 node stencil often used in the central FDM. Additionally, our approach directly computes the curvature at the interface itself in a single step and its meshfree nature allows it to be used independently of the underlying mesh/grid.  In this section we apply the proposed MI-FEM for solving solutal phase transformation in Ni\u2013B binary system. Material properties used in the simulations are listed in Fig. 22 . Multiple spherical solid phases of varying sizes are randomly distributed and immersed in liquid as shown in Fig. 23 a. For a case where the solid particles are free of the boron solute while the liquid phase has an initially high concentration of 17at%, gradual melting of the solid phases occur. Note the ability of the proposed method in easy handling of interfacial splitting and breakup as the melting process progresses (Fig. 23b\u2013d). For cases where solutal melting is absent and only growth of the solid is involved, 3D simulations were done for initially spherical randomly distributed phases and the proposed MA is used for predicting the microstructural evolution. Gradual crystal growth is predicted yielding a grain structure evolution as that shown in Fig. 24 . The final predicted microstructure for a different number of initial solid particles is shown in Fig. 25 where we can see that a larger average grain size is to be expected for smaller number of initial solid phases. We plotted the effect of initial number of solid phases on the time required to achieve complete isothermal solidification in Fig. 26 where it can be observed that as the number of solid phases is increased, the time required to completely solidify the liquid region decreases.  In industrial applications based on isothermal phase transformation kinetics such as transient liquid phase bonding of poly-crystals and single crystals, an additive solid powder mixture is often added to the liquated region to reduce the total time required to achieve complete isothermal solidification [3,5]. It is essential to ensure complete melting of these additive powder particles to avoid formation of stray grains and their detrimental effects on the mechanical properties of the joint. The presented results indicate that in the absence of melting of additive powder particles, stray grains will be predicted to form at the joint. The microstructure is dependent on the size of the solid particles and the density of their distribution within the joint.   CONCLUSIONS   In this paper we have presented the meshfree interface-finite element method (MI-FEM) as a hybrid meshfree/finite element approach tailored specifically for handling phase transformation problems in 2D and 3D. The theoretical foundation of the MI-FEM has been presented where its main characteristics can be summarized as follows:  1. Representation of solid phases immersed in liquid as dynamic implicit geometries using level set signed distance functions.  Tracking of interfaces using distance-regularized level sets which eliminates the requirement to re-initialize the level set solution.  Automatic generation of meshfree interface nodes based on the distribution of the signed distance function.  Construction of interpolants at interface-embedded elements using meshfree methods which satisfy the Kronecker-delta and partition of unity properties.  Ability to impose the essential boundary conditions on the interfaces directly and precisely without any additional numerical procedures or treatments.  Based on the level set solution, meshfree automata is used for predicting the crystallographic microstructure during phase transformation.  The method has been applied in sharp-interface modelling of isothermal solutal melting and solidification in a binary system where it is found very suitable for handling phase transformation problems.   REFERENCES", "highlights": "In this paper, numerical modelling of isothermal solutal melting and solidification in binary systems is done using a new meshfree interface-finite element method (MI-FEM) where the implicitly represented liquid\u2013solid interface is allowed to arbitrarily intersect the finite elements. A meshfree radial basis functions (RBFs) method is used for solving a distance-regularized level set (DRLS) equation such that re-initialization is completely eliminated and fast marching algorithms for interfacial velocity extension are not necessary resulting in a more efficient solution with excellent volume conservation. In the proposed method, intersection points between the mesh and the zero level set are used as meshfree nodes such that at the interface-embedded elements interpolants are constructed using meshfree RBFs ensuring both the partition of unity and Kronecker-delta properties are satisfied allowing for precise and easy imposition of Dirichlet boundary conditions (DBCs) on each side of the interface. A coupling of the MI-FEM with a new meshfree automata (MA) method is used to efficiently predict the microstructural evolution during solidification. Benchmark problems with strong discontinuities were solved where very good accuracy was obtained. The solute conservation and interfacial equilibrium equations describing solutal phase transformation in binary systems were solved using the newly developed method. Mathematical formulation and implementation followed by numerical results and analysis will be presented and discussed."}