{"id": "S0168874X14000043", "article": "MAIN-TITLE Generalized shell heat transfer element for modeling the thermal response of non-uniformly heated structures   HIGHLIGHTS          Formulation of a heat transfer element for non-uniformly heated shells.      Layered formulation based on finite element and control volume techniques.      Proposed element maximizes accuracy and computational efficiency.      Demonstrated improvement over conventional continuum finite elements.          KEYPHRASES   Heat transfer  Finite element method  Plates  Shells  Non-uniform heating  Fire   Macro finite elements (e.g., frame elements, shell elements, and component models) are widely used in computational mechanics to efficiently simulate structural response under various types of loading conditions. Macro elements utilize simplifying assumptions about the underlying physics to reduce the number of degrees of freedom in the model. For example, the Euler\u2013Bernoulli hypothesis that plane sections remain plane during bending allows the behavior of a beam to be modeled by a line element with translational and rotational degrees of freedom at the element\u05f3s ends. Due to the considerable reduction in degrees of freedom (i.e., in comparison to continuum models), macro elements allow the response of complex, large-scale structural systems to be studied in ways that would not be possible with continuum models due to excessive computational expense.  Despite the widespread use of macro elements in structural mechanics, limited research has sought to formulate macro finite elements for other field problems. Semi-analytical methods have been applied to efficiently calculate heat transfer in solids but these techniques lack generality. Surana and others [1\u20135] proposed a hierarchical p-version formulation to simulate the heat transfer in laminated shells. In the p-version formulation, the temperature field is interpolated from nodal values in the three coordinate directions. Continuity conditions are imposed at the interlaminar boundaries, allowing the temperature through the thickness of the shell to be approximated by a piecewise function. The lowest degree of polynomial that can be represented in the p-version formulation is linear, which requires a minimum of two nodes for each layer.  Jeffers [6] proposed an alternative formulation for a layered plate heat transfer element that was based on a combination of finite element and control volume approaches. As shown in Fig. 1, the layer temperature varied in plane according to the 2D shape functions, while the layers were treated as lumped masses in the transverse direction. To satisfy the principle of energy conservation, heat transfer in the transverse direction was simulated via a finite difference calculation. Verification exercises demonstrated that the element exhibited excellent accuracy with minimal computational expense, making the element an attractive alternative to 3D continuum elements.  The finite element-control volume approach for heat transfer analysis [6\u20138] has an added benefit of providing compatibility between the heat transfer model and distributed plasticity elements that are used in structural mechanics. The compatibility arises from the fact that there is a one-to-one mapping between the temperature degrees of freedom in the heat transfer element and the integration points in the structural element (i.e., for the calculation of thermal stresses/strains and the application of temperature-dependent constitutive relationships). The seamless transfer of data from the thermal analysis to the structural analysis prevents excessive calculations that would otherwise be needed to interpolate and/or discard temperature data.  In the present paper, the formulation by Jeffers [6] is extended to allow for shells of curved geometries, as illustrated in Fig. 2. The finite element-control volume approach is maintained in the present formulation. However, the element geometry is expressed in natural coordinates \u03be, \u03b7, and \u03b6 rather than in Cartesian coordinates x, y, and z. Thus, a geometric transformation is introduced in the formulation to transform the element from \u03be\u03b7\u03b6 coordinates to xyz coordinates. The generalized formulation is presented in Section 2, and a verification study is performed in Section 3.  The generalized shell heat transfer element (shown in Fig. 2) is discretized into n layers. It is assumed that the thickness of the shell is relatively small in comparison to the other dimensions (e.g., that its mechanical behavior can be described by shell bending theory). Because the thickness is small in comparison to the other dimensions, the temperature gradients produced by non-uniform heating on the surface of the shell are more pronounced over the thickness of the element than in other directions. Therefore, an optimal solution to the 3D heat transfer equations requires a large number of degrees of freedom over the thickness and fewer degrees of freedom to describe the in-plane behavior.  In the present formulation, the mixed finite element-control volume method proposed in [6\u20138] is used. The temperatures for each layer in the \u03be\u2013\u03b7 plane are interpolated from the nodal temperature using 2D shape functions, while the layer temperatures in the \u03b6-direction are modeled as lumped masses. Governing equations in global xyz coordinates are transformed to the natural \u03be\u03b7\u03b6 coordinates based on a geometric relationship between the global and natural coordinates.  The degrees of freedom for the element consist of the layer temperatures at each node. For an element with n layers, the element has n temperature degrees of freedom at each node. If the element has m nodes, the element has a total of n m temperature degrees of freedom. Temperatures in the \u03be\u2013\u03b7 plane may be interpolated as linear or quadratic. The present formulation considers a base geometry that is quadrilateral. However, the formulation can be extended to triangular elements.  The element\u05f3s geometry is defined in terms of the nodal coordinates (x  j , y  j , z  j ) at the mid-surface of the shell, the thickness t  j , and the thickness-direction vector   n   j   for each node j. Shown in Fig. 3, the thickness-direction vector   n   j   is dependent on the direction cosines l  j , m  j , and n  j of the line that is normal to the mid-surface, i.e., [9]   (1)    n   j   =   t   j    {        l   j           m   j           n   j        }    If points 1 and 2 along the normal vector have coordinates (x 1j, y 1j , z 1j ) and (x 2j, y 2j , z 2j ), respectively, the direction cosines are calculated by  (2)   {        l   j           m   j           n   j        }  =  1    t   j      {        x   1 j   \u2212   x   2 j           y   1 j   \u2212   y   2 j           z   1 j   \u2212   z   2 j        }    Note that the midsurface coordinates are the average of the coordinates of points 1 and 2 at the top and bottom surfaces of the plate, i.e.,  (3)    x   j   = (   x   1 j   \u2212   x   2 j   ) / 2   y   j   = (   y   1 j   \u2212   y   2 j   ) / 2   z   j   = (   z   1 j   \u2212   z   2 j   ) / 2      Because the element geometry is described in this manner, the shape functions N  j are dependent on \u03be and \u03b7 only (i.e., the shape functions are independent of \u03b6). Thus, the coordinates of an arbitrary point on the element\u05f3s domain are given by  (4)   {     x     y     z     }  =  \u2211  j = 1  m     N   j    {        x   j           y   j           z   j        }   +  \u2211  j = 1  m     N   j   \u03b6     t   j    2   {        l   j           m   j           n   j        }   ,   where j=node number, m=total number of nodes for the element, (x  j, y  j , z  j )=coordinates for node j, N  j =2D shape function in natural coordinates \u03be and \u03b7, \u03b6=natural coordinate ranging from \u22121 to +1 describing the position through the thickness (see Fig. 3), t  j =the thickness of the element at node j, and l  j , m  j , n  j =direction cosines associated with the thickness-direction vector [9].  The Jacobian matrix is used in the transformation between global xyz coordinates and natural \u03be\u03b7\u03b6 coordinates in the element formulation. The Jacobian matrix J for the element is  (5)  J =  [        x   , \u03be         y   , \u03be         z   , \u03be           x   , \u03b7         y   , \u03b7         z   , \u03b7           x   , \u03b6         y   , \u03b6         z   , \u03b6        ]  ,   where the shorthand notation   x   , \u03be   is used to denote differentiation of x with respect to \u03be, i.e.,   x   , \u03be   = d x / d \u03be . Differentiating Eq. (4) results in the following terms in the Jacobian matrix:  (6)    x   , \u03be   =  \u2211  j = 1  m     N   j , \u03be    (    x   j   + \u03b6     t   j    2    l   j    )     x   , \u03b7   =  \u2211  j = 1  m     N   j , \u03b7    (    x   j   + \u03b6     t   j    2    l   j    )     x   , \u03b6   =  \u2211  j = 1  m     N   j       t   j    2    l   j      y   , \u03be   =  \u2211  j = 1  m     N   j , \u03be    (    y   j   + \u03b6     t   j    2    m   j    )     y   , \u03b7   =  \u2211  j = 1  m     N   j , \u03b7    (    y   j   + \u03b6     t   j    2    m   j    )     y   , \u03b6   =  \u2211  j = 1  m     N   j       t   j    2    m   j      z   , \u03be   =  \u2211  j = 1  m     N   j , \u03be    (    z   j   + \u03b6     t   j    2    n   j    )     z   , \u03b7   =  \u2211  j = 1  m     N   j , \u03b7    (    z   j   + \u03b6     t   j    2    n   j    )     z   , \u03b6   =  \u2211  j = 1  m     N   j       t   j    2    n   j         The governing equation for heat transfer analysis in the element is derived by enforcing conservation of energy. For a differential element in 3D space, conduction heat transfer is given by  (7)  \u03c1 C   \u2202 T   \u2202 t   =  \u2202  \u2202 x    (  k   \u2202 T   \u2202 x    )  +  \u2202  \u2202 y    (  k   \u2202 T   \u2202 y    )  +  \u2202  \u2202 z    (  k   \u2202 T   \u2202 z    )  + Q ,   where \u03c1 is mass density, C is specific heat, k is conductivity, T is temperature, t is time, and Q is internal heat generation per unit volume [10]. The weak form of the governing equation, which is needed for the finite element and control volume methods, is obtained by integrating Eq. (7) over the domain. Rather than integrating Eq. (7) over the entire element\u05f3s domain, the element is discretized in layers with V  i denoting the volume of layer i. Therefore, the weak form of the governing equation for layer i is  (8)   \u222b    V   i      [  \u03c1 C   \u2202 T   \u2202 t   \u2212  \u2202  \u2202 x    (  k   \u2202 T   \u2202 x    )  \u2212  \u2202  \u2202 y    (  k   \u2202 T   \u2202 y    )  \u2212  \u2202  \u2202 z    (  k   \u2202 T   \u2202 z    )  \u2212 Q  ]  d   V   i   = 0   Because the thickness of layer i is small, the temperature T is assumed to only vary in the \u03be\u2013\u03b7 plane. Therefore, the temperature is constant in the normal direction (or the \u03b6 direction in natural coordinates). The temperature T (x, y, z, t) in Eq. (8) is replaced by the layer temperature T  i , which is dependent only on \u03be, \u03b7, and t. To satisfy the energy balance, additional terms are added to the governing equation to account for heat transfer from the adjacent layers. The xyz coordinate space is maintained for the time-being. The governing equation becomes  (9)   \u222b    V   i      [  \u03c1 C   \u2202   T   i     \u2202 t   \u2212  \u2202  \u2202 x    (  k   \u2202   T   i     \u2202 x    )  \u2212  \u2202  \u2202 y    (  k   \u2202   T   i     \u2202 y    )  \u2212  \u2202  \u2202 z    (  k   \u2202   T   i     \u2202 z    )  \u2212 Q  ]  d   V   i   +  \u222b    A   i \u2212         (  k   \u2202 T   \u2202 n    )  |   i \u2212   d   A   i \u2212    \u2212  \u222b    A   i +         (  k   \u2202 T   \u2202 n    )  |   i +   d   A   i +    = 0   The first integral in Eq. (9) results from substituting the layer temperature T  i into Eq. (8) while the remaining terms account for the heat flux that enters the bottom and top surfaces of layer i by conduction from the adjacent layers. Symbols i\u2212 and i+ represent the boundaries between layers (i.e., at i\u20131/2 and i+1/2, respectively). Note that conduction heat transfer occurs normal to the element\u05f3s mid-surface. Therefore, temperature gradients are expressed in terms of the normal direction n and the energy flow is integrated over the interface between layers. Areas A  i\u2212 and A  i+ are used to denote the surface area of the interfaces at grid points i\u22121/2 and i+1/2, respectively.  Because the layer temperatures are lumped in the normal direction n, the heat transfer by conduction from the adjacent layers can be approximated as a finite difference, i.e.,  (10)     (  k   \u2202 T   \u2202 n    )  |   i \u2212   =   k   i \u2212    (      T   i   \u2212   T   i \u2212 1       d   i   \u2212   d   i \u2212 1      )  ,     (  k   \u2202 T   \u2202 n    )  |   i +   =   k   i +    (      T   i + 1   \u2212   T   i       d   i + 1   \u2212   d   i      )    where   k   i \u2212   and   k   i +   are effective thermal conductivities at the layer interfaces, which are calculated by averaging the thermal resistances of adjacent layers [11], and d  i is a coordinate in xyz space that corresponds to the normal direction represented by \u03b6 in the dimensionless \u03be\u03b7\u03b6 space. Coordinate d  i is the location at which the layer temperature is lumped in the normal direction. For interior layers, d  i coincides with the mid-surface of the layer. For exterior layers, d  i coincides with the surface of the element to provide greater accuracy in modeling the thermal boundary conditions at the element\u05f3s surface [11]. Eq. (10) is expressed in xyz space, although it will eventually be transformed into \u03be\u03b7\u03b6 space.  Note that Eq. (10) only applies to interior layers for which heat is transferred by conduction from an adjacent layer. For exterior layers, the appropriate boundary conditions must be applied. If a temperature T  s is prescribed on the surface of the element, then  (11)    T   i   =   T   s     and the flux is unknown. If a flux   q   b   \u2033   is prescribed at the surface of the element, then  (12)     (  k   \u2202 T   \u2202 n    )  |   i \u00b1   =   q   b   \u2033     If a convective boundary condition exists at the surface of the element, then  (13)     (  k   \u2202 T   \u2202 n    )  |   i \u00b1   = h (   T   \u221e   \u2212   T   i   ) ,   where h is heat transfer coefficient and   T   \u221e   is fluid temperature. If a radiation boundary condition exists at the surface of the element, then the radiation term can be expressed in the following linearized form [10]:  (14)     (  k   \u2202 T   \u2202 n    )  |   i \u00b1   =   h   r   (   T   s u r   \u2212   T   i   ) ,   where h  r is an effective heat transfer coefficient due to radiation and T  sur is the temperature of the surroundings. The effective heat transfer coefficient is given as  (15)    h   r   = \u03b5 \u03c3 (   T   i   +   T   s u r   ) (    T   i   2  +   T   s u r   2   ) ,   where \u03b5 is emissivity of the surface, and \u03c3 is Stefan\u2013Boltzmann constant.  The layer temperatures T  i are obtained from the nodal temperatures using the interpolation functions N, i.e.,  (16)    T   i   = N   T   i     As described in Section 2.1, the element shape functions N are 2D shape functions that are dependent on \u03be and \u03b7 only. Because the governing equation (i.e., Eq. (9)) is in global xyz coordinates, the finite element method is applied in xyz coordinate space and a geometric transformation is then performed to transform the resulting equation to natural \u03be\u03b7\u03b6 coordinates.  The Galerkin finite element method is applied to Eq. (9) by premultiplying all terms by the transpose of the shape function matrix N. The diffusion terms are expanded using integration by parts, and the resulting boundary term is converted from a volume integral to a surface integral using Gauss\u05f3s theorem [11]. The resulting equation is  (17)   \u222b    V   i      (    N  T  \u03c1 C   \u2202   T   i     \u2202 t   +    N   , x   T  k   \u2202   T   i     \u2202 x   +    N   , y   T  k   \u2202   T   i     \u2202 y   +    N   , z   T  k   \u2202   T   i     \u2202 z   \u2212   N  T  Q  )  d   V   i   \u2212  \u222b S   (    N  T  k   \u2202   T   i     \u2202 n    )   n \u00af  d S +  \u222b    A   i \u2212           N  T   (  k   \u2202 T   \u2202 n    )   |   i \u2212   d   A   i \u2212    \u2212  \u222b    A   i +        N  T     (  k   \u2202 T   \u2202 n    )  |   i +   d   A   i +    = 0   where  [    N   , x    ]  = \u2202 [ N ] / \u2202 x ,  [    N   , y    ]  = \u2202 [ N ] / \u2202 y ,  n \u00af  =unit vector, which is normal to the bounding surface S. Note that the surface S is the remaining part of the layer\u05f3s surface that lies along the edge of the element and was not explicitly accounted for in Eq. (9), as illustrated in Fig. 4. The term k \u2202   T   i   / \u2202 n is the flux that acts normal to the surface S. Thus, for a prescribed flux    q  \u2033   s   , convective condition, or radiation condition, the boundary flux is respectively given by  (18)  k   \u2202   T   i     \u2202 n   =   q   s   \u2033   ,  k   \u2202   T   i     \u2202 n   = h (   T   \u221e   \u2212   T   i   ) , k   \u2202   T   i     \u2202 n   =   h   r   (   T   s u r   \u2212   T   i   )      The finite difference approximations in Eq. (10) are substituted into Eq. (17) for typical interior layers, while the appropriate boundary conditions from Eqs. (11)\u2013(14) are applied to the exterior layers. All three boundary conditions in Eq. (18) are substituted into Eq. (17), although it is acknowledged that all types of boundary conditions may not be present at the same time. The layer temperature T  i from Eq. (16) is also substituted into Eq. (17). For a typical interior layer, Eq. (17) becomes  (19)    \u222b    V   i      (   N  T  \u03c1 C N    T \u0307    i   +   N   , x   T    k   N   , x     T   i   +   N   , y   T    k   N   , y     T   i   +   N   , z   T   k   N   , z     T   i   \u2212   N  T  Q )  d   V   i   +  \u222b    A   i \u2212           N  T   (  k   \u2202 T   \u2202 n    )   |   i \u2212    d   A   i \u2212   \u2212  \u222b    A   i +           N  T   (  k   \u2202 T   \u2202 n    )   |   i +   d   A   i +    \u2212  \u222b S     N  T  (   q   s   \u2033   + h   T   \u221e   +   h   r     T   s u r   )  d S +  \u222b S     N  T  ( h +   h   r   ) N   T   i    d S = 0      Because the shape functions are expressed in \u03be and \u03b7, and numerical integration is more readily carried out in natural coordinates, Eq. (19) is transformed from global xyz coordinates to natural \u03be\u03b7\u03b6 coordinates. The transformation for most terms in Eq. (19) is straightforward and does not require discussion. However, the diffusion terms in Eq. (19), which involve derivatives of shape functions with regards to x, y, and z, requires attention.  Derivatives of the shape function at node j with respect to \u03be, \u03b7, and \u03b6 are related to the derivatives of the shape function with respect to x, y, and z by the Jacobian J, i.e.,  (20)    \u2202   N   j     \u2202 \u03be   =   \u2202   N   j     \u2202 x     \u2202 x   \u2202 \u03be   +   \u2202   N   j     \u2202 y     \u2202 y   \u2202 \u03be   +   \u2202   N   j     \u2202 z     \u2202 z   \u2202 \u03be     \u2202   N   j     \u2202 \u03b7   =   \u2202   N   j     \u2202 x     \u2202 x   \u2202 \u03b7   +   \u2202   N   j     \u2202 y     d y   \u2202 \u03b7   +   \u2202   N   j     \u2202 z     \u2202 z   \u2202 \u03b7     \u2202   N   j     \u2202 \u03b6   =   \u2202   N   j     \u2202 x     \u2202 x   \u2202 \u03b6   +   \u2202   N   j     \u2202 y     \u2202 y   \u2202 \u03b6   +   \u2202   N   j     \u2202 z     \u2202 z   \u2202 \u03b6     or in matrix form  (21)   {        N   j , \u03be           N   j , \u03b7           N   j , \u03b6        }  = J  {        N   j , x           N   j , y           N   j , z        }    The derivatives of the shape function with respect to x, y, and z are obtained by multiplying both sides of Eq. (21) by the inverse of the Jacobian  (22)   {        N   j , x           N   j , y           N   j , z        }  =   J   \u2212 1    {        N   j , \u03be           N   j , \u03b7           N   j , \u03b6        }  = \u0393  {        N   j , \u03be           N   j , \u03b7           N   j , \u03b6        }  ,   where \u0393=J \u22121. All shape functions are independent of \u03b6, and so N  j,\u03b6 =0. Therefore, the derivatives of the shape function with respect to x, y, and z are given by  (23)    N   j , x   =   \u0393   11     N   j , \u03be   +   \u0393   12     N   j , \u03b7     N   j , y   =   \u0393   21     N   j , \u03be   +   \u0393   22     N   j , \u03b7     N   j , z   =   \u0393   31     N   j , \u03be   +   \u0393   32     N   j , \u03b7     Eq. (23) is used for calculating derivatives of the shape functions with respect to x, y, and z in Eq. (19) so that all terms in the governing equation are functions of \u03be, \u03b7, and \u03b6.  In addition, the terms at the boundaries i- and i+ are expressed in natural coordinates as  (24)  k   \u2202 T   \u2202 n   = k   \u2202 T   \u2202 \u03b6     d \u03b6   d n   ,   where d\u03b6/dn=2/t  i and t  i =layer thickness. Therefore, the following expressions are substituted into Eq. (19) in place of Eq. (10):  (25)     (  k   \u2202 T   \u2202 n    )  |   i \u2212   =   k   i \u2212    (      T   i   \u2212   T   i \u2212 1       \u03b6   i   \u2212   \u03b6   i \u2212 1      )   2    t   i     ,     (  k   \u2202 T   \u2202 n    )  |   i +   =   k   i +    (      T   i + 1   \u2212   T   i       \u03b6   i + 1   \u2212   \u03b6   i      )   2    t   i          Lastly, the limits of integration are transformed from xyz space to \u03be\u03b7\u03b6 space. The governing equation becomes  (26)   \u222b  \u2212 1  1    \u222b  \u2212 1  1    \u222b  \u03b6 \u2212   \u03b6 +    (   N  T  \u03c1 C N    T \u0307    i   +   N   , x    T   k   N   , x     T   i   +   N   , y    T   k   N   , y     T   i   +   N   , z    T   k   N   , z     T   i   \u2212   N  T  Q ) J d \u03b6 d \u03be d \u03b7    +  \u222b  \u2212 1  1    \u222b  \u2212 1  1    (    N  T      k   i \u2212       \u03b6   i   \u2212   \u03b6   i \u2212 1      2    t   i     N  )  (   T   i   \u2212   T   i \u2212 1   )     J   i \u2212   d \u03be d \u03b7 \u2212  \u222b  \u2212 1  1    \u222b  \u2212 1  1    (    N  T      k   i +       \u03b6   i + 1   \u2212   \u03b6   i      2    t   i     N  )  (   T   i + 1   \u2212   T   i   )     J   i +   d \u03be d \u03b7 \u2212  \u222b S     N  T  (   q   s   \u2033   + h   T   \u221e   +   h   r     T   s u r   )  d S +  \u222b S     N  T  ( h +   h   r   ) N   T   i    d S = 0 ,   where \u03b6\u2212 and \u03b6+=the natural coordinates corresponding to the bottom and top surfaces of layer i, J=the determinant of the Jacobian matrix in Eq. (5), J  i\u2212=the determinant of the Jacobian evaluated at the bottom surface of the layer (i.e., at \u03b6=\u03b6\u2212), and J  i+=the determinant of the Jacobian evaluated at the top surface of the layer (i.e., at \u03b6=\u03b6+). For the remainder of the paper, it is assumed that the layer thickness t  i is constant, for which the integral from \u03b6\u2212 to \u03b6+ simplifies to layer thickness t  i and the Jacobian J is evaluated only at the depth \u03b6 where the temperature is calculated (i.e., J is no longer a function of \u03b6).  After some manipulation, Eq. (26) can be written in the following simplified form:  (27)    c   i      T \u0307    i   +   k   i     T   i   \u2212 (   k   i \u2212     T   i \u2212 1   +   k   i +     T   i + 1   ) =   r   i   ,   where  (28)    c   i   =  \u222b  \u2212 1  1    \u222b  \u2212 1  1     N  T  \u03c1 C   t   i   N J  d \u03be  d \u03b7        (29)    k   i   =  \u222b  \u2212 1  1    \u222b  \u2212 1  1      N   , x   T  k   t   i     N   , x   J  d \u03be  d \u03b7   +  \u222b  \u2212 1  1    \u222b  \u2212 1  1      N   , y   T  k   t   i     N   , y   J  d \u03be  d \u03b7   +  \u222b  \u2212 1  1    \u222b  \u2212 1  1      N   , z   T  k   t   i     N   , z   J  d \u03be  d \u03b7 +   k   i \u2212   +   k   i +   +   h   i          (30)    k   i \u2212   =  \u222b  \u2212 1  1    \u222b  \u2212 1  1   (    N  T      k   i \u2212       \u03b6   i   \u2212   \u03b6   i \u2212 1      2    t   i     N  )     J   i \u2212    d \u03be  d \u03b7      (31)    k   i +   =  \u222b  \u2212 1  1    \u222b  \u2212 1  1   (    N  T      k   i \u2212       \u03b6   i + 1   \u2212   \u03b6   i      2    t   i     N  )     J   i +    d \u03be  d \u03b7      (32)    h   i   =  \u222b S     N  T  ( h +   h   r   ) N  d S       (33)    r   i   =   r   Q   +   r   q   +   r   h        (34)    r   Q   =  \u222b  \u2212 1  1    \u222b  \u2212 1  1     N  T  Q   t   i   J  d \u03be  d \u03b7        (35)    r   q   =  \u222b S     N  T    q   s   \u2033    d S       (36)    r   h   =  \u222b S     N  T  ( h   T   \u221e   +   h   r     T   s u r   ) d S    In Eqs. (27)\u2013(36), c  i is the heat capacity matrix for layer i; k  i is the conductivity matrix for layer i; k  i\u2212 and k  i+ are the adjacent layer conductivity matrices for layer i; h  i is the convection heat transfer matrix for layer i, which also includes the linearized radiation term; r  i is the vector of thermal loads for layer i, which includes internal heat generation r  Q , prescribed flux r  q , and convection and radiation boundary conditions r  h .  For exterior layers, Eq. (27) is modified to include the appropriate boundary conditions specified in Eqs. (12)\u2013(14). For a prescribed flux, the following term is added to r  i :  (37)    r   q b   =  \u222b  \u2212 1  1    \u222b  \u2212 1  1     N  T    q   b   \u2033   J  d \u03be  d \u03b7     For a convection boundary condition, the following terms are added to k  i and r  i , respectively:  (38)    h   b   =  \u222b  \u2212 1  1    \u222b  \u2212 1  1     N  T  h N J  d \u03be  d \u03b7   ,    r   h b   =  \u222b  \u2212 1  1    \u222b  \u2212 1  1     N  T  h   T   \u221e   J  d \u03be  d \u03b7     For a radiation boundary condition, the following terms are added to k  i and r  i , respectively:  (39)    h   r b   =  \u222b  \u2212 1  1    \u222b  \u2212 1  1     N  T    h   r   N J  d \u03be  d \u03b7   ,    r   h r b   =  \u222b  \u2212 1  1    \u222b  \u2212 1  1     N  T    h   r     T   s u r   J  d \u03be  d \u03b7        The governing equations for the element are obtained by assembling the equations for each layer i, which are given in Eqs. (27)-(39), into the element\u05f3s system of equations, as described by Jeffers [6].  The nine-node quadratic heat transfer element was implemented in Abaqus [12] as a user-defined element to verify the element formulation. The verification involved the heating of a pipe that has an inner radius r  i of 10cm, an outer radius r  o of 15cm, and a length L of 50cm, as shown in Fig. 5. Note that the pipe had a relatively large thickness to simulate an extreme case of geometry that more closely resembles a continuum rather than a shell. The verification problems involved 1D axisymmetric heating ( Fig. 6a), 2D axisymmetric heating (Fig. 6b), 2D symmetric heating (Fig. 6c), and 3D heating (Fig. 6d). In all cases, the pipe had an initial temperature of 0\u00b0C and was heated instantaneously by the prescribed flux given in Fig. 6. Convection boundary conditions were applied on the inner surface and portions of the outer surface of the pipe to simulate extreme cases of non-uniform heating. The edges of the pipe were treated as insulated. The pipe was assumed to be made of steel with density \u03c1=7850kg/m3, conductivity k=54W/m2 K, and specific heat C=465J/kgK.  The problem was modeled using shell elements with an increasingly fine mesh until the solution was found to converge. The mesh configuration for the shell model was defined by the number of elements in the tangential and longitudinal directions of the pipe. A model with a mesh configuration of 8\u00d74 can be seen in Fig. 7a, in which eight elements were specified around the pipe and four elements were specified along length of the pipe. The number of layers was another a mesh parameter considered in the verification study. Comparisons were made between the shell model and a high-fidelity continuum model using linear heat transfer elements in Abaqus. The mesh for the 3D case is shown in Fig. 7b. The shell and continuum models both used fixed incrementation with a time step of 10s. Results from the verification study are given as follows.  The first verification case explored the accuracy of the shell model in capturing 1D heat transfer over the depth for an axisymmetric geometry, as illustrated in Fig. 6a. Four elements were prescribed in the tangential direction, two elements were prescribed along the length, and the number of layers was increased from three to nine. The temperature through the thickness of the shell is shown in Fig. 8 at various times. It can be seen that even a coarse mesh of three layers yielded excellent accuracy in comparison to the converged continuum model. The L 2- (i.e., vector-) norm error was calculated through the thickness to quantitatively evaluate the accuracy of the control volume method. The errors shown in Table 1 illustrate that the accuracy of the solution improves with increasing numbers of layers. With five or more layers, the error is less than 1.5%, demonstrating that the control volume approximation is sufficiently accurate for the curved shell. Note that the error increases slightly (i.e., by a few hundredths of a percent) as the number of layers increases, for example, from seven to nine. It could not be discerned whether the error stemmed from the shell model or the continuum model, but the error was deemed small enough to not be a concern. For the remaining analyses in Sections 3.2\u20133.4, seven layers were specified over the thickness of the shell.  The second verification case explored the accuracy of the shell model in capturing 2D heat transfer for an axisymmetric geometry, as illustrated in Fig. 6b. The number of elements along the length was increased systematically from two to eight. The number of elements in the tangential direction was correspondingly increased from four to sixteen to maintain regular element geometries.  The mid-depth temperature along the length of pipe is plotted in Fig. 9 at various times. It can be seen that the temperature distribution resembled a step function that gradually smoothed out over time. Nodal temperatures are plotted in Fig. 9 for two, four, and eight shell elements along the length. Temperatures between the nodal values were calculated using the quadratic interpolation functions that were specified in the element formulation. It can be seen that the temperatures calculated by the shell model generally agreed well with the converged continuum model. The errors were greatest for the coarse meshes at the earlier times, when the shape of the temperature profile more closely resembled the step function. However, accuracy improved as time progressed and the temperature profile smoothed out. The L 2-norm error was calculated over the length of the pipe at the selected times and shown in Table 2. It can be seen that the model consistently converges to the high-resolution continuum model, with errors less than 2.5% for the mesh involving four elements along the length.  The third verification case explored the accuracy of the shell model in capturing 2D heat transfer across the section, as illustrated in Fig. 6c. The number of elements in the tangential direction was systematically increased from four to sixteen. The number of elements along the length was correspondingly increased from two to eight to maintain regular element geometries.  The mid-depth temperature at various times is plotted in Fig. 10 for a tangential path s from the bottom of the pipe to the top of the pipe, as illustrated in Fig. 6c. The temperature rose steeply along the path at earlier times. However, the temperature profile smoothed out as time progressed, as was the case in the 2D axisymmetric example. Nodal temperatures are plotted in Fig. 10 for four, eight, and sixteen shell elements in the tangential direction. Temperatures between the nodes were calculated using the quadratic interpolation functions that were specified in the element formulation. It can be seen that the temperatures calculated by the shell model generally agreed well with the converged continuum model, with errors greatest at earlier times. The L 2-norm error was calculated over the tangential path at the selected times and shown in Table 3. It can be seen that the model consistently converges to the high-resolution continuum model, with errors less than 2.5% for the mesh involving eight elements in the tangential direction.  The final verification case explored the accuracy of the shell model in simulating 3D heat transfer, as illustrated in Fig. 6d. Four meshes were considered in the shell model: 4\u00d72, 8\u00d74, and 16\u00d78. Once the temperatures were calculated, the pipe geometry was cut through the thickness (A\u2013A in Fig. 11a) and along the length (B\u2013B in Fig. 11a) and unfolded (Fig. 11b) so that the temperature field could be depicted as 2D contour plot. The temperature field over the mid-surface of the plate is shown in Fig. 12 for the various meshes. It can be seen that the solution converged as the mesh was refined. The L 2-norm error between the shell model and the continuum model was calculated for the entire mid-surface of the pipe, which can be seen in Table 4. The shell model consistently converged to the solution obtained from the continuum model, and errors were less than 3% for the relatively coarse 8\u00d74 mesh. To illustrate the locations that had the highest error, the temperature difference between the shell model and the continuum model is shown as a contour plot in Fig. 13 for the various meshes. It can be seen that the error was greatest in the model with the 4\u00d72 mesh and stemmed from the assumption of quadratic temperature field throughout the layer. The error rapidly declined with the 8\u00d74 mesh and was negligible for 16\u00d78 mesh.  To understand the cost savings that can be realized with the use of the shell heat transfer element, the model sizes and simulation times were compared for the shell and continuum models. As illustrated in Table 5, the shell model with the 8\u00d74 mesh required 7.5s to run on a single 2.60GHz processor, whereas the continuum model required 197s (3.3min) of simulation time. The cost savings is due in part to the significant reduction in degrees of freedom that can be achieved with the shell model. Thus, for a fraction of the computational expense, a solution with acceptable accuracy (i.e., within 3%) can be achieved using a relatively coarse mesh of shell heat transfer elements.  A combination of control volume and finite element methods was used to formulate a novel shell heat transfer element that can efficiently model the 3D thermal response of non-uniformly heated structures. The element was formulated in isoparametric coordinates to allow the element to have arbitrary geometry in three-dimensional space. A series of 1D, 2D, and 3D verification problems was considered to examine the convergence to a solution obtained using traditional continuum finite elements. The shell element exhibited excellent accuracy with a small number of layers and elements, which led to a significant reduction in number of temperature degrees of freedom in the model and considerable savings in computational expense. The savings in computational cost will be amplified as the element is used to model larger and more complex types of structures.   ACKNOWLEDGMENTS   This work was supported by the United States Office of Naval Research under contract number N00014-13-C-0373. Any opinions, findings, conclusions, or recommendations are those of the authors and do not necessarily reflect the views of the sponsoring agency.   REFERENCES", "highlights": "A generalized shell heat transfer element is formulated in isoparametric coordinates to simulate the 3D thermal of non-uniformly heated shells with curved geometries. The element uses a combination of finite element and control volume methods to discretize the domain of the element into 2D layers that are coupled by a finite difference calculation. As demonstrated in previous work, the finite element-control volume formulation allows the thermal response to be evaluated with minimal computational expense and the temperature field is calculated in a manner that is compatible with distributed plasticity elements for structural analysis. Although the formulation uses a mixture of finite element and finite difference equations, the element equations are in a form that can readily be implemented in a commercial finite element code. The nine-node quadratic element considered here is implemented in Abaqus as a user-defined element. One-, two-, and three-dimensional verification cases are presented to demonstrate the capabilities of the element. Comparisons between the shell heat transfer element and traditional continuum heat transfer elements illustrate that the shell element converges rapidly and results in significant savings in computational expense."}