{"id": "S001044851300170X", "article": "MAIN-TITLE An optimization approach for constructing trivariate B -spline solids   HIGHLIGHTS          Automatically construct a trivariate tensor-product B -spline solid.      The minimal Jacobian of the resulting solid is positive.      A volumetric functional is minimized to improve parametrization quality.      Deformation, constraint aggregation, and divide-and-conquer techniques combined.          KEYPHRASES   Trivariate     B     -spline solid  Jacobian  Divide-and-conquer  Constraint aggregation  Hierarchical optimization   Isogeometric analysis is a numerical analysis technique where CAD basis functions are used to represent both geometry and the approximate physical field\u00a0 [1]. It has emerged as an important numerical analysis technique and offers the potential to bridge CAD and finite element analysis. A prerequisite in isogeometric analysis is the availability of CAD basis based volumetric parametrization of the physical domain since a geometric representation in CAD systems provides only boundary definitions. Towards this end, this paper provides an approach that can automatically construct a trivariate B -spline solid from a given set of six boundary surfaces or from a boundary triangulation. A trivariate B -spline solid establishes a mapping that maps a cubic parametric domain to a 3D physical domain. A mapping that is useful for many practical applications such as finite element or isogeometric analysis is one that does not involve self-intersection or folding. One way to ensure that the mapping is free from self-intersection is to ensure that the Jacobian of the mapping does not change sign. In this paper, we find the internal control points to maximize the minimal Jacobian of the B -spline solid. When the minimal Jacobian is positive, the mapping is free from self-intersection. This approach further minimizes a volumetric functional to improve resulting parametrization quality.   Fig.\u00a01 gives an example of constructing a B -spline solid from a boundary triangulation. Fig.\u00a01(a) shows the input triangles and Fig.\u00a01(b) shows the reconstructed 6 compatible B -spline surfaces. Fig.\u00a01(c), (d), and (e) are respectively the initial constructed B -spline solids, the optimized valid B -spline solid, and the solid with improved parametrization. The colour represents the Jacobians. B\u00e9zier patches with negative B\u00e9zier coefficients of det J are shown in shaded colours and the control points that affect them are shown in blue points. It can be seen that the B\u00e9zier patches on the neck intersect each other. In Fig.\u00a01(d) the mesh is valid. The Bezier patches in Fig.\u00a01(d) now have all positive B\u00e9zier coefficients of det J except the zero coefficients on the boundary edges. It can be seen that the elements on the neck no longer intersect each other (see the boxed area in Fig.\u00a01(c) and (d)). After mesh quality improvement, in Fig.\u00a01(e) the mesh becomes much smoother than that in Fig.\u00a01(d) (see the circled areas in Fig.\u00a01(d) and (e)).  Our basic approach is as follows. From the boundary triangulations we reconstruct simultaneously six valid and compatible boundary B -spline surfaces with optional G 1 smoothness across the boundary curves and corners. From the boundary B -spline surfaces, we use deformation techniques to create an initial B -spline solid that is valid or near-valid. We then maximize the minimal B -spline coefficient of det J until a valid B -spline solid is obtained. This is possible since the Jacobian of a B -spline solid is a high order trivariate B -spline. The minimal Jacobian is thus bounded by the minimal B -spline coefficient of det J .  For a trivariate B -spline solid even with moderate shape complexity, direct optimization of the Jacobian of the B -spline solid is computationally prohibitive since it would involve thousands of design variables and hundreds of thousands of constraints. We have thus developed several techniques to address this challenge. We use a divide-and-conquer approach to partition the large optimization problem into a set of separable sub-problems. For each sub-problem, we group the B -spline coefficients of det J into different blocks and make one constraint for each block of coefficients. This is achieved by taking an aggregate function, the Kreisselmeier\u2013Steinhauser function value of the elements in each block. With block aggregation, the dimension of the problem reduces dramatically. In order to further reduce the computing time at each iteration, a hierarchical optimization approach is used where the input boundary surfaces are coarsened to difference levels. We optimize the distribution of internal control points for the coarse representation first, then use the result as initial parametrization for optimization at the next level. At last, we further improve the mesh quality by minimizing a volumetric functional and several parametrization metrics are used to evaluate the mesh quality.  Our approach extends earlier work in 2D parametrization where minimal Jacobians of B -spline surfaces are maximized\u00a0 [2,3]. Optimization approaches to 3D parametrization have been attempted. In\u00a0 [4], a variational approach for generating NURBS parametrization of swept volumes is presented. In\u00a0 [5] an optimization based approach for generating trivariate B -spline solids is also presented. However, as shown in this paper, direct optimization is only applicable to small scale problems. Other approaches to volumetric parametrization for isogeometric analysis have also been developed. In\u00a0 [6], a tetrahedral mesh was parametrized based on discrete volumetric harmonic functions and then fitted to a single skeleton based trivariate B -spline solid. Instead of having six exterior surfaces, it only has one exterior surface with singularities on the inner skeleton axis. In\u00a0 [7], a method of converting an unstructured quadrilateral and hexahedral mesh to a rational T -spline was proposed. Based on the method in\u00a0 [7], in\u00a0 [8], solid T -splines were constructed from the triangular boundary representations for genus-zero geometry. Further, in\u00a0 [9], a method of constructing solid T -splines from boundary triangulations with arbitrary genus topology is given.  Thus far few of the above approaches have addressed the quality of the parametrization. Even though isogeometric analysis is shown to be robust even under severe mesh distortion\u00a0 [10], the statistics in\u00a0 [11] suggests that the mesh quality influences the accuracy and convergence of the analysis solutions. In this paper, besides the Jacobian, we evaluate the resulting mesh metrics such as orthogonality, Oddy metric and condition number.  A trivariate B -spline solid can be defined as    T   ( u , v , w )  =   \u2211   i = 0   m     \u2211   j = 0   n     \u2211   k = 0   l     N   i , p    ( u )    N   j , q    ( v )    N   k , r    ( w )     P    i , j , k   ,   where    P    i , j , k   , i = 0 , 1 , \u2026 , m , j = 0 , 1 , \u2026 , n , k = 0 , 1 , \u2026 , l are control points in the u , v and w directions and   N   i , p    ( u )  ,   N   j , q    ( v )  ,   N   k , r    ( w )  are B -splines of degree p in the u , degree q in the v and degree r in the w directions. A B -spline solid can be decomposed to B\u00e9zier volumes. A trivariate B\u00e9zier volume can be defined as      T    B    ( u , v , w )  =   \u2211   i = 0   p     \u2211   j = 0   q     \u2211   k = 0   r     B   i , p    ( u )    B   j , q    ( v )    B   k , r    ( w )     P    i , j , k   ,   where    P    i , j , k   are control points and   B   i , p    ( u )  ,   B   i , q    ( v )  ,   B   i , r    ( w )  are respectively degree p , q , r Bernstein basis polynomials. Definition\u00a01 A point    (   x   1   ,   x   2   , \u2026 ,   x   n   )    T   is singular if  rank   ( J  (   x   1   ,   x   2   , \u2026 ,   x   n   )  )  < n .  At a singular point, finite length, area and volume is mapped to zero length, area and volume.  Let us focus on   R   3   \u2192   R   3   mapping,  u  =    ( u , v , w )    T   \u2192  T  =    ( x , y , z )    T   . Lemma\u00a01  Assume point     u    0   =    (   u   0   ,   v   0   ,   w   0   )    T    is singular, which means   rank   ( J )  < 3  and  det J = 0  . If  det J  has the same sign in the neighbourhood of     (   u   0   ,   v   0   ,   w   0   )    T    , then it is singular but not self-intersecting; if  det J  changes its sign across point     (   u   0   ,   v   0   ,   w   0   )    T    , the neighbourhood around this point has self-intersection \u00a0 [12,13] .   In this paper, for brevity, we abbreviate the determinant of the Jacobian matrix as the Jacobian. According to Lemma\u00a01, a solid mesh has singular points if it has a zero Jacobian and has a self-intersection area if it has both positive and negative Jacobians. By properly determining the u , v , w directions, we could have that, for a valid solid, we have all positive Jacobians and for a self-intersecting solid, we have both positive and negative Jacobians. An all positive Jacobian means min  ( det J )  > 0 . One method to achieve an all positive Jacobian is to maximize the minimum Jacobian until it becomes positive. However, in general it is difficult to obtain min  ( det J )  . In this paper, we focus on the B -spline solid and we express det J of a B -spline solid in the form of a higher order trivariate B -spline. We can thus obtain the bound of min  ( det J )  from the B -spline coefficients of det J . Via maximizing the minimum B -spline coefficient of det J , we can obtain a B -spline solid with an all positive Jacobian.  The partial derivatives of a B -spline solid  T   ( u , v , w )  are:      \u2202  T    \u2202 u   =   \u2211   i = 0   m \u2212 1     \u2211   j = 0   n     \u2211   k = 0   l     N   i , p \u2212 1    ( u )    N   j , q    ( v )    N   k , r    ( w )    \u03b1   i    \u0394     P    i j k , u         \u2202  T    \u2202 v   =   \u2211   i = 0   m     \u2211   j = 0   n \u2212 1     \u2211   k = 0   l     N   i , p    ( u )    N   j , q \u2212 1    ( v )    N   k , r    ( w )    \u03b2   j    \u0394     P    i j k , v         \u2202  T    \u2202 w   =   \u2211   i = 0   m     \u2211   j = 0   n     \u2211   k = 0   l \u2212 1     N   i , p    ( u )    N   j , q    ( v )    N   k , r \u2212 1    ( w )    \u03b3   k    \u0394     P    i j k , w      where  \u0394     P    i j k , u   =    P    i + 1 , j , k   \u2212    P    i , j , k   ,  \u0394     P    i j k , v   =    P    i , j + 1 , k   \u2212    P    i , j , k   ,  \u0394     P    i j k , w   =    P    i , j , k + 1   \u2212    P    i , j , k   ;   \u03b1   i   =   p     u   i + p + 1   \u2212   u   i + 1     ,   \u03b2   j   =   q     v   j + q + 1   \u2212   v   j + 1     ,   \u03b3   k   =   r     w   k + r + 1   \u2212   w   k + 1     ;   u   i + 1   ,   v   j + 1   ,   w   k + 1   are the values of the knot in the knot vectors. The determinant of the Jacobian matrix is  (1)  det J  ( u , v , w )  = det  [    T    u   ,    T    v   ,    T    w   ]  =   \u2211     i   1   = 0   m \u2212 1     \u2211     j   1   = 0   n     \u2211     k   1   = 0   l     \u2211     i   2   = 0   m     \u2211     j   2   = 0   n \u2212 1     \u2211     k   2   = 0   l     \u2211     i   3   = 0   m     \u2211     j   3   = 0   n     \u2211     k   3   = 0   l \u2212 1     N     i   1   , p \u2212 1    ( u )    N     i   2   , p    ( u )    N     i   3   , p    ( u )    N     j   1   , q    ( v )    N     j   2   , q \u2212 1    ( v )    N     j   3   , q    ( v )    N     k   1   , r    ( w )    N     k   2   , r    ( w )    N     k   3   , r \u2212 1    ( w )  p q r   \u03b1     i   1       \u03b2     j   2       \u03b3     k   3     det  [  \u0394     P      i   1     j   1     k   1   , u     \u0394     P      i   2     j   2     k   2   , v     \u0394     P      i   3     j   3     k   3   , w   ]  .      The product of B -splines is a higher order B -spline\u00a0 [14]. Therefore (1) becomes  (2)  det J  ( u , v , w )  =   \u2211     s   1   = 0     m   J       \u2211     s   2   = 0     n   J       \u2211     s   3   = 0     l   J       N     s   1   , 3 p \u2212 1    ( u )    N     s   2   , 3 q \u2212 1    ( v )    N     s   3   , 3 r \u2212 1    ( w )    J     s   1   ,   s   2   ,   s   3       where   J     s   1   ,   s   2   ,   s   3     is the coefficient of the higher order Jacobian trivariate B -spline. The degrees corresponding to the u , v , w parameters are 3 p \u2212 1 , 3 q \u2212 1 , 3 r \u2212 1 and   m   J   =  ( m \u2212 p )   ( 2 p + 1 )  + 3 p \u2212 1 ,   n   J   =  ( n \u2212 q )   ( 2 q + 1 )  + 3 q \u2212 1 ,   l   J   =  ( l \u2212 r )   ( 2 r + 1 )  + 3 r \u2212 1 which are the number of coefficients in the u , v , w directions. Lemma\u00a02  The Jacobian of a  B  -spline solid is itself a higher order trivariate  B  -spline.     Lemma\u00a03  The coefficients    J     s   1   ,   s   2   ,   s   3      bound the higher order Jacobian trivariate  B  -spline  det J  ( u , v , w )   , thus a sufficient condition for the  B  -spline solid   T   to be valid is that the minimal  B  -spline coefficient of  det J  ( u , v , w )   is positive.    Fig.\u00a02 compares an invalid B -spline solid and valid B -spline solid with the same set of boundary surfaces. In Fig.\u00a02(a), min det J  ( u , v , w )  = \u2212 2.0344 , and the minimum B -spline coefficient of det J is min   J     s   1   ,   s   2   ,   s   3     = \u2212 4.7286 , which bounds det J  ( u , v , w )  . It has mesh folding around the boundaries. By adjusting positions of the internal control points, it becomes a valid B -spline solid, as shown in Fig.\u00a02(b) where the minimal B -spline coefficient of det J is min   J     s   1   ,   s   2   ,   s   3     = 1.4 .  To ensure a valid B -spline solid, we need that the minimal of   J     s   1   ,   s   2   ,   s   3     ,   s   1   = 0 , \u2026 ,   m   J   ;   s   2   = 0 , \u2026 ,   n   J   ;   s   3   = 0 , \u2026 ,   l   J   is positive. Since this is a sufficient but not necessary condition, it is thus desirable to reduce the Jacobian bound\u00a0 [2]. Since B\u00e9zier patches have a tighter convex hull than that of the B -spline solid, we can conduct knot insertions in the internal knots of the U , V , W knot vectors for p \u2212 1 , q \u2212 1 , and r \u2212 1 times respectively to extract the B\u00e9zier patches from the B -spline solid. Then, we calculate the B\u00e9zier coefficients of det J for each B\u00e9zier patch. If they are all larger than zero, then the solid is valid. Otherwise, we maximize the minimal B\u00e9zier coefficient of det J to obtain a valid solid. By taking advantage of the properties of Bernstein B\u00e9zier polynomials, we have the Jacobian of the B\u00e9zier solid as    det  J   ( u , v , w )  =   \u2211     s   1   = 0   3 p \u2212 1     \u2211     s   2   = 0   3 q \u2212 1     \u2211     s   3   = 0   3 r \u2212 1     B     s   1   , 3 p \u2212 1    ( u )    B     s   2   , 3 q \u2212 1    ( v )    B     s   3   , 3 r \u2212 1    ( w )    J     s   1   ,   s   2   ,   s   3     ,    (3)    J     s   1   ,   s   2   ,   s   3     =   \u2211           i   1   +   i   2   +   i   3   =   s   1       i   1   \u2208  [ 0 , p \u2212 1 ]        i   2   \u2208  [ 0 , p ]        i   3   \u2208  [ 0 , p ]        \u2211           j   1   +   j   2   +   j   3   =   s   2       j   1   \u2208  [ 0 , q ]        j   2   \u2208  [ 0 , q \u2212 1 ]        j   3   \u2208  [ 0 , q ]        \u2211           k   1   +   k   2   +   k   3   =   s   3       k   1   \u2208  [ 0 , r ]        k   2   \u2208  [ 0 , r ]        k   3   \u2208  [ 0 , r \u2212 1 ]         (   p \u2212 1     i   1     )   (   p     i   2     )   (   p     i   3     )   (   q     j   1     )   (   q \u2212 1     j   2     )   (   q     j   3     )   (   r     k   1     )   (   r     k   2     )   (   r \u2212 1     k   3     )     (   3 p \u2212 1     i   1   +   i   2   +   i   3     )   (   3 q \u2212 1     j   1   +   j   2   +   j   3     )   (   3 r \u2212 1     k   1   +   k   2   +   k   3     )    p q r det  [  \u0394     P      i   1     j   1     k   1   , u    \u0394     P      i   2     j   2     k   2   , v    \u0394     P      i   3     j   3     k   3   , w   ]  .    After each B\u00e9zier patch\u2019s Jacobians are computed into a B\u00e9zier form (3), they will then be recomposed into a C0 smooth B -spline form to avoid redundant constraints in optimization. Assume that there are   n   e u   B\u00e9zier segments in the u direction and   n   e v   in the v direction and   n   e w   in the w direction for the original B -spline solid of degree p , q , r . After the recomposing, we would have the Jacobian of a B -spline solid of degree 3 p \u2212 1 , 3 q \u2212 1 , 3 r \u2212 1 in each direction and with a total of  (   n   e u    ( 3 p \u2212 1 )  + 1 )  \u00d7  (   n   e v    ( 3 q \u2212 1 )  + 1 )  \u00d7  (   n   e w    ( 3 r \u2212 1 )  + 1 )  number of coefficients.  The inputs for the optimization are six boundary B -spline surfaces, based on which we first create an initial B -spline solid and then maximize the minimal B -spline coefficient of det J to obtain a valid B -spline solid. Mathematically this can be noted as  (4)    max     X   j   ,   Y   j   ,   Z   j        min   i      J   i   , i = 1 , \u2026 , M   where   J   i   , i = 1 , \u2026 , M are the B -spline coefficients of det J and   X   j   ,   Y   j   ,   Z   j   , j = 1 , \u2026 , N are the coordinates of the internal control points. N is the number of the internal control points of the B -spline solid. Eq. (4) itself is not differentiable. We thus introduce an auxiliary design variable \u03b2 to transform the formulation of the unconstrained problem into a constrained optimization (5) as follows.   (5)    min   \u03b2 ,   X   j   ,   Y   j   ,   Z   j     \u2212 \u03b2     s.t. \u03b2 \u2212   J   i   \u2264 0 ,  i = 1 , \u2026 , M       X   j   \u2208  [   X    min    ,   X    max    ]  ,       Y   j   \u2208  [   Y    min    ,   Y    max    ]  ,       Z   j   \u2208  [   Z    min    ,   Z    max    ]  ,  j = 1 , \u2026 , N .    For simplicity,   X    min    ,   X    max    ,   Y    min    ,   Y    max    ,   Z    min    ,   Z    max    are set as the bounding box of the control net of the boundary B -spline surfaces. In this formulation, we use all the internal control points of the B -spline solid as the design variables and all the B -spline coefficients of det J as constrains. Since the internal control points have no influence over the B -spline coefficients at the edges and corners, which are only affected by the input boundary B -spline surfaces, so in our implementation, we exclude all the coefficients at the edges and corners from the constraint list.  Direct maximization of the minimal Jacobian as shown in (5) is both time consuming and memory inefficient. For a degree p \u00d7 q \u00d7 r  B -spline solid with  ( m + 1 )  \u00d7  ( n + 1 )  \u00d7  ( l + 1 )  control points, the number of design variables is N = 3  ( m \u2212 1 )   ( n \u2212 1 )   ( l \u2212 1 )  + 1 . The number of Jacobian constraints is M =  (   n   e u    ( 3 p \u2212 1 )  + 1 )  \u00d7  (   n   e v    ( 3 q \u2212 1 )  + 1 )  \u00d7  (   n   e w    ( 3 r \u2212 1 )  + 1 )  , where   n   e u   =  ( m \u2212 p + 1 )  ,   n   e v   =  ( n \u2212 q + 1 )  ,   n   e w   =  ( l \u2212 r + 1 )  . We could see that both N and M increase linearly with the number of control points. So the size of the sensitivity matrix (measuring the sensitivity of Jacobian constraints with respect to control point change) increases quadratically with the model size. If the number of control points are 20 \u00d7 20 \u00d7 20 = 8000 and the degrees are p = q = r = 3 , the sensitivity matrix will be N \u00d7 M = 17497 \u00d7 2571353 , about 45G entries. This analysis suggests that, although the formulation shown in (5) has been successfully used in bivariate B -spline parametrization\u00a0 [2,3], its direct application in trivariate B -spline parametrization is computationally untractable. That is, direct optimization with all the internal control points as design variables and B -spline coefficients of det J as constraints can only be used for small size models, for example, with less than 1000 control points. Next, we present four computational techniques to make the formulation applicable to practical 3D problems.  Four techniques have been developed to tackle the challenge. Firstly, several initialization methods for rapidly generating near-valid initial B -spline solids are proposed. After some comparisons, the method of deformation governed by the elastic equilibrium equation gives better initial solids. With good initialization, we thus have a B -spline solid with a very small number of invalid B\u00e9zier patches that are scattered in the solid instead of having a larger number of invalid patches throughout the whole solid. Thus, a divide-and-conquer method is then applied to optimize the isolated groups of invalid B\u00e9zier patches separately, which significantly reduces the problem size. Constraint aggregation can further reduce the size of the optimization problem by reducing the total number of constraints. Hierarchical optimization uses a good coarse solid as the initial model for the fine solid optimization. Thus, the computing time at the fine level is reduced at the cost of solving an additional coarse and small optimization problem.   Fig.\u00a03 overviews our optimization approach. The inputs are six B -spline boundary surfaces    S    i   1   , i = 1 , 2 , \u2026 , 6 , the superscript means the B -spline refinement level and the subscript means the surface number. Firstly, we build the multilevel models by coarsening the fine boundary surfaces    S    1   to coarse boundary sets    S    \u03b1   , \u03b1 = 1 , \u2026 , H , which are the inputs for hierarchical optimization. Secondly, an initial B -spline solid    T    H   is created from the coarsest B -spline boundary    S    H   . Thirdly, we optimize    T    \u03b1   to make it valid. Fourthly, judge if \u03b1 = 1 ; if not, refine    T    \u03b1   and use its internal control points as the initial parametrization for    T    \u03b1 \u2212 1   , let \u03b1 = \u03b1 \u2212 1 and go to step 2; if yes, end this process. When hierarchical optimization is desired, H is usually 2 or 3. Otherwise, H = 1 corresponding to single level optimization.  We maximize the minimal B -spline coefficient of det J until it is positive. For brevity, when a B\u00e9zier patch has a negative B\u00e9zier coefficient of det J in (3), we refer to the patch as an invalid B\u00e9zier patch. Our optimization approach obtains a valid B -spline solid by changing all the invalid B\u00e9zier patches into valid ones.  A good initialization method is critical for reducing the number of iterations in gradient-based optimization. A good initialization method also creates a B -spline solid with fewer isolated invalid B\u00e9zier patches that can be subsequently handled in a divide-and-conquer manner. The inputs for initialization are six valid and compatible B -spline boundary surfaces,    S    1   H    ( u , v )  ,    S    2   H    ( u , v )  ,    S    3   H    ( u , w )  ,    S    4   H    ( u , w )  ,    S    5   H    ( v , w )  ,    S    6   H    ( v , w )  . We have the superscript H because initialization is only needed at the coarsest level in the hierarchical optimization. In the later sections we omit H for brevity. The output is the initial B -spline solid with the internal control points created from the boundary surfaces. In this paper, we study and compare two sets of initialization methods: Coons patch based and deformation based methods.   Coons patch interpolation: The first method for B -spline solid initialization is through Coons patch interpolation. A Coons patch[15,16] interpolates six boundary surfaces, twelve boundary edges and eight corners. Let   \u03c8   0   u   = 1 \u2212 u ,   \u03c8   0   v   = 1 \u2212 v ,   \u03c8   0   w   = 1 \u2212 w ,   \u03c8   1   u   = u ,   \u03c8   1   v   = v ,   \u03c8   1   w   = w . Then the Coons volume is defined as follows  (6)     T    c    ( u , v , w )  =   \u03c8   0   w      S    1    ( u , v )  +   \u03c8   1   w      S    2    ( u , v )  +   \u03c8   0   v      S    3    ( u , w )  +   \u03c8   1   v      S    4    ( u , w )  +   \u03c8   0   u      S    5    ( v , w )  +   \u03c8   1   u      S    6    ( v , w )  \u2212  [   \u03c8   0   v     \u03c8   0   w      S    1    ( u , 0 )  +   \u03c8   1   v     \u03c8   0   w      S    1    ( u , 1 )  +   \u03c8   0   v     \u03c8   1   w      S    2    ( u , 0 )  +   \u03c8   1   v     \u03c8   1   w      S    2    ( u , 1 )  +   \u03c8   0   u     \u03c8   0   w      S    1    ( 0 , v )  +   \u03c8   1   u     \u03c8   0   w      S    1    ( 1 , v )  +   \u03c8   0   u     \u03c8   1   w      S    2    ( 0 , v )  +   \u03c8   1   u     \u03c8   1   w      S    2    ( 1 , v )  +   \u03c8   0   u     \u03c8   0   v      S    3    ( 0 , w )  +   \u03c8   1   u     \u03c8   0   v      S    3    ( 1 , w )  +   \u03c8   0   u     \u03c8   1   v      S    4    ( 0 , w )  +   \u03c8   1   u     \u03c8   1   v      S    4    ( 1 , w )  ]  +  [   \u03c8   1   u     \u03c8   0   v     \u03c8   0   w      S    1    ( 1 , 0 )  +   \u03c8   0   u     \u03c8   0   v     \u03c8   0   w      S    1    ( 0 , 0 )  +   \u03c8   0   u     \u03c8   1   v     \u03c8   0   w      S    1    ( 0 , 1 )  +   \u03c8   1   u     \u03c8   1   v     \u03c8   0   w      S    1    ( 1 , 1 )  +   \u03c8   1   u     \u03c8   1   v     \u03c8   1   w      S    2    ( 1 , 1 )  +   \u03c8   0   u     \u03c8   0   v     \u03c8   1   w      S    2    ( 0 , 0 )  +   \u03c8   1   u     \u03c8   0   v     \u03c8   1   w      S    2    ( 1 , 0 )  +   \u03c8   0   u     \u03c8   1   v     \u03c8   1   w      S    2    ( 0 , 1 )  ]  .   The Coons volume interpolating 6 surfaces is then used to generate the initial internal control points of the B -spline solid. In this case, we uniformly distribute the parameters u , v , w and evaluate (6) to obtain a set of inner points of the Coon\u2019s volume    T    c    (   i   m   ,   j   n   ,   k   l   )  , i = 1 , 2 , \u2026 , m \u2212 1 , j = 1 , 2 , \u2026 , n \u2212 1 , k = 1 , 2 , \u2026 , l \u2212 1 , then we use these points as the internal control points of the B -spline solid.   Deformation method. The second type of initialization method is through deformation. We deform a cuboid discretized with hexahedral grids to the given shape with the boundary nodes of the cuboid in six sides deformed to the corresponding control points of the six surfaces. The resulting internal grid points of the cuboid thus become the initial internal control points of the B -spline solid. We solve this deformation through the finite element or finite difference method.  In Fig.\u00a04 , a cuboid is deformed to the duck shape. The initial size of the cuboid in the u direction is the average distance between the control net of the two opposite B -spline surfaces in u direction. The same holds for the initial size of the cuboid in v and w directions. The node indexed by  ( 0 , 0 , 0 )  of the cuboid is set as the same position as the control point indexed by  ( 0 , 0 , 0 )  of the B -spline solid. The grid points for the cuboid are noted as    u    i , j , k   1   , i = 0 , \u2026 , m , j = 0 , \u2026 , n , k = 0 , \u2026 , l , which is a hexahedral grid with uniformly sized elements.    u    i , j , k   1   are the coordinates of node  ( i , j , k )  . After being deformed to the duck shape, the grid coordinates are    u    i , j , k   2   . Superscript 1 means un-deformed and 2 means deformed grid points. The coordinates of the boundary nodes of the deformed cuboid are set as control points of the 6 boundary surfaces.  In the deformation, we only apply loads on the boundary nodes (nodes on six exterior faces). There are no loads on the internal nodes. The loads  f  on the boundary are unknown and the displacements on the boundary are given as  (7)     u    i , j , k   \u03b4   =    u    i , j , k   2   \u2212    u    i , j , k   1   ,  i = 0 , m ,  j = 0 , n ,  k = 0 , l ,   where    u    i , j , k   \u03b4   is the nodal displacement on node  ( i , j , k )  . Thus we can easily solve the displacement field of the cuboid by FEM or the finite difference method.  The deformed grids of the cuboid are then used as the control net of the B -spline solid. The exterior nodes correspond to the exterior control points and the internal nodes correspond to the internal control points. After the deformation, we can obtain the internal control points of the B -spline solid from the displacements of the internal grids nodes of the cuboid, namely    u    i , j , k   2   =    u    i , j , k   1   +    u    i , j , k   \u03b4   , i = 1 , \u2026 , m \u2212 1 , j = 1 , \u2026 , n \u2212 1 , k = 1 , \u2026 , l \u2212 1 .  The deformation can be computed as follows.  (i) Equilibrium equations of linear elasticity  (8)   ( \u03bb + \u03bc )  \u2207 \u2207 \u22c5    u    \u03b4   + \u03bc  \u0394     u    \u03b4   +  f  = 0 ,   where    u    \u03b4   is the displacement field, \u03bb and \u03bc are lame and shear modulus, determined by Poisson ratio, which is usually set as 0.3. If the model has large concave areas, one can try larger Poisson ratios like 0.4, but it should be smaller than 0.5.  f  is unknown in the boundary, and 0 in the interior. (8) is solved by FEM.  Poisson equations  (9)   \u0394     u    \u03b4   +  f  = 0      f  is unknown in the boundary, and 0 in the interior. (9) is solved by FEM.  Discrete form of Laplace equations  (10)     u    i , j , k   \u03b4   =   1   6    (    u    i \u2212 1 , j , k   \u03b4   +    u    i + 1 , j , k   \u03b4   +    u    i , j \u2212 1 , k   \u03b4   +    u    i , j + 1 , k   \u03b4   +    u    i , j , k \u2212 1   \u03b4   +    u    i , j , k + 1   \u03b4   )   i = 1 , \u2026 , m \u2212 1 ; j = 1 , \u2026 , n \u2212 1 ;  k = 1 , \u2026 , l \u2212 1        u    i , j , k   \u03b4   is the displacement of node  ( i , j , k )  , (10) is derived by finite difference and can be solved directly since it is just a linear system.  One main benefit of having a good initialization method is that the resulting B -spline solid is near valid, i.e. most of the B\u00e9zier patches are valid and the invalid B\u00e9zier patches are scattered and may be separable. The divide-and-conquer approach exploits the separability of invalid B\u00e9zier patches to reduce the original large optimization problem into a set of separable small sub-problems. That is, instead of optimizing the whole B -spline solid, isolated groups of invalid B\u00e9zier patches are optimized separately.  In Fig.\u00a05 , there are three isolated groups of invalid B\u00e9zier patches, noted as   \u03a9   s   , s = 1 , 2 , 3 . Since they are isolated from each other we can optimize them separately. In the optimization of   \u03a9   s   , the optimization variables are the internal control points that affect   \u03a9   s   , the constraints are the B -spline coefficients of det J that are affected by those internal control points. Next, we define what are the separable B\u00e9zier groups. Definition\u00a02 Let two groups of B\u00e9zier patches be   \u03a9     s   1     and   \u03a9     s   2     . The B -spline control point sets that affect   \u03a9     s   1     and   \u03a9     s   2     are noted as   \u0398     s   1     and   \u0398     s   2     . Iff   \u0398     s   1     \u2229   \u0398     s   2     = 0\u0338 ,   \u03a9     s   1     and   \u03a9     s   2     are separable from each other.  Separable groups can be optimized independently while non-separable groups must be optimized simultaneously since moving any control point of one group will have an influence over the other. The criterion for two groups to be separable is given in Lemma\u00a04. Lemma\u00a04  A  B  -spline solid   T   is decomposed into B\u00e9zier patches     T      B   i , j , k     , i = 0 , \u2026 , m \u2212 p , j = 0 , \u2026 , n \u2212 q , k = 0 , \u2026 , l \u2212 r  .   ( i , j , k )   are the indexes of the B\u00e9zier patch in the  u , v , w  directions. For two B\u00e9zier patches     T      B     i   1   ,   j   1   ,   k   1        and     T      B     i   2   ,   j   2   ,   k   2        , if   (11)   |   i   1   \u2212   i   2   |  \u2264 p ,   |   j   1   \u2212   j   2   |  \u2264 q ,   and    |   k   1   \u2212   k   2   |  \u2264 r    then there exist such control points that affect both     T      B     i   1   ,   j   1   ,   k   1        and     T      B     i   2   ,   j   2   ,   k   2        , thus     T      B     i   1   ,   j   1   ,   k   1        and     T      B     i   2   ,   j   2   ,   k   2        are not separable from each other. Otherwise if   (12)   |   i   1   \u2212   i   2   |  > p   or    |   j   1   \u2212   j   2   |  > q   or    |   k   1   \u2212   k   2   |  > r        T      B     i   1   ,   j   1   ,   k   1        and     T      B     i   2   ,   j   2   ,   k   2        are separable from each other. For two groups    \u03a9     s   1      and    \u03a9     s   2      to be separable, all the B\u00e9zier patches in    \u03a9     s   1      must be separable from the ones in    \u03a9     s   2      .   Based on Lemma\u00a04, we group those invalid B\u00e9zier patches into different separable groups. Then we can optimize these groups one by one as in (5), yet the problem dimension for each group is now substantially smaller than the entire B -spline solid due to far fewer B -spline control points being involved in each sub-problem.  As shown in Section\u00a0 3.1, direct optimization faces challenges of handling a large number of constraints. Even with a divide-and-conquer strategy, sometimes we still have a considerable number of constraints. We thus propose to use constraint aggregation [17,18] to effectively reduce the number of constraints. A single B\u00e9zier solid has M = 27 p q r B\u00e9zier coefficients of det J . If the degrees p , q , r = 2 , then we have M = 216 , if the degrees p , q , r = 3 , M = 729 . So even with relatively good initial B -spline solid and a small number of invalid B\u00e9zier patches, we still have thousands of Jacobian constraints. Using the constraint aggregation strategy, we can reduce the number of constrains to tens or hundreds which would help reduce the running time in optimization. A simple constraint aggregation can be achieved through a Kreisselmeier\u2013Steinhauser (KS) function  (13)  G = \u2212   1   P   ln  [   \u2211   i   exp  ( \u2212 P   J   i   )  ]  .   As the penalty parameter P \u2192 \u221e , G \u2192 min  (   J   i   )  , i = 1 , \u2026 , M .   J   i   are the B -spline coefficients of det J .  However, grouping too many constraints into one K\u2013S function can lead to a large discrepancy between G and min  (   J   i   )  which leads to poor convergence in optimization. Thus, we replace this simple aggregation with block aggregation. That is,  (14)    G   k   = \u2212   1   P   ln  [   \u2211   i \u2208   I   k     exp  ( \u2212 P   J   i   )  ]  ,  k = 1 , 2 , \u2026 , L       I   k   is the k th block of the B -spline coefficients of det J ,   G   k   is the value of the K\u2013S function of block   I   k   , L is the number of blocks.   M   L   is the block size, namely the number of elements in one block. We divide the B -spline coefficients of det J into multiple blocks and calculate the K\u2013S function value   G   k   for each block k , which corresponds to one constraint. In the optimization, we use   G   k   ,  k = 1 , \u2026 , L to substitute   J   i   ,  i = 1 , \u2026 , M to reduce the number of constraints. The new optimization formulation is as below      min     X   j   ,   Y   j   ,   Z   j   , \u03b2    \u2212 \u03b2     s.t. \u03b2 \u2212   G   k   \u2264 0 ,  k = 1 , \u2026 , L .       Based on our numerical experiments, we have chosen the following block aggregation strategy: as shown in Fig.\u00a06 , the B -spline coefficients of det J are first ordered according to their numerical values, from small to large. They are then aggregated into blocks so that there is a separation among B -spline coefficients in each block. Such a separation in numerical values of B -spline coefficients, especially the minimal coefficient is separated from the other coefficients, is numerically shown to be effective for maximizing the minimal coefficient. Such a separation in numerical values of B -spline coefficients makes the K\u2013S function an effective substitute for the minimal Jacobian since the difference between   G   k   and   min   i \u2208   I   k       J   i   is small and the resulting sensitivity matrix is well-conditioned, and good convergence in the optimization can be achieved. The specific parameters include (1) adaptively setting the parameter P \u2208  [ 5 , 25 ]  . and (2) choosing the number of entries in each block to be   M   L   \u2208  [ 300 , 1000 ]  .  A further technique developed for efficient optimization in this paper is through hierarchical optimization. The hierarchical optimization is useful when initialization fails to produce a near-valid B -spline solid. We optimize the coarse mesh first, then refine the coarse mesh and use the internal control points of the coarse mesh as the initial model for fine model optimization. Using this strategy, we can obtain good initial control points in the fine level optimization and can reduce the optimization time at the fine scale. Reducing the problem scale in the fine optimization level at the cost of an additional coarse optimization can be very profitable since the coarse optimization usually involves a much smaller problem.  As the inputs of the hierarchical optimization, multilevel models are obtained by coarsening the fine boundary surfaces    S    1   to coarse boundary sets    S    \u03b1   , \u03b1 = 1 , \u2026 , H as shown in Fig.\u00a03. Assume    S    i   1   =   N   i   1      P    i   , i = 1 , \u2026 , 6 , the fine B -spline boundary surfaces,    S    i   \u03b1   =   N   i   \u03b1      Q    i   , i = 1 , \u2026 , 6 , the coarse B -spline boundary surfaces in \u03b1 th level, then the deviation from coarse boundary to fine boundary is  (15)    \u0394   \u03b1   =   \u2211   i = 1   6   \u222c    \u2016   N   i   \u03b1      Q    i   \u2212   N   i   \u03b1      P    i   \u2016    2   d u d v .   We can obtain the coarse boundary by minimizing (15), in this case just a set of linear equations needs to be solved. At each level of the B -spline solid   T   \u03b1   in the hierarchical optimization as shown in Fig.\u00a03, both divide-and-conquer and constraint aggregation strategies are used.  By applying the above optimization approach, we can efficiently obtain a valid B -spline solid. In this paper, we also demonstrate how the overall mesh quality can be further improved via minimizing a volumetric functional.  We evaluate the mesh quality with the following metrics.  (i) Jacobian metric det  ( J )  , indicate that if the mesh is valid. det  ( J )  \u2265 0 is always required.  Condition number metric   f    cond    =    \u2016 J \u2016    F   \u22c5    \u2016   J   \u2212 1   \u2016    F   =      \u2016 J \u2016    F   2      | det  ( J )  |    , indicate if the Jacobian matrix at a given point is ill-conditioned. The subscript F means the Frobenius norm. For an equilateral and orthogonal element,   f    cond    = 3 . In other cases   f    cond    \u2265 3 . The smaller   f    cond    is, the more equilateral and orthogonal the element would be.  Oddy metric\u00a0 [19]    f    Oddy    = det    ( J )    \u2212   3   4      {    \u2016   J   T   J \u2016    F   2   \u2212   1   3      \u2016 J \u2016    F   4   }  , it is based on an analogy between mesh distortions and mechanical strains. For an equilateral and orthogonal element,   f    Oddy    = 0 , in other cases   f    Oddy    > 0 . The larger   f    Oddy    is, the bigger the distortion would be.  Orthogonal metric   f   \u22a5   =  ( 1 \u2212  |      T    u        \u2016    T    u   \u2016    2     \u22c5      T    v        \u2016    T    v   \u2016    2     |  )  \u00d7  ( 1 \u2212  |      T    u        \u2016    T    u   \u2016    2     \u22c5      T    w        \u2016    T    w   \u2016    2     |  )  \u00d7  ( 1 \u2212  |      T    v        \u2016    T    v   \u2016    2     \u22c5      T    w        \u2016    T    w   \u2016    2     |  )  ,    f   \u22a5   \u2208  [ 0 , 1 ]  . For the orthogonal elements,   f   \u22a5   = 1 . For the elements with 0\u00b0 or 180\u00b0 angle,   f   \u22a5   = 0 . The larger   f   \u22a5   is, the more orthogonal the mesh would be.  Given a valid B -spline solid, we minimize the following functional to improve mesh quality   (16)    min     X   j   ,   Y   j   ,   Z   j        \u03bb   1     E    stretching    +   \u03bb   2     E    bending        s.t. \u2212   J   i   \u2264 0 ,  i = 1 , \u2026 , M    where optimization variables   X   j   ,   Y   j   ,   Z   j   are internal control points of the B -spline solid. Minimizing   E    stretching    = \u222d  (    T    u   2   +    T    v   2   +    T    w   2   )  d u d v d w tends to make the iso-curves short and generates orthogonal elements\u00a0 [20], and minimizing   E    bending    = \u222d  (    T    u u   2   +    T    v v   2   +    T    w w   2   + 2    T    u v   2   + 2    T    v w   2   + 2    T    w u   2   )  d u d v d w tends to make the iso-curves parallel to each other and generates uniformly sized elements[21,5]. Sometimes the orthogonality and uniformity are contradictory. If we want an orthogonal mesh and short iso-curves, then choose larger   \u03bb   1   ; if we want uniformly sized elements, then choose larger   \u03bb   2   . Usually, larger   \u03bb   2   will give very good statistics in the condition number metric and Oddy metric. Since (16) is a global volumetric functional, the solution thus would lead to improved mesh quality in an average sense.  The inputs for the optimization is six compatible B -spline boundary surfaces, based on which the B -spline solid initialization, mesh rectification and quality improvement are conducted. We can obtain B -spline boundary surfaces directly from CAD systems, or from free-form sweeping\u00a0 [22], or from boundary triangulations. We briefly describe below how we fit B -spline boundary surfaces from the boundary triangulations.  As shown in Fig.\u00a07 , the input is a closed boundary triangulation. We partition the boundary triangulations into six areas, each area corresponding to one face of the hexahedral solid. Then, by applying the harmonic parametrization method\u00a0 [8], the boundary triangulations are parametrized in the sense that each vertex has unique parameters u , v , w . Based on the parametrization, six compatible and valid B -spline boundary surfaces with optional G 1 smoothness constraint (18) are reconstructed by (17) as follows.   (17)    min   X , Y , Z      \u2211   i = 1   6    [   \u03bb   1   i     E   i   s _  error    +   \u03bb   2   i     E   i    stretching    +   \u03bb   3   i     E   i    bending    ]     (18)  s.t.   C   1   X = 0 ,    C   2   Y = 0 ,    C   3   Z = 0      X , Y , Z are the vectors of the coordinates of the surface control points.   E   i   s _  error    is the deviation from the fitted B -spline surface to the boundary triangulations, calculated by the method in\u00a0 [23].   E   i    stretching    =   \u222b   0   1     \u222b   0   1    (   S   i , u   2   +   S   i , v   2   )  d u d v ,   E   i    bending    =   \u222b   0   1     \u222b   0   1    (   S   i , u u   2   + 2   S   i , u v   2   +   S   i , v v   2   )  d u d v . A larger   \u03bb   1   i   will reduce the fitting error and larger   \u03bb   2   i   and   \u03bb   3   i   will make the surface smoother and suppress mesh folding. (18) represents simplified G 1 linear constraints\u00a0 [24] that ensure G 1 continuity across both the shared edges and corners.  We demonstrate below the effect of our optimization approach on four sets of data as shown in Fig.\u00a08 . The inputs are boundary triangles. We reconstruct six boundary B -spline surfaces for each of the models, where G 1 constraints are imposed for the first three models (where G 1 edges are shown in red). We then obtain the B -spline solid models from the initialization methods. Table\u00a01 compares the statistics of the resulting B -spline solids. Through optimization, we obtain valid B -spline solids with relatively good mesh quality. In this paper, all optimization is done by Matlab\u2019s fmincon with the active-set option. Before optimization, the Jacobians are scaled to make the absolute value of the minimal Jacobian to be within  [ 1 , 10 ]  . We first multiply each Jacobian by \u03b1 =   \u03b3   \u2212 min  (   J   i   )    with \u03b3 \u2208  [ 1 , 10 ]  . If the magnitude of the minimal Jacobian is scaled to be too small, there would not be enough separation from the other Jacobians and there would be large errors between   G   k   and   min   i \u2208   I   k       J   i   . If the magnitude of the minimal Jacobian is scaled to be too big, the sensitivity matrix involving the K\u2013S function would be ill-conditioned. In all examples, we chose \u03b3 = 6 . All reported Jacobians are scaled back to true values.  In Fig.\u00a09 we compare the resulting B -spline solids from the four initialization methods on the duck model. The deep coloured shaded patches in this figure are the invalid B\u00e9zier patches. It can be seen that deformation through elasticity leads to the fewest number of invalid B\u00e9zier patches. It also involves the least optimization time for obtaining a valid duck solid with positive minimal B -spline coefficient of det J . In Table\u00a02 we compare the number of invalid B\u00e9zier patches for the four models (duck, femur bone, human head and tooth) from four initialization methods. It is clear from Table\u00a02 that deformation through elasticity leads to the fewest invalid B\u00e9zier patches for all four models. Since the number of optimization variables and the number of Jacobian constraints both increase linearly with the number of invalid B\u00e9zier patches, the optimization time increases quadratically with the number of invalid B\u00e9zier patches. Thus in the remainder of this paper, we use the deformation through elasticity to generate the initial B -spline solid.   Figs.\u00a01, 10 , 11 and 12 show the process of obtaining a valid solid with its minimal Jacobian maximized until it is positive. They start with respectively 6 input B -spline surfaces, then through elasticity based deformation, initial B -spline solids are obtained where invalid B\u00e9zier patches are shown in deep shaded colour. Upon optimization, all B\u00e9zier patches become valid, i.e.\u00a0with positive minimal B\u00e9zier coefficients of det J . Figs.\u00a011 and 12 show the hierarchical optimization process where the optimization at a coarse model can be used to reduce significantly the number of invalid B\u00e9zier patches in the fine model. Table\u00a04 further compares the effects of various techniques on optimization time where technique O stands for direct optimization without any technique, technique D stands for the Divide-and-conquer technique, technique C stands for the Constraint aggregation technique, and technique H stands for Hierarchical optimization. The symbol \u2018/\u2019 means that the process is too long to count the time. As the table shows, with the elasticity based deformation as the initialization method, the divide-and-conquer approach is most effective. Combining the divide-and-conquer technique with the constraint aggregation technique can lead to even faster convergence. In all these cases, it usually only takes 1 or 2 iterations to find a valid model, i.e. the minimal Jacobian becoming positive. Hierarchical optimization becomes helpful when the model from the initialization does not lead to many separable invalid B\u00e9izer groups, and the coarse model and fine model are similar as in the head and tooth examples. It should be pointed out, in all examples, without using the above developed optimization technique, the process would either fail to find a valid B -spline solid or the process would be too long for it to be practically useful. Table\u00a03  gives an example in the reduction of problem size for the duck model. As show in Figs.\u00a01(c) and 5, with the initialization, the duck model is divided into three separable invalid B\u00e9zier patch groups. Table\u00a03 compares the number of optimization variables (number of internal control points), number of Jacobian constraints, and the number of constraints with constraint aggregation before and after the application of our optimization techniques. For the invalid B\u00e9zier patch group on the duck neck, before constraint aggregation we need 4.0\u00a0s for one iteration in the optimization, after constraint aggregation we need 1.7\u00a0s for one iteration.  With the above valid B -spline solids, we further minimize the functional (16) on the four models with the goal of improving mesh quality. Due to the space limitation, only two of the four models, the duck model and the head models, are shown here. Figs.\u00a013 and 14  show the distribution of quality metrics det  ( J )  ,   f    cond    ,   f    Oddy    and   f   \u22a5   . From the figures, we can observe that the mesh becomes much smoother after mesh quality improvement. The condition number metric and Oddy metric both become smaller and also smoother as there are larger warm colour areas. The orthogonal metric becomes larger as there are larger blue coloured areas. Table\u00a05 compares the mesh quality metrics of the four models before and minimizing (16), where \u03bc means the average measure and \u03c3 the standard deviation, model 1 represents the obtained valid B -spline solid and model 2 represents the solid after minimizing (16). We can observe from the table that, with the minimization of (16), the average condition number   f    cond    and average Oddy measure   f    Oddy    become smaller and better. The average orthogonality becomes larger and better.   CONCLUSION   In this paper, we have presented an optimization approach with a set of techniques that can efficiently create a valid trivariate tensor-product B -spline solid from different boundary inputs. Our study finds that deforming a cuboid to a given boundary shape through elasticity leads to good initialization in the sense that it generates a near-valid B -spline solid. Such a near-valid solid leads to fewer invalid B\u00e9zier patches (with negative minimal B\u00e9zier coefficient of det J ) scattered throughout the solid. This makes it possible to separate the invalid B\u00e9zier patches into groups where each group can be optimized independently. Such divide-and-conquer has proven to be very effective and reduces the original large-scale optimization problem into a set of smaller sub-problems. The combination of divide-and-conquer, constraint aggregation and the hierarchical optimization have proven to be effective in obtaining valid trivariate B -spline solids from a set of boundary triangulations or given set of six boundary B -spline surfaces.  Minimizing the volumetric stretching and bending energy functional has led to an improvement of the overall mesh quality in terms of the Oddy measure, condition number and the orthogonality of B -spline elements. Future work shall consider the mesh improvement for the worst-quality elements, rather than all elements. Since our approach only deals with genus zero objects, future work would integrate our optimization approach to domain decomposition approaches so complex topologies can be parametrized.   ACKNOWLEDGEMENT   We would like to acknowledge Dr. Long Chen for his help in providing the tooth boundary model.   REFERENCES", "highlights": "In this paper, we present an approach that automatically constructs a trivariate tensor-product B -spline solid via a gradient-based optimization approach. Given six boundary B -spline surfaces for a solid, this approach finds the internal control points so that the resulting trivariate B -spline solid is valid in the sense the minimal Jacobian of the solid is positive. It further minimizes a volumetric functional to improve resulting parametrization quality. For a trivariate B -spline solid even with moderate shape complexity, direct optimization of the Jacobian of the B -spline solid is computationally prohibitive since it would involve thousands of design variables and hundreds of thousands of constraints. We developed several techniques to address this challenge. First, we develop initialization methods that can rapidly generate initial parametrization that are valid or near-valid. We then use a divide-and-conquer approach to partition the large optimization problem into a set of separable sub-problems. For each sub-problem, we group the B -spline coefficients of the Jacobian determinant into different blocks and make one constraint for each block of coefficients. This is achieved by taking an aggregate function, the Kreisselmeier\u2013Steinhauser function value of the elements in each block. With block aggregation, it reduces the dimension of the problem dramatically. In order to further reduce the computing time at each iteration, a hierarchical optimization approach is used where the input boundary surfaces are coarsened to difference levels. We optimize the distribution of internal control points for the coarse representation first, then use the result as initial parametrization for optimization at the next level. The resulting parametrization can then be further optimized to improve the mesh quality. Optimized trivariate parametrization from various boundary surfaces and the corresponding parametrization metric are given to illustrate the effectiveness of the approach."}